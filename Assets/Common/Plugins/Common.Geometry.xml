<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.Geometry</name>
    </assembly>
    <members>
        <member name="T:Common.Geometry.Bezier.Bezier2d">
            <summary>
            A bezier curve of arbitrary degree using a Bernstein Polynominal.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.Bezier2d.Degree">
            <summary>
            The curves degree. 1 is linear, 2 quadratic, etc.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.Bezier2d.Control">
            <summary>
            The control points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.Point(System.Double)">
            <summary>
            The position on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.Tangent(System.Double)">
            <summary>
            The tangent on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.Normal(System.Double)">
            <summary>
            The normal on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.FirstDerivative(System.Double)">
            <summary>
            The first derivative on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.GetPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector2d},System.Int32)">
            <summary>
            Fills the array with positions on the curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.EstimateLength(System.Int32)">
            <summary>
            Length of curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.DeCasteljau(System.Double)">
            <summary>
            Returns the position at t using DeCasteljau's algorithm.
            Same as Position(t) but slower. Used for Testing.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2d.Split(System.Double)">
            <summary>
            Splits the bezier at t and returns the two curves.
            </summary>
            <param name="t">Position to split (0 to 1).</param>
            <returns>The curve from 0 to t and from t to 1.</returns>
        </member>
        <member name="T:Common.Geometry.Bezier.Bezier2f">
            <summary>
            A bezier curve of arbitrary degree using a Bernstein Polynominal.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.Bezier2f.Degree">
            <summary>
            The curves degree. 1 is linear, 2 quadratic, etc.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.Bezier2f.Control">
            <summary>
            The control points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.Point(System.Single)">
            <summary>
            The position on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.Tangent(System.Single)">
            <summary>
            The tangent on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.Normal(System.Single)">
            <summary>
            The normal on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.FirstDerivative(System.Single)">
            <summary>
            The first derivative on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.GetPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector2f},System.Int32)">
            <summary>
            Fills the array with positions on the curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.EstimateLength(System.Int32)">
            <summary>
            Length of curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.DeCasteljau(System.Single)">
            <summary>
            Returns the position at t using DeCasteljau's algorithm.
            Same as Position(t) but slower. Used for Testing.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier2f.Split(System.Single)">
            <summary>
            Splits the bezier at t and returns the two curves.
            </summary>
            <param name="t">Position to split (0 to 1).</param>
            <returns>The curve from 0 to t and from t to 1.</returns>
        </member>
        <member name="T:Common.Geometry.Bezier.Bezier3d">
            <summary>
            A bezier curve of arbitrary degree using a Bernstein Polynominal.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.Bezier3d.Degree">
            <summary>
            The curves degree. 1 is linear, 2 quadratic, etc.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.Bezier3d.Control">
            <summary>
            The control points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3d.Point(System.Double)">
            <summary>
            The position on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3d.Tangent(System.Double)">
            <summary>
            The tangent on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3d.FirstDerivative(System.Double)">
            <summary>
            The first derivative on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3d.GetPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector3d},System.Int32)">
            <summary>
            Fills the array with positions on the curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3d.EstimateLength(System.Int32)">
            <summary>
            Length of curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3d.DeCasteljau(System.Double)">
            <summary>
            Returns the position at t using DeCasteljau's algorithm.
            Same as Position(t) but slower. Used for Testing.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3d.Split(System.Double)">
            <summary>
            Splits the bezier at t and returns the two curves.
            </summary>
            <param name="t">Position to split (0 to 1).</param>
            <returns>The curve from 0 to t and from t to 1.</returns>
        </member>
        <member name="T:Common.Geometry.Bezier.Bezier3f">
            <summary>
            A bezier curve of arbitrary degree using a Bernstein Polynominal.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.Bezier3f.Degree">
            <summary>
            The curves degree. 1 is linear, 2 quadratic, etc.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.Bezier3f.Control">
            <summary>
            The control points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3f.Point(System.Single)">
            <summary>
            The position on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3f.Tangent(System.Single)">
            <summary>
            The tangent on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3f.FirstDerivative(System.Single)">
            <summary>
            The first derivative on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3f.GetPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector3f},System.Int32)">
            <summary>
            Fills the array with positions on the curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3f.EstimateLength(System.Int32)">
            <summary>
            Length of curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3f.DeCasteljau(System.Single)">
            <summary>
            Returns the position at t using DeCasteljau's algorithm.
            Same as Position(t) but slower. Used for Testing.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.Bezier3f.Split(System.Single)">
            <summary>
            Splits the bezier at t and returns the two curves.
            </summary>
            <param name="t">Position to split (0 to 1).</param>
            <returns>The curve from 0 to t and from t to 1.</returns>
        </member>
        <member name="T:Common.Geometry.Bezier.Polynomial3f">
            <summary>
            Cubic polynomial ax^3 + b*x^2 + c*x + d = 0
            </summary>
        </member>
        <member name="T:Common.Geometry.Bezier.QuadraticBezier2f">
            <summary>
            A bezier curve of quadratic degree using a polynominal.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.QuadraticBezier2f.C0">
            <summary>
            The control points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Bezier.QuadraticBezier2f.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.QuadraticBezier2f.Position(System.Single)">
            <summary>
            The position on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.QuadraticBezier2f.Tangent(System.Single)">
            <summary>
            The tangent on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.QuadraticBezier2f.Normal(System.Single)">
            <summary>
            The normal on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.QuadraticBezier2f.FirstDerivative(System.Single)">
            <summary>
            The first derivative on the curve at t.
            </summary>
            <param name="t">Number between 0 and 1.</param>
        </member>
        <member name="M:Common.Geometry.Bezier.QuadraticBezier2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            The closest point on the curve to the point p.
            </summary>
        </member>
        <member name="M:Common.Geometry.Bezier.QuadraticBezier2f.Intersects(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            If the segment ab intersects the curve.
            </summary>
        </member>
        <member name="T:Common.Geometry.Collections.BVHTree2d`1">
            <summary>
            A BVH tree using based on the implementation found here.
            http://allenchou.net/2014/02/game-physics-broadphase-dynamic-aabb-tree/
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTree2d`1.Count">
            <summary>
            The number of shapes in the tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTree2d`1.Depth">
            <summary>
            The max depth of the tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTree2d`1.Root">
            <summary>
            The root node of the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Clear">
            <summary>
            Clear the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Contains(`0)">
            <summary>
            Does the tree contain this shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.FindNode(`0)">
            <summary>
            Find the node that contains this shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a shapes to the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Add(`0)">
            <summary>
            Add a shape to the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Remove(`0)">
            <summary>
            Remove the node containing this shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does a shape contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Containing(Common.Core.Numerics.Vector2d,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that contain the point and 
            add them to the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does a shape intersect the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Intersecting(Common.Geometry.Shapes.Box2d,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that intersect the box and 
            add them to the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            The signed distance to the closest shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.ToList">
            <summary>
            Create a list containing all the
            shapes in the tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.GetEnumerator">
            <summary>
            Enumerate all leaf nodes.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all leaf nodes.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Add(Common.Geometry.Collections.BVHTreeNode2d{`0},Common.Geometry.Collections.BVHTreeNode2d{`0})">
            <summary>
            Add a node to the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.Remove(Common.Geometry.Collections.BVHTreeNode2d{`0})">
            <summary>
            Remove a node from the tree.
            All its children will be remove as well.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.FindNode(Common.Geometry.Collections.BVHTreeNode2d{`0},Common.Geometry.Shapes.IShape2d,Common.Geometry.Shapes.Box2d)">
            <summary>
            Find the node that holds this shape by iterating
            throught the nodes if the shapes aabb is contains
            in the nodes bounds.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.NodeContains(Common.Geometry.Collections.BVHTreeNode2d{`0},Common.Core.Numerics.Vector2d)">
            <summary>
            Find the leaf node that has a shape containing
            this point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.NodeContaining(Common.Geometry.Collections.BVHTreeNode2d{`0},Common.Core.Numerics.Vector2d,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that contain the point and 
            add them to the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.NodeIntersects(Common.Geometry.Collections.BVHTreeNode2d{`0},Common.Geometry.Shapes.Box2d)">
            <summary>
            Find the leaf node that has a shape intersecting
            this box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.NodeIntersecting(Common.Geometry.Collections.BVHTreeNode2d{`0},Common.Geometry.Shapes.Box2d,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that intersect the box and 
            add them to the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.NodeSignedDistance(Common.Geometry.Collections.BVHTreeNode2d{`0},Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Find the smallest signed distance to the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2d`1.NodeCenterMost(Common.Geometry.Collections.BVHTreeNode2d{`0},System.Boolean)">
            <summary>
            Find the node that is center most in the tree.
            </summary>
        </member>
        <member name="T:Common.Geometry.Collections.BVHTree2f`1">
            <summary>
            A BVH tree using based on the implementation found here.
            http://allenchou.net/2014/02/game-physics-broadphase-dynamic-aabb-tree/
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTree2f`1.Count">
            <summary>
            The number of shapes in the tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTree2f`1.Depth">
            <summary>
            The max depth of the tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTree2f`1.Root">
            <summary>
            The root node of the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Clear">
            <summary>
            Clear the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Contains(`0)">
            <summary>
            Does the tree contain this shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.FindNode(`0)">
            <summary>
            Find the node that contains this shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a shapes to the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Add(`0)">
            <summary>
            Add a shape to the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Remove(`0)">
            <summary>
            Remove the node containing this shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does a shape contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Containing(Common.Core.Numerics.Vector2f,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that contain the point and 
            add them to the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does a shape intersect the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Intersecting(Common.Geometry.Shapes.Box2f,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that intersect the box and 
            add them to the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            The signed distance to the closest shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.ToList">
            <summary>
            Create a list containing all the
            shapes in the tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.GetEnumerator">
            <summary>
            Enumerate all leaf nodes.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all leaf nodes.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Add(Common.Geometry.Collections.BVHTreeNode2f{`0},Common.Geometry.Collections.BVHTreeNode2f{`0})">
            <summary>
            Add a node to the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.Remove(Common.Geometry.Collections.BVHTreeNode2f{`0})">
            <summary>
            Remove a node from the tree.
            All its children will be remove as well.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.FindNode(Common.Geometry.Collections.BVHTreeNode2f{`0},Common.Geometry.Shapes.IShape2f,Common.Geometry.Shapes.Box2f)">
            <summary>
            Find the node that holds this shape by iterating
            throught the nodes if the shapes aabb is contains
            in the nodes bounds.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.NodeContains(Common.Geometry.Collections.BVHTreeNode2f{`0},Common.Core.Numerics.Vector2f)">
            <summary>
            Find the leaf node that has a shape containing
            this point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.NodeContaining(Common.Geometry.Collections.BVHTreeNode2f{`0},Common.Core.Numerics.Vector2f,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that contain the point and 
            add them to the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.NodeIntersects(Common.Geometry.Collections.BVHTreeNode2f{`0},Common.Geometry.Shapes.Box2f)">
            <summary>
            Find the leaf node that has a shape intersecting
            this box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.NodeIntersecting(Common.Geometry.Collections.BVHTreeNode2f{`0},Common.Geometry.Shapes.Box2f,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that intersect the box and 
            add them to the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.NodeSignedDistance(Common.Geometry.Collections.BVHTreeNode2f{`0},Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Find the smallest signed distance to the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTree2f`1.NodeCenterMost(Common.Geometry.Collections.BVHTreeNode2f{`0},System.Boolean)">
            <summary>
            Find the node that is center most in the tree.
            </summary>
        </member>
        <member name="T:Common.Geometry.Collections.BVHTreeNode2d`1">
            <summary>
            A node in a BVH tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2d`1.Left">
            <summary>
            The nodes left child.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2d`1.Right">
            <summary>
            The nodes right child.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2d`1.Parent">
            <summary>
            The nodes parent.
            </summary>
        </member>
        <member name="F:Common.Geometry.Collections.BVHTreeNode2d`1.Bounds">
            <summary>
            The bounds of the nodes shape if its a leaf 
            or the bounds of its child if not a leaf.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2d`1.Shape">
            <summary>
            The nodes shape.
            Will be null if this node is not a leaf.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2d`1.IsLeaf">
            <summary>
            If this node in a leaf in the tree.
            Leaves have no childern.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2d`1.Sibling">
            <summary>
            The nodes sibling is its parents other child.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTreeNode2d`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTreeNode2d`1.GetEnumerator">
            <summary>
            Enumerate all leaf nodes.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTreeNode2d`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all leaf nodes.
            </summary>
        </member>
        <member name="T:Common.Geometry.Collections.BVHTreeNode2f`1">
            <summary>
            A node in a BVH tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2f`1.Left">
            <summary>
            The nodes left child.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2f`1.Right">
            <summary>
            The nodes right child.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2f`1.Parent">
            <summary>
            The nodes parent.
            </summary>
        </member>
        <member name="F:Common.Geometry.Collections.BVHTreeNode2f`1.Bounds">
            <summary>
            The bounds of the nodes shape if its a leaf 
            or the bounds of its child if not a leaf.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2f`1.Shape">
            <summary>
            The nodes shape.
            Will be null if this node is not a leaf.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2f`1.IsLeaf">
            <summary>
            If this node in a leaf in the tree.
            Leaves have no childern.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.BVHTreeNode2f`1.Sibling">
            <summary>
            The nodes sibling is its parents other child.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTreeNode2f`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTreeNode2f`1.GetEnumerator">
            <summary>
            Enumerate all leaf nodes.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.BVHTreeNode2f`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all leaf nodes.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.IStaticShapeCollection2d`1.Count">
            <summary>
            The number of shapes in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2d`1.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does a shape contain point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2d`1.Containing(Common.Core.Numerics.Vector2d,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that contain the point and 
            add them to the list
            </summary>
            <param name="point"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2d`1.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does a shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2d`1.Intersecting(Common.Geometry.Shapes.Box2d,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that intersect the box and 
            add them to the list.
            </summary>
            <param name="box"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2d`1.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            Return the signed distance field from 
            the union of all shapes in the collection.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2d`1.ToList">
            <summary>
            Return a list of all the shapes in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.IShapeCollection2d`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.IShapeCollection2d`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add the shapes to the collection.
            </summary>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.IShapeCollection2d`1.Add(`0)">
            <summary>
            Add a shape to the collection.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Common.Geometry.Collections.IShapeCollection2d`1.Remove(`0)">
            <summary>
            Remove a shape from the collection.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="P:Common.Geometry.Collections.IStaticShapeCollection2f`1.Count">
            <summary>
            The number of shapes in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2f`1.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does a shape contain point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2f`1.Containing(Common.Core.Numerics.Vector2f,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that contain the point and 
            add them to the list
            </summary>
            <param name="point"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2f`1.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does a shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2f`1.Intersecting(Common.Geometry.Shapes.Box2f,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that intersect the box and 
            add them to the list.
            </summary>
            <param name="box"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2f`1.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            Return the signed distance field from 
            the union of all shapes in the collection.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.IStaticShapeCollection2f`1.ToList">
            <summary>
            Return a list of all the shapes in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.IShapeCollection2f`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.IShapeCollection2f`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add the shapes to the collection.
            </summary>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.IShapeCollection2f`1.Add(`0)">
            <summary>
            Add a shape to the collection.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Common.Geometry.Collections.IShapeCollection2f`1.Remove(`0)">
            <summary>
            Remove a shape from the collection.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="T:Common.Geometry.Collections.ShapeCollection2d`1">
            <summary>
            A naive implementation of a shape collection
            where all operations are O(n2).
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection2d`1.Count">
            <summary>
            The number of shapes in the collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection2d`1.Capacity">
            <summary>
            The capacity of the shape collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection2d`1.Item(System.Int32)">
            <summary>
            Get or Set the shape at index i.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all the shapes in the enumerable to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.Add(`0)">
            <summary>
            Add a shape to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.Remove(`0)">
            <summary>
            Remove a shape from the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the collection have a shape that contains the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.Containing(Common.Core.Numerics.Vector2d,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that contain the point and 
            add them to the list
            </summary>
            <param name="point"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does a shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.Intersecting(Common.Geometry.Shapes.Box2d,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that intersect the box and 
            add them to the list.
            </summary>
            <param name="box"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            Return the signed distance field from 
            the union of all shapes in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.ToList">
            <summary>
            Create a list of all the shapes in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2d`1.GetEnumerator">
            <summary>
            Enumerate all shapes in the collection.
            </summary>
        </member>
        <member name="T:Common.Geometry.Collections.ShapeCollection2f`1">
            <summary>
            A naive implementation of a shape collection
            where all operations are O(n2).
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection2f`1.Count">
            <summary>
            The number of shapes in the collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection2f`1.Capacity">
            <summary>
            The capacity of the shape collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection2f`1.Item(System.Int32)">
            <summary>
            Get or Set the shape at index i.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all the shapes in the enumerable to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.Add(`0)">
            <summary>
            Add a shape to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.Remove(`0)">
            <summary>
            Remove a shape from the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the collection have a shape that contains the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.Containing(Common.Core.Numerics.Vector2f,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that contain the point and 
            add them to the list
            </summary>
            <param name="point"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does a shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.Intersecting(Common.Geometry.Shapes.Box2f,System.Collections.Generic.List{`0})">
            <summary>
            Find all the shapes that intersect the box and 
            add them to the list.
            </summary>
            <param name="box"></param>
            <param name="shapes"></param>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            Return the signed distance field from 
            the union of all shapes in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.ToList">
            <summary>
            Create a list of all the shapes in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection2f`1.GetEnumerator">
            <summary>
            Enumerate all shapes in the collection.
            </summary>
        </member>
        <member name="T:Common.Geometry.Collections.ShapeCollection3f`1">
            <summary>
            A naive implementation of a shape collection
            where all operations are O(n2).
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection3f`1.Count">
            <summary>
            The number of shapes in the collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection3f`1.Capacity">
            <summary>
            The capacity of the shape collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Collections.ShapeCollection3f`1.Item(System.Int32)">
            <summary>
            Get or Set the shape at index i.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection3f`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection3f`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all the shapes in the enumerable to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection3f`1.Add(`0)">
            <summary>
            Add a shape to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection3f`1.Remove(`0)">
            <summary>
            Remove a shape from the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection3f`1.Contains(Common.Core.Numerics.Vector3f)">
            <summary>
            Does the collection have a shape that contains the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection3f`1.SignedDistance(Common.Core.Numerics.Vector3f)">
            <summary>
            Return the signed distance field from 
            the union of all shapes in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection3f`1.ToList">
            <summary>
            Create a list of all the shapes in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Collections.ShapeCollection3f`1.GetEnumerator">
            <summary>
            Enumerate all shapes in the collection.
            </summary>
        </member>
        <member name="T:Common.Geometry.Nurbs.LinearSystem">
            <summary>
            Used to solve linear systems of equation.
            https://en.wikipedia.org/wiki/LU_decomposition
            </summary>
        </member>
        <member name="F:Common.Geometry.Nurbs.LinearSystem.PA">
            <summary>
            Matrix A changed so that it contains a copy of both 
            matrices L-E and U as A=(L-E)+U such that P*A=L*U.
            </summary>
        </member>
        <member name="F:Common.Geometry.Nurbs.LinearSystem.P">
            <summary>
             The permutation matrix is not stored as a matrix, 
             but in an integer vector P of size N+1 
             containing column indexes where the permutation
             matrix has "1". The last element P[N] = S + N,
             where S is the number of row exchanges needed 
             for determinant computation, det(P)=(-1)^S
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.LinearSystem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.LinearSystem.#ctor(System.Double[0:,0:])">
            <summary>
            Construct a linear system from matrix A.
            </summary>
            <param name="A">The matrix to decompose.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.LinearSystem.ToString">
            <summary>
            The description of the linear system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.LinearSystem.Decompose(System.Double[0:,0:],System.Double)">
            <summary>
            Decompose matrix A.
            </summary>
            <param name="A">Matrix A that is part of the linear system Ax.</param>
            <param name="eps">small tolerance number to detect failure 
            when the matrix is near degenerate</param>
            <returns>If the decompositon was successful.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.LinearSystem.Solve(System.Double[],System.Double[])">
            <summary>
            Solve the linear system for the input vector.
            </summary>
            <param name="b">The vector in Ax=b.</param>
            <param name="x">The solution vector of Ax=b.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.LinearSystem.SwapRows(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Swap the rows i and k in the matrix.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsBasis.FindSpan(System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Find the span of the given parameter in the knot vector.
            </summary>
            <param name="degree">Degree of the curve.</param>
            <param name="knots">Knot vector of the curve.</param>
            <param name="u">Parameter value.</param>
            <returns>Span index into the knot vector such that (span - 1) less than u less tha or equal span</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsBasis.BSplineOneBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compute a single B-spline basis function
            </summary>
            <param name="i">The ith basis function to compute.</param>
            <param name="deg">Degree of the basis function.</param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <returns>The value of the ith basis function at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsBasis.BSplineBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compute all non-zero B-spline basis functions
            </summary>
            <param name="deg">Degree of the basis function.</param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <returns>N Values of (deg+1) non-zero basis functions.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsBasis.BSplineDerBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Compute all non-zero derivatives of B-spline basis functions
            </summary>
            <param name="deg">Degree of the basis function.</param>
            <param name="span">Index obtained from findSpan() corresponding the u and knots.</param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <param name="num_ders">Number of derivatives to compute (num_ders less tha or equal deg)</param>
            <returns>Values of non-zero derivatives of basis functions.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.KnotMultiplicity(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns the mulitplicity of the knot at index
            </summary>
            <param name="knots">Knot vector</param>
            <param name="index">index Index of knot of interest</param>
            <returns>Multiplicity (>= 1)</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.CurveIsValid(Common.Geometry.Nurbs.NurbsCurve2d)">
            <summary>
            Returns whether the curve is valid
            </summary>
            <param name="crv">Curve object</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.CurveIsValid(Common.Geometry.Nurbs.NurbsCurve3d)">
            <summary>
            Returns whether the curve is valid
            </summary>
            <param name="crv">Curve object</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.SurfaceIsValid(Common.Geometry.Nurbs.NurbsSurface3d)">
            <summary>
            Returns whether the surface is valid
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.CurveIsClosed(Common.Geometry.Nurbs.NurbsCurve2d)">
            <summary>
            Checks whether the curve is closed
            </summary>
            <param name="crv">Curve object</param>
            <returns>Whether closed</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.CurveIsClosed(Common.Geometry.Nurbs.NurbsCurve3d)">
            <summary>
            Checks whether the curve is closed
            </summary>
            <param name="crv">Curve object</param>
            <returns>Whether closed</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.SurfaceIsClosedU(Common.Geometry.Nurbs.NurbsSurface3d)">
            <summary>
            Checks whether the surface is closed along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether closed along u-direction</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.SurfaceIsClosedV(Common.Geometry.Nurbs.NurbsSurface3d)">
            <summary>
            Checks whether the surface is closed along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether closed along v-direction</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.IsValidRelation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the relation between degree, number of knots, and
            number of control points is valid
            </summary>
            <param name="degree">The degree</param>
            <param name="num_knots">Number of knot values</param>
            <param name="num_ctrl_pts">Number of control points</param>
            <returns>Whether the relationship is valid</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.IsKnotVectorMonotonic(System.Collections.Generic.IList{System.Double})">
            <summary>
            Whether the knots are in ascending order
            </summary>
            <param name="knots">Knot vector</param>
            <returns>Whether monotonic</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.CurveIsValid(System.Int32,System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns whether the curve is valid
            </summary>
            <param name="degree">Degree of curve</param>
            <param name="knots">Knot vector of curve</param>
            <param name="numControlPoints">The number of control points.</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.SurfaceIsValid(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Returns whether the surface is valid
            </summary>
            <param name="degree_u">Degree of surface along u-direction</param>
            <param name="degree_v">Degree of surface along v-direction</param>
            <param name="knots_u">Knot vector of surface along u-direction</param>
            <param name="knots_v">Knot vector of surface along v-direction</param>
            <param name="controlPointsLen0">The number of control point in first dimension.</param>
            <param name="controlPointsLen1">The number of control point in second dimension.</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.IsKnotVectorClosed(System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <param name="degree">Degree of curve/surface</param>
            <param name="knots">Knot vector of curve/surface</param>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.IsArray1Closed(System.Int32,System.Collections.Generic.IList{Common.Core.Numerics.Vector3d})">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <param name="degree">Degree of curve/surface</param>
            <param name="vec">Array of any control points</param>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.IsArray1Closed(System.Int32,System.Collections.Generic.IList{Common.Core.Numerics.Vector4d})">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <param name="degree">Degree of curve/surface</param>
            <param name="vec">Array of any control points</param>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.IsArray2ClosedU(System.Int32,Common.Core.Numerics.Vector4d[0:,0:])">
            <summary>
            Returns whether the 2D array is closed along the u-direction
            i.e., along rows.
            </summary>
            <param name="degree_u">Degree along u-direction</param>
            <param name="arr">2D array of control points / weights</param>
            <returns>Whether closed along u-direction</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCheck.IsArray2ClosedV(System.Int32,Common.Core.Numerics.Vector4d[0:,0:])">
            <summary>
            Returns whether the 2D array is closed along the v-direction
            i.e., along columns.
            </summary>
            <param name="degree_v">Degree along v-direction</param>
            <param name="arr">2D array of control points / weights</param>
            <returns>Whether closed along v-direction</returns>
        </member>
        <member name="T:Common.Geometry.Nurbs.NurbsCurve2d">
            <summary>
            Class for holding a polynomial B-spline curve
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector3d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points in cartesian coordinates.</param>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve2d.IsRational">
            <summary>
            Is this a rational curve.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve2d.Degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve2d.Knots">
            <summary>
            The curves knots.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve2d.ControlCount">
            <summary>
            The number of control points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve2d.ControlPoints">
            <summary>
            The curves control points in homogenous coordinates.
            The w coordinate stores the weight.
            If the curve is not rational then this is 1 by default.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve2d.IsValid">
            <summary>
            Is this a valid curve.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve2d.IsClosed">
            <summary>
            Is this a closed curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.GetControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.GetControlPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector2d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.SetControlPoint(System.Int32,Common.Core.Numerics.Vector2d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.Point(System.Double)">
            <summary>
            Get the point at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The point at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.Tangent(System.Double)">
            <summary>
            Get the tangent at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The tangent at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.GetPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector2d},System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.GetPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector2d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="start">The parameter to start sampling.</param>
            <param name="end">The parameter to end sampling.</param>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.GetTangents(System.Collections.Generic.List{Common.Core.Numerics.Vector2d},System.Int32)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="tangents">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.EstimateLength(System.Int32)">
            <summary>
            Estimate the length of the curve.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <returns>The estimated length.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.NormalizeKnots">
            <summary>
            Normlize the curves knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.InsertKnot(Common.Geometry.Nurbs.NurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the curve and return as a new curve.
            </summary>
            <param name="crv">The curve to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new curve with the inserted knots.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve2d.Split(Common.Geometry.Nurbs.NurbsCurve2d,System.Double)">
            <summary>
            Split the curve a the parameter and return the two new curves.
            </summary>
            <param name="crv">The curve to split.</param>
            <param name="u">The parameter to split the curve at</param>
            <returns>The two new curves.</returns>
        </member>
        <member name="T:Common.Geometry.Nurbs.RationalNurbsCurve2d">
            <summary>
            Class for holding a rational B-spline curve
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve2d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector2d},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points.</param>
            <param name="weights">The curves weights.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector3d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points in homogenous coordinates 
            with the weight as the w coordinate.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve2d.SetControlPoint(System.Int32,Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
            <param name="weight">The control points weight.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve2d.InsertKnot(Common.Geometry.Nurbs.RationalNurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the curve and return as a new curve.
            </summary>
            <param name="crv">The curve to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new curve with the inserted knots.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve2d.Split(Common.Geometry.Nurbs.RationalNurbsCurve2d,System.Double)">
            <summary>
            Split the curve a the parameter and return the two new curves.
            </summary>
            <param name="crv">The curve to split.</param>
            <param name="u">The parameter to split the curve at</param>
            <returns>The two new curves.</returns>
        </member>
        <member name="T:Common.Geometry.Nurbs.NurbsCurve3d">
            <summary>
            Class for holding a polynomial B-spline curve
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector3d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector4d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points in cartesian coordinates.</param>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve3d.IsRational">
            <summary>
            Is this a rational curve.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve3d.Degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve3d.Knots">
            <summary>
            The curves knots.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve3d.ControlCount">
            <summary>
            The number of control points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve3d.ControlPoints">
            <summary>
            The curves control points in homogenous coordinates.
            The w coordinate stores the weight.
            If the curve is not rational then this is 1 by default.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve3d.IsValid">
            <summary>
            Is this a valid curve.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsCurve3d.IsClosed">
            <summary>
            Is this a closed curve.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.GetControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.GetControlPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector3d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.SetControlPoint(System.Int32,Common.Core.Numerics.Vector3d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.Point(System.Double)">
            <summary>
            Get the point at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The point at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.Tangent(System.Double)">
            <summary>
            Get the tangent at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The tangent at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.GetPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector3d},System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.GetPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector3d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="start">The parameter to start sampling.</param>
            <param name="end">The parameter to end sampling.</param>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.GetTangents(System.Collections.Generic.List{Common.Core.Numerics.Vector3d},System.Int32)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="tangents">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.EstimateLength(System.Int32)">
            <summary>
            Estimate the length of the curve.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <returns>The estimated length.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.NormalizeKnots">
            <summary>
            Normlize the curves knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.InsertKnot(Common.Geometry.Nurbs.NurbsCurve3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the curve and return as a new curve.
            </summary>
            <param name="crv">The curve to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new curve with the inserted knots.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsCurve3d.Split(Common.Geometry.Nurbs.NurbsCurve3d,System.Double)">
            <summary>
            Split the curve a the parameter and return the two new curves.
            </summary>
            <param name="crv">The curve to split.</param>
            <param name="u">The parameter to split the curve at</param>
            <returns>The two new curves.</returns>
        </member>
        <member name="T:Common.Geometry.Nurbs.RationalNurbsCurve3d">
            <summary>
            Class for holding a rational B-spline curve
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve3d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector3d},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points.</param>
            <param name="weights">The curves weights.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve3d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector4d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points in homogenous coordinates 
            with the weight as the w coordinate.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve3d.SetControlPoint(System.Int32,Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
            <param name="weight">The control points weight.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve3d.InsertKnot(Common.Geometry.Nurbs.RationalNurbsCurve3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the curve and return as a new curve.
            </summary>
            <param name="crv">The curve to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new curve with the inserted knots.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsCurve3d.Split(Common.Geometry.Nurbs.RationalNurbsCurve3d,System.Double)">
            <summary>
            Split the curve a the parameter and return the two new curves.
            </summary>
            <param name="crv">The curve to split.</param>
            <param name="u">The parameter to split the curve at</param>
            <returns>The two new curves.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurvePoint(Common.Geometry.Nurbs.NurbsCurve2d,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to evaluate the curve at.</param>
            <returns>Resulting point on the curve at parameter u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurvePoint(Common.Geometry.Nurbs.NurbsCurve3d,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to evaluate the curve at.</param>
            <returns>Resulting point on the curve at parameter u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurveDerivatives(Common.Geometry.Nurbs.NurbsCurve2d,System.Int32,System.Double)">
            <summary>
            Evaluate derivatives of a non-rational NURBS curve
            E.g. curve_ders[n] is the nth derivative at u, where 0 less than n less than or equal num_ders.
            </summary>
            <param name="crv">Curve object</param>
            <param name="num_ders">Number of times to derivate.</param>
            <param name="u">Parameter to evaluate the derivatives at.</param>
            <returns>Derivatives of the curve at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurveDerivatives(Common.Geometry.Nurbs.NurbsCurve3d,System.Int32,System.Double)">
            <summary>
            Evaluate derivatives of a non-rational NURBS curve
            E.g. curve_ders[n] is the nth derivative at u, where 0 less or equal than n less than or equal num_ders.
            </summary>
            <param name="crv">Curve object</param>
            <param name="num_ders">Number of times to derivate.</param>
            <param name="u">Parameter to evaluate the derivatives at.</param>
            <returns>Derivatives of the curve at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurveTangent(Common.Geometry.Nurbs.NurbsCurve2d,System.Double)">
            <summary>
            Evaluate the tangent of a B-spline curve
            </summary>
            <param name="crv">Curve object</param>
            <returns>Unit tangent of the curve at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurveTangent(Common.Geometry.Nurbs.NurbsCurve3d,System.Double)">
            <summary>
            Evaluate the tangent of a B-spline curve
            </summary>
            <param name="crv">Curve object</param>
            <returns>Unit tangent of the curve at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.SurfacePoint(Common.Geometry.Nurbs.NurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS surface
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Resulting point on the surface at (u, v).</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.SurfaceDerivatives(Common.Geometry.Nurbs.NurbsSurface3d,System.Int32,System.Double,System.Double)">
            <summary>
            Evaluate derivatives on a non-rational NURBS surface
            </summary>
            <param name="srf">Surface object</param>
            <param name="num_ders">Number of times to differentiate</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Derivatives of the surface at (u, v).</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.SurfaceTangent(Common.Geometry.Nurbs.NurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate the two orthogonal tangents of a non-rational surface at the given
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter in the u-direction</param>
            <param name="v">Parameter in the v-direction</param>
            <returns>Tuple with unit tangents along u- and v-directions</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.SurfaceNormal(Common.Geometry.Nurbs.NurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate the normal a non-rational surface at the given parameters
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter in the u-direction</param>
            <param name="v">Parameter in the v-direction</param>
            <returns>Unit normal at of the surface at (u, v)</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurvePoint(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector3d},System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS curve
            </summary>
            <param name="degree">Degree of the given curve.</param>
            <param name="knots">Knot vector of the curve.</param>
            <param name="control_points">Control points of the curve.</param>
            <param name="u">Parameter to evaluate the curve at.</param>
            <returns>Resulting point on the curve at parameter u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurvePoint(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector4d},System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS curve
            </summary>
            <param name="degree">Degree of the given curve.</param>
            <param name="knots">Knot vector of the curve.</param>
            <param name="control_points">Control points of the curve.</param>
            <param name="u">Parameter to evaluate the curve at.</param>
            <returns>Resulting point on the curve at parameter u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurveDerivatives(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector3d},System.Int32,System.Double)">
            <summary>
            Evaluate derivatives of a non-rational NURBS curve
            </summary>
            <param name="degree">Degree of the curve</param>
            <param name="knots">Knot vector of the curve.</param>
            <param name="control_points">Control points of the curve.</param>
            <param name="num_ders">Number of times to derivate.</param>
            <param name="u">Parameter to evaluate the derivatives at.</param>
            <returns>Derivatives of the curve at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.CurveDerivatives(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector4d},System.Int32,System.Double)">
            <summary>
            Evaluate derivatives of a non-rational NURBS curve
            </summary>
            <param name="degree">Degree of the curve</param>
            <param name="knots">Knot vector of the curve.</param>
            <param name="control_points">Control points of the curve.</param>
            <param name="num_ders">Number of times to derivate.</param>
            <param name="u">Parameter to evaluate the derivatives at.</param>
            <returns>Derivatives of the curve at u.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.SurfacePoint(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Common.Core.Numerics.Vector4d[0:,0:],System.Double,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS surface
            </summary>
            <param name="degree_u">Degree of the given surface in u-direction.</param>
            <param name="degree_v">Degree of the given surface in v-direction.</param>
            <param name="knots_u">Knot vector of the surface in u-direction.</param>
            <param name="knots_v">Knot vector of the surface in v-direction.</param>
            <param name="control_points">Control points of the surface in a 2d array.</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Resulting point on the surface at (u, v).</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsEval.SurfaceDerivatives(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Common.Core.Numerics.Vector4d[0:,0:],System.Int32,System.Double,System.Double)">
            <summary>
            Evaluate derivatives on a non-rational NURBS surface
            </summary>
            <param name="degree_u">Degree of the given surface in u-direction.</param>
            <param name="degree_v">Degree of the given surface in v-direction.</param>
            <param name="knots_u">Knot vector of the surface in u-direction.</param>
            <param name="knots_v">Knot vector of the surface in v-direction.</param>
            <param name="control_points">Control points of the surface in a 2d array.</param>
            <param name="num_ders">Number of times to differentiate.</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Derivatives of the surface at (u, v).</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.FromPoints(System.Int32,System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            0) build knot vector for curve by normalized chord length
            1) construct effective basis function in square matrix
            2) construct set of coordinattes to interpolate vector
            3) set of control points
            4) solve in all 3 dimensions
            </summary>
            <param name="degree">The degree of the curve.</param>
            <param name="points">The points to interp curve from.</param>
            <returns>A curve that passes through all the points.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.FromPoints(System.Int32,System.Collections.Generic.IList{Common.Core.Numerics.Vector3d})">
            <summary>
            0) build knot vector for curve by normalized chord length
            1) construct effective basis function in square matrix
            2) construct set of coordinattes to interpolate vector
            3) set of control points
            4) solve in all 3 dimensions
            </summary>
            <param name="degree">The degree of the curve.</param>
            <param name="points">The points to interp curve from.</param>
            <returns>A curve that passes through all the points.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.BezierCurve(System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Create a bezier curve from the control points.
            </summary>
            <param name="controlPoints">Points in counter-clockwise form.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.BezierCurve(System.Collections.Generic.IList{Common.Core.Numerics.Vector3d})">
            <summary>
            Create a bezier curve from the control points.
            </summary>
            <param name="controlPoints">Points in counter-clockwise form.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.RationalBezierCurve(System.Collections.Generic.IList{Common.Core.Numerics.Vector2d},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a rational bezier curve from the control points and weights.
            </summary>
            <param name="controlPoints">Points in counter-clockwise form.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.RationalBezierCurve(System.Collections.Generic.IList{Common.Core.Numerics.Vector3d},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a rational bezier curve from the control points and weights.
            </summary>
            <param name="controlPoints">Points in counter-clockwise form.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.Circle(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Create an Circle.
            </summary>
            <param name="center"></param>
            <param name="radius">the radius</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.Circle(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Create an Circle.
            </summary>
            <param name="center"></param>
            <param name="radius">the radius</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.Arc(Common.Core.Numerics.Vector2d,System.Double,System.Double,System.Double)">
            <summary>
            Create an Arc.
            </summary>
            <param name="center"></param>
            <param name="radius">the radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.Arc(Common.Core.Numerics.Vector3d,System.Double,System.Double,System.Double)">
            <summary>
            Create an Arc.
            </summary>
            <param name="center"></param>
            <param name="radius">the radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.Ellipse(Common.Core.Numerics.Vector2d,System.Double,System.Double)">
            <summary>
            Create an Ellipse.
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.Ellipse(Common.Core.Numerics.Vector3d,System.Double,System.Double)">
            <summary>
            Create an Ellipse.
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.EllipseArc(Common.Core.Numerics.Vector2d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an EllipseArc.
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.EllipseArc(Common.Core.Numerics.Vector3d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an EllipseArc.
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.EllipseArc(Common.Core.Numerics.Vector2d,System.Double,System.Double,System.Double,System.Double,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Generate the control points, weights, and knots of an elliptical arc.
            (Corresponds to Algorithm A7.1 from Piegl and Tiller)
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
            <param name="xaxis">the x axis</param>
            <param name="yaxis">the y axis</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.EllipseArc(Common.Core.Numerics.Vector3d,System.Double,System.Double,System.Double,System.Double,Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Generate the control points, weights, and knots of an elliptical arc.
            (Corresponds to Algorithm A7.1 from Piegl and Tiller)
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
            <param name="xaxis">the x axis</param>
            <param name="yaxis">the y axis</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.IntersectRays(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Geometry.Nurbs.NurbsMake.CurveCurveIntersection@)">
            <summary>
            Find the closest parameter on two rays, see http://geomalgorithms.com/a07-_distance.html
            </summary>
            <param name="a0">origin for ray 1</param>
            <param name="a">direction of ray 1, assumed normalized</param>
            <param name="b0">origin for ray 2</param>
            <param name="b">direction of ray 2, assumed normalized</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsMake.IntersectRays(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,Common.Geometry.Nurbs.NurbsMake.CurveCurveIntersection@)">
            <summary>
            Find the closest parameter on two rays, see http://geomalgorithms.com/a07-_distance.html
            </summary>
            <param name="a0">origin for ray 1</param>
            <param name="a">direction of ray 1, assumed normalized</param>
            <param name="b0">origin for ray 2</param>
            <param name="b">direction of ray 2, assumed normalized</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.CurveKnotInsert(Common.Geometry.Nurbs.NurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert knots in the curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to insert knot at</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New curve with repeat knots inserted at u</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.CurveKnotInsert(Common.Geometry.Nurbs.NurbsCurve3d,System.Double,System.Int32)">
            <summary>
            Insert knots in the curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to insert knot at</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New curve with repeat knots inserted at u</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.SurfaceKnotInsertU(Common.Geometry.Nurbs.NurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert knots in the surface along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Knot value to insert</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New Surface object after knot insertion</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.SurfaceKnotInsertV(Common.Geometry.Nurbs.NurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert knots in the surface along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="v">Knot value to insert</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New Surface object after knot insertion</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.CurveSplit(Common.Geometry.Nurbs.NurbsCurve2d,System.Double)">
            <summary>
            Split a curve into two
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to split at</param>
            <returns>Tuple with first half and second half of the curve</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.CurveSplit(Common.Geometry.Nurbs.NurbsCurve3d,System.Double)">
            <summary>
            Split a curve into two
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to split at</param>
            <returns>Tuple with first half and second half of the curve</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.SurfaceSplitU(Common.Geometry.Nurbs.NurbsSurface3d,System.Double)">
            <summary>
            Split a surface into two along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter along u-direction to split the surface</param>
            <returns>Tuple with first and second half of the surfaces</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.SurfaceSplitV(Common.Geometry.Nurbs.NurbsSurface3d,System.Double)">
            <summary>
            Split a surface into two along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="v">Parameter along v-direction to split the surface</param>
            <returns>Tuple with first and second half of the surfaces</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.CurveKnotInsert(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector3d},System.Double,System.Int32,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{Common.Core.Numerics.Vector3d}@)">
            <summary>
             Insert knots in the curve
            </summary>
            <param name="deg">Degree of the curve</param>
            <param name="knots">Knot vector of the curve</param>
            <param name="cp">Control points of the curve</param>
            <param name="u">Parameter to insert knot(s) at</param>
            <param name="r">Number of times to insert knot</param>
            <param name="new_knots">Updated knot vector</param>
            <param name="new_cp">Updated control pointss</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.CurveKnotInsert(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector4d},System.Double,System.Int32,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{Common.Core.Numerics.Vector4d}@)">
            <summary>
             Insert knots in the curve
            </summary>
            <param name="deg">Degree of the curve</param>
            <param name="knots">Knot vector of the curve</param>
            <param name="cp">Control points of the curve</param>
            <param name="u">Parameter to insert knot(s) at</param>
            <param name="r">Number of times to insert knot</param>
            <param name="new_knots">Updated knot vector</param>
            <param name="new_cp">Updated control pointss</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.SurfaceKnotInsert(System.Int32,System.Collections.Generic.IList{System.Double},Common.Core.Numerics.Vector4d[0:,0:],System.Double,System.Int32,System.Boolean,System.Collections.Generic.List{System.Double}@,Common.Core.Numerics.Vector4d[0:,0:]@)">
            <summary>
            Insert knots in the surface along one direction
            </summary>
            <param name="degree">Degree of the surface along which to insert knot</param>
            <param name="knots">Knot vector</param>
            <param name="cp">2D array of control points</param>
            <param name="knot">Knot value to insert</param>
            <param name="r">Number of times to insert</param>
            <param name="along_u">Whether inserting along u-direction</param>
            <param name="new_knots">Updated knot vector</param>
            <param name="new_cp">Updated control points</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.CurveSplit(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector3d},System.Double,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{Common.Core.Numerics.Vector3d}@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{Common.Core.Numerics.Vector3d}@)">
            <summary>
            Split the curve into two
            </summary>
            <param name="degree"></param>
            <param name="knots"></param>
            <param name="control_points"></param>
            <param name="u"></param>
            <param name="left_knots"></param>
            <param name="left_control_points"></param>
            <param name="right_knots"></param>
            <param name="right_control_points"></param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.CurveSplit(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{Common.Core.Numerics.Vector4d},System.Double,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{Common.Core.Numerics.Vector4d}@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{Common.Core.Numerics.Vector4d}@)">
            <summary>
            Split the curve into two
            </summary>
            <param name="degree"></param>
            <param name="knots"></param>
            <param name="control_points"></param>
            <param name="u"></param>
            <param name="left_knots"></param>
            <param name="left_control_points"></param>
            <param name="right_knots"></param>
            <param name="right_control_points"></param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsModify.SurfaceSplit(System.Int32,System.Collections.Generic.IList{System.Double},Common.Core.Numerics.Vector4d[0:,0:],System.Double,System.Boolean,System.Collections.Generic.List{System.Double}@,Common.Core.Numerics.Vector4d[0:,0:]@,System.Collections.Generic.List{System.Double}@,Common.Core.Numerics.Vector4d[0:,0:]@)">
            <summary>
            
            </summary>
            <param name="degree">Degree of surface along given direction</param>
            <param name="knots">Knot vector of surface along given direction</param>
            <param name="control_points">Array of control points</param>
            <param name="u">Parameter to split curve</param>
            <param name="along_u">Whether the direction to split along is the u-direction</param>
            <param name="left_knots">Knots of the left part of the curve</param>
            <param name="left_control_points">Control points of the left part of the curve</param>
            <param name="right_knots">Knots of the right part of the curve</param>
            <param name="right_control_points">Control points of the right part of the curve</param>
        </member>
        <member name="T:Common.Geometry.Nurbs.NurbsSurface3d">
            <summary>
            Class for representing a non-rational NURBS surface
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Common.Core.Numerics.Vector3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Common.Core.Numerics.Vector4d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsSurface3d.IsRational">
            <summary>
            Is the surface rational.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsSurface3d.DegreeU">
            <summary>
            The degree on the first dimension.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsSurface3d.DegreeV">
            <summary>
            The degree on the second dimension.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsSurface3d.KnotsU">
            <summary>
            The knots on the first dimension.
            </summary>
        </member>
        <member name="P:Common.Geometry.Nurbs.NurbsSurface3d.KnotsV">
            <summary>
            The knots on the second dimension.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.GetControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.GetControlPoints(System.Collections.Generic.List{Common.Core.Numerics.Vector3d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.SetControlPoint(System.Int32,System.Int32,Common.Core.Numerics.Vector3d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.Point(System.Double,System.Double)">
            <summary>
            Get the point at parameter u,v.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The point at u,v.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.Tangent(System.Double,System.Double)">
            <summary>
            Get the tangent at parameter u,v.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The tanget at u,v.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.Normal(System.Double,System.Double)">
            <summary>
            Get the normal at parameter u,v.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The normal at u,v.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.NormalizeKnotsU">
            <summary>
            Normlize the surfaces u knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.NormalizeKnotsV">
            <summary>
            Normlize the surfaces v knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.InsertKnotU(Common.Geometry.Nurbs.NurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the surface and return as a new surface.
            </summary>
            <param name="srf">The surface to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new surface with the inserted knots.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.InsertKnotV(Common.Geometry.Nurbs.NurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the surface and return as a new surface.
            </summary>
            <param name="srf">The surface to insert the knot into.</param>
            <param name="v">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new surface with the inserted knots.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.SplitU(Common.Geometry.Nurbs.NurbsSurface3d,System.Double)">
            <summary>
            Split the surface a the parameter and return the two new surfaces.
            </summary>
            <param name="srf">The surface to split.</param>
            <param name="u">The parameter to split the surface at</param>
            <returns>The two new surfaces.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsSurface3d.SplitV(Common.Geometry.Nurbs.NurbsSurface3d,System.Double)">
            <summary>
            Split the surface a the parameter and return the two new surfaces.
            </summary>
            <param name="srf">The surface to split.</param>
            <param name="v">The parameter to split the surface at</param>
            <returns>The two new surfaces.</returns>
        </member>
        <member name="T:Common.Geometry.Nurbs.RationalNurbsSurface3d">
            <summary>
            Class for representing a non-rational NURBS surface
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsSurface3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Common.Core.Numerics.Vector3d[0:,0:],System.Double[0:,0:])">
            <summary>
            Ceate a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
            <param name="weights">The weights.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},Common.Core.Numerics.Vector4d[0:,0:])">
            <summary>
            Ceate a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in homogenous coordinates.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsSurface3d.SetControlPoint(System.Int32,System.Int32,Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
            <param name="weight">The control points weight.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsSurface3d.InsertKnotU(Common.Geometry.Nurbs.RationalNurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the surface and return as a new surface.
            </summary>
            <param name="srf">The surface to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new surface with the inserted knots.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsSurface3d.InsertKnotV(Common.Geometry.Nurbs.RationalNurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the surface and return as a new surface.
            </summary>
            <param name="srf">The surface to insert the knot into.</param>
            <param name="v">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new surface with the inserted knots.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsSurface3d.SplitU(Common.Geometry.Nurbs.RationalNurbsSurface3d,System.Double)">
            <summary>
            Split the surface a the parameter and return the two new surfaces.
            </summary>
            <param name="srf">The surface to split.</param>
            <param name="u">The parameter to split the surface at</param>
            <returns>The two new surfaces.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.RationalNurbsSurface3d.SplitV(Common.Geometry.Nurbs.RationalNurbsSurface3d,System.Double)">
            <summary>
            Split the surface a the parameter and return the two new surfaces.
            </summary>
            <param name="srf">The surface to split.</param>
            <param name="v">The parameter to split the surface at</param>
            <returns>The two new surfaces.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsTess.GetPoints(Common.Geometry.Nurbs.NurbsCurve2d,System.Collections.Generic.List{Common.Core.Numerics.Vector2d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsTess.GetPoints(Common.Geometry.Nurbs.NurbsCurve3d,System.Collections.Generic.List{Common.Core.Numerics.Vector3d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsTess.GetTangents(Common.Geometry.Nurbs.NurbsCurve2d,System.Collections.Generic.List{Common.Core.Numerics.Vector2d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="tangents">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsTess.GetTangents(Common.Geometry.Nurbs.NurbsCurve3d,System.Collections.Generic.List{Common.Core.Numerics.Vector3d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="tangents">The list of sampled points.</param>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsTess.EstimateLength(Common.Geometry.Nurbs.NurbsCurve2d,System.Double,System.Double,System.Int32)">
            <summary>
            Estimate the length of the curve.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <returns>The curves estmated length.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsTess.EstimateLength(Common.Geometry.Nurbs.NurbsCurve3d,System.Double,System.Double,System.Int32)">
            <summary>
            Estimate the length of the curve.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <returns>The curves estmated length.</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsUtil.HomogenousToCartesian(Common.Core.Numerics.Vector3d)">
            <summary>
            Convert an nd point in homogenous coordinates to an (n-1)d point in cartesian
            coordinates by perspective division
            </summary>
            <param name="pt">Point in homogenous coordinates</param>
            <returns>Point in cartesian coordinates</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsUtil.HomogenousToCartesian(Common.Core.Numerics.Vector4d)">
            <summary>
            Convert an nd point in homogenous coordinates to an (n-1)d point in cartesian
            coordinates by perspective division
            </summary>
            <param name="pt">Point in homogenous coordinates</param>
            <returns>Point in cartesian coordinates</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsUtil.CartesianToHomogenous(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Convert an nd point in cartesian coordinates to an (n+1)d point in homogenous coordinates
            </summary>
            <param name="pt">Point in cartesian coordinates</param>
            <param name="w">Weight</param>
            <returns>point in homogenous coordinates</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsUtil.CartesianToHomogenous(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Convert an nd point in cartesian coordinates to an (n+1)d point in homogenous coordinates
            </summary>
            <param name="pt">Point in cartesian coordinates</param>
            <param name="w">Weight</param>
            <returns>point in homogenous coordinates</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsUtil.TruncateHomogenous(Common.Core.Numerics.Vector3d)">
            <summary>
            Convert an (n+1)d point to an nd point without perspective division
            by truncating the last dimension
            </summary>
            <param name="pt">Point in homogenous coordinates</param>
            <returns>Input point in cartesian coordinates</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsUtil.TruncateHomogenous(Common.Core.Numerics.Vector4d)">
            <summary>
            Convert an (n+1)d point to an nd point without perspective division
            by truncating the last dimension
            </summary>
            <param name="pt">Point in homogenous coordinates</param>
            <returns>Input point in cartesian coordinates</returns>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsUtil.Binomial(System.Int32,System.Int32)">
            <summary>
            Compute the binomial coefficient
            </summary>
        </member>
        <member name="M:Common.Geometry.Nurbs.NurbsUtil.MapToRange(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Map numbers from one interval to another
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.KdTree2f`1">
            <summary>
            A 2f KdTree using T as the point.
            Does not support points with the same coordinates.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTree2f`1.Count">
            <summary>
            The number of points in the tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTree2f`1.Depth">
            <summary>
            The max depth of the tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTree2f`1.Bounds">
            <summary>
            The bounding box of the trees points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTree2f`1.Root">
            <summary>
            The root node of the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.Clear">
            <summary>
            Clear the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.Build(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Build the tree from a set of points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.Search(Common.Geometry.Shapes.Circle2f,System.Collections.Generic.List{`0})">
            <summary>
            Return all points contained in the search region.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.Closest(`0)">
            <summary>
            Find the nearest point to input point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.CalculateSegments(System.Collections.Generic.List{Common.Geometry.Shapes.Segment2f},System.Boolean)">
            <summary>
            Create a indexed list of the segments that make up the 
            bounds of the lines of the tree.
            </summary>
            <param name="addBounds">should the bounding box be added</param>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.ToList">
            <summary>
            Copy the tree into a list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.GetEnumerator">
            <summary>
            Gets an enumerator for the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.Build(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Iteratively builds the tree from a set of points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.Search(Common.Geometry.Points.KdTreeNode2f{`0},Common.Geometry.Shapes.Circle2f,Common.Geometry.Shapes.Box2f,System.Collections.Generic.List{`0})">
            <summary>
            Iteratively searchs the tree for points 
            contained in the search region.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.Closest(Common.Geometry.Points.KdTreeNode2f{`0},`0,`0@,System.Single@)">
            <summary>
            Iteratively searchs the tree for the nearest point to input.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.CopyTo(Common.Geometry.Points.KdTreeNode2f{`0},System.Collections.Generic.List{`0})">
            <summary>
            Iteratively adds the points into the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.CalculateSegments(Common.Geometry.Points.KdTreeNode2f{`0},Common.Geometry.Points.KdTreeNode2f{`0},Common.Geometry.Shapes.Box2f,System.Collections.Generic.List{Common.Geometry.Shapes.Segment2f})">
            <summary>
            Iteratively calculates the segements made from 
            the intersecting lines.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree2f`1.MaxDepth(Common.Geometry.Points.KdTreeNode2f{`0})">
            <summary>
            Find the max depth of tree.
            </summary>
        </member>
        <member name="F:Common.Geometry.Points.KdTree2f`1.m_compareX">
            <summary>
            Comparer points on the x axis.
            </summary>
        </member>
        <member name="F:Common.Geometry.Points.KdTree2f`1.m_compareY">
            <summary>
            Comparer points on the y axis.
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.KdTree3f`1">
            <summary>
            A 3f KdTree using T as the point.
            Does not support points with the same coordinates.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTree3f`1.Count">
            <summary>
            The number of points in the tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTree3f`1.Depth">
            <summary>
            The max depth of the tree.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTree3f`1.Bounds">
            <summary>
            The bounding box of the trees points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTree3f`1.Root">
            <summary>
            The root node of the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.Clear">
            <summary>
            Clear the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.Build(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Build the tree from a set of points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.Search(Common.Geometry.Shapes.Sphere3f,System.Collections.Generic.List{`0})">
            <summary>
            Return all points contained in the search region.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.Closest(`0)">
            <summary>
            Find the nearest point to input point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.CalculateBoxes(System.Collections.Generic.List{Common.Geometry.Shapes.Box3f})">
            <summary>
            
            </summary>
            <param name="boxes"></param>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.ToList">
            <summary>
            Copy the tree into a list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.GetEnumerator">
            <summary>
            Gets an enumerator for the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.Build(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Iteratively builds the tree from a set of points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.Search(Common.Geometry.Points.KdTreeNode3f{`0},Common.Geometry.Shapes.Sphere3f,Common.Geometry.Shapes.Box3f,System.Collections.Generic.List{`0})">
            <summary>
            Iteratively searchs the tree for points contained
            in the search region.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.Closest(Common.Geometry.Points.KdTreeNode3f{`0},`0,`0@,System.Single@)">
            <summary>
            Iteratively searchs the tree for the nearest point to input.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.CopyTo(Common.Geometry.Points.KdTreeNode3f{`0},System.Collections.Generic.List{`0})">
            <summary>
            Iteratively adds the points into the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.CalculateBoxes(Common.Geometry.Points.KdTreeNode3f{`0},Common.Geometry.Shapes.Box3f,System.Collections.Generic.List{Common.Geometry.Shapes.Box3f})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTree3f`1.MaxDepth(Common.Geometry.Points.KdTreeNode3f{`0})">
            <summary>
            Find the max depth of tree.
            </summary>
        </member>
        <member name="F:Common.Geometry.Points.KdTree3f`1.m_compareX">
            <summary>
            Comparer points on the x axis.
            </summary>
        </member>
        <member name="F:Common.Geometry.Points.KdTree3f`1.m_compareY">
            <summary>
            Comparer points on the y axis.
            </summary>
        </member>
        <member name="F:Common.Geometry.Points.KdTree3f`1.m_compareZ">
            <summary>
            Comparer points on the y axis.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTreeNode2f`1.Depth">
            <summary>
            The depth of this node in the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTreeNode2f`1.GetEnumerator">
            <summary>
            Enumerate all points from this node.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.KdTreeNode3f`1.Depth">
            <summary>
            The depth of this node in the tree.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.KdTreeNode3f`1.GetEnumerator">
            <summary>
            Enumerate all points from this node.
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.IPoint2f">
            <summary>
            Interface for point in 2D space.
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.PointOps2f`1">
            <summary>
            Generic helper class for common point operations.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Common.Geometry.Points.PointOps2f`1.Distance(`0,`0)">
            <summary>
            The distance between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointOps2f`1.SqrDistance(`0,`0)">
            <summary>
            The square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointOps2f`1.Contains(Common.Geometry.Shapes.Circle2f,`0)">
            <summary>
            Does the circle contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointOps2f`1.Contains(Common.Geometry.Shapes.Box2f,`0)">
            <summary>
            Does the box contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.#ctor(System.Single,System.Single)">
            <summary>
            A point from the variables.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Addition(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Addition(Common.Geometry.Points.Point2f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Addition(System.Single,Common.Geometry.Points.Point2f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_UnaryNegation(Common.Geometry.Points.Point2f)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Subtraction(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Subtraction(Common.Geometry.Points.Point2f,System.Single)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Subtraction(System.Single,Common.Geometry.Points.Point2f)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Multiply(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Multiply(Common.Geometry.Points.Point2f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Multiply(System.Single,Common.Geometry.Points.Point2f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Division(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Division(Common.Geometry.Points.Point2f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Equality(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.op_Inequality(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Equals(Common.Geometry.Points.Point2f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.GetHashCode">
            <summary>
            Points hash code. 
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.CompareTo(Common.Geometry.Points.Point2f)">
            <summary>
            Compare two points by axis.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.ToString">
            <summary>
            Point as a string.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.ToString(System.String)">
            <summary>
            Point as a string.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Distance(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.SqrDistance(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Min(Common.Geometry.Points.Point2f,System.Single)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Min(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Max(Common.Geometry.Points.Point2f,System.Single)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Max(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Clamp(Common.Geometry.Points.Point2f,System.Single,System.Single)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Clamp(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Lerp(Common.Geometry.Points.Point2f,Common.Geometry.Points.Point2f,System.Single)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Points.Point2f.ToVector2f">
            <summary>
            Convert to vector.
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.PointOps3f`1">
            <summary>
            Generic helper class for common point operations.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Common.Geometry.Points.PointOps3f`1.Distance(`0,`0)">
            <summary>
            The distance between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointOps3f`1.SqrDistance(`0,`0)">
            <summary>
            The square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointOps3f`1.Contains(Common.Geometry.Shapes.Sphere3f,`0)">
            <summary>
            Does the circle contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointOps3f`1.Contains(Common.Geometry.Shapes.Box3f,`0)">
            <summary>
            Does the box contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.#ctor(System.Single)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Addition(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Addition(Common.Geometry.Points.Point3f,System.Single)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Addition(System.Single,Common.Geometry.Points.Point3f)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_UnaryNegation(Common.Geometry.Points.Point3f)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Subtraction(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Subtraction(Common.Geometry.Points.Point3f,System.Single)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Subtraction(System.Single,Common.Geometry.Points.Point3f)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Multiply(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Multiply(Common.Geometry.Points.Point3f,System.Single)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Multiply(System.Single,Common.Geometry.Points.Point3f)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Division(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Division(Common.Geometry.Points.Point3f,System.Single)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Equality(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.op_Inequality(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Equals(Common.Geometry.Points.Point3f)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.GetHashCode">
            <summary>
            Points hash code. 
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.CompareTo(Common.Geometry.Points.Point3f)">
            <summary>
            Compare two points by axis.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.ToString">
            <summary>
            Point as a string.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.ToString(System.String)">
            <summary>
            Point as a string.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Distance(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.SqrDistance(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Min(Common.Geometry.Points.Point3f,System.Single)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Min(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Max(Common.Geometry.Points.Point3f,System.Single)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Max(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Clamp(Common.Geometry.Points.Point3f,System.Single,System.Single)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Clamp(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Lerp(Common.Geometry.Points.Point3f,Common.Geometry.Points.Point3f,System.Single)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Points.Point3f.ToVector3f">
            <summary>
            Convert to vector.
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.PointCollection2f`1">
            <summary>
            A naive implementation of a point collection
            where all operations are O(n2).
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointCollection2f`1.Count">
            <summary>
            The number of points in the collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointCollection2f`1.Capacity">
            <summary>
            The capacity of the collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointCollection2f`1.Item(System.Int32)">
            <summary>
            Get or Set the point at index i.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection2f`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection2f`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all the points in the enumerable to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection2f`1.Add(`0)">
            <summary>
            Add a point to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection2f`1.Remove(`0)">
            <summary>
            Remove point from collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection2f`1.Search(Common.Geometry.Shapes.Circle2f,System.Collections.Generic.List{`0})">
            <summary>
            Fill the points list with all points in the 
            collection contained within the region.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection2f`1.Closest(`0)">
            <summary>
            Return the closest point in collect to this point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection2f`1.ToList">
            <summary>
            Create a list from all points in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection2f`1.GetEnumerator">
            <summary>
            Enumerate all points in the collection.
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.PointCollection3f`1">
            <summary>
            A naive implementation of a point collection
            where all operations are O(n2).
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointCollection3f`1.Count">
            <summary>
            The number of points in the collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointCollection3f`1.Capacity">
            <summary>
            The capacity of the collection.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointCollection3f`1.Item(System.Int32)">
            <summary>
            Get or Set the point at index i.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection3f`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection3f`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all the points in the enumerable to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection3f`1.Add(`0)">
            <summary>
            Add a point to the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection3f`1.Remove(`0)">
            <summary>
            Remove point from collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection3f`1.Search(Common.Geometry.Shapes.Sphere3f,System.Collections.Generic.List{`0})">
            <summary>
            Fill the points list with all points in the 
            collection contained within the region.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection3f`1.Closest(`0)">
            <summary>
            Return the closest point in collect to this point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection3f`1.ToList">
            <summary>
            Create a list from all points in the collection.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointCollection3f`1.GetEnumerator">
            <summary>
            Enumerate all points in the collection.
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.PointGrid2f`1">
            <summary>
            A point collection seperated into spatial grids
            confined to a bounding box.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid2f`1.Count">
            <summary>
            The number of points in the grid.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid2f`1.GridSize">
            <summary>
            The number of cells in grid on each axis.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid2f`1.Bounds">
            <summary>
            The are the grid bounds;
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid2f`1.CellSize">
            <summary>
            The size of the cells in the grid.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid2f`1.InvCellSize">
            <summary>
            The inverse size of the cells in the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.ToString">
            <summary>
            The grids as a string.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.Clear">
            <summary>
            Remove all points from the grid.
            Retains any allocated lists.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a enumeration of points to the grid.
            Returns false if any of the points was 
            outside the grid bounds.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.Add(`0)">
            <summary>
            Add a point to the grid.
            Retruns false if point out of
            the grid bounds and will not be added.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.Remove(`0)">
            <summary>
            Remove a point from the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.ToList">
            <summary>
            Return a list of all points in the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.Search(Common.Geometry.Shapes.Circle2f,System.Collections.Generic.List{`0})">
            <summary>
            Return a list of all points found 
            within the search region.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.Closest(`0)">
            <summary>
            Returns the closest point in the grid.
            Grid will only search within a points nearest neighbour cells
            so this will fail if closest point not in that region.
            In this case returned point will be zero.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.Closest(`0,`0@)">
            <summary>
            Returns the closest point in the grid.
            Grid will only search within a points nearest neighbour cells
            and will return false if no point is located in this range.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.GetEnumerator">
            <summary>
            Enumerate the points in the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate the points in the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.ToCellSpace(`0)">
            <summary>
            Returns the points cell space position.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.ToCellSpace(Common.Geometry.Shapes.Box2f)">
            <summary>
            Returns the boxes cell space position.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid2f`1.GetGridCell(Common.Core.Numerics.Vector2i,System.Boolean)">
            <summary>
            Returns the cells point list at this index.
            If create is true a new empty list will be 
            added to the grid and returned.
            </summary>
        </member>
        <member name="T:Common.Geometry.Points.PointGrid3f`1">
            <summary>
            A point collection seperated into spatial grids
            confined to a bounding box.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid3f`1.Count">
            <summary>
            The number of points in the grid.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid3f`1.GridSize">
            <summary>
            The number of cells in grid on each axis.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid3f`1.Bounds">
            <summary>
            The are the grid bounds;
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid3f`1.CellSize">
            <summary>
            The size of the cells in the grid.
            </summary>
        </member>
        <member name="P:Common.Geometry.Points.PointGrid3f`1.InvCellSize">
            <summary>
            The inverse size of the cells in the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.ToString">
            <summary>
            The grids as a string.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.Clear">
            <summary>
            Remove all points from the grid.
            Retains any allocated lists.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a enumeration of points to the grid.
            Returns false if any of the points was 
            outside the grid bounds.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.Add(`0)">
            <summary>
            Add a point to the grid.
            Retruns false if point out of
            the grid bounds and will not be added.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.Remove(`0)">
            <summary>
            Remove a point from the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.ToList">
            <summary>
            Return a list of all points in the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.Search(Common.Geometry.Shapes.Sphere3f,System.Collections.Generic.List{`0})">
            <summary>
            Return a list of all points found 
            within the search region.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.Closest(`0)">
            <summary>
            Returns the closest point in the grid.
            Grid will only search within a points nearest neighbour cells
            so this will fail if closest point not in that region.
            In this case returned point will be zero.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.Closest(`0,`0@)">
            <summary>
            Returns the closest point in the grid.
            Grid will only search within a points nearest neighbour cells
            and will return false if no point is located in this range.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.GetEnumerator">
            <summary>
            Enumerate the points in the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate the points in the grid.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.ToCellSpace(`0)">
            <summary>
            Returns the points cell space position.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.ToCellSpace(Common.Geometry.Shapes.Box3f)">
            <summary>
            Returns the boxes cell space position.
            </summary>
        </member>
        <member name="M:Common.Geometry.Points.PointGrid3f`1.GetGridCell(Common.Core.Numerics.Vector3i,System.Boolean)">
            <summary>
            Returns the cells point list at this index.
            If create is true a new empty list will be 
            added to the grid and returned.
            </summary>
        </member>
        <member name="T:Common.Geometry.Polygons.Polygon2d">
            <summary>
            A simple polygon with no holes.
            Maybe CCW or CW.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.#ctor(System.Int32)">
            <summary>
            Create a polygon.
            </summary>
            <param name="count">The number of points in polygon.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.#ctor(System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Create a polygon.
            </summary>
            <param name="positions">The polygons positions.</param>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2d.SignedArea">
            <summary>
            The signed area of the polygon.
            CCW polygons have a positive area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2d.Area">
            <summary>
            The polygons area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2d.Centroid">
            <summary>
            The polygons centroid.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2d.IsCW">
            <summary>
            Is the polygon points ordered clockwise.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2d.IsCCW">
            <summary>
            Is the polygon points ordered counter clockwise.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2d.IsDegenerate">
            <summary>
            Are the polygon points degenerate.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.GetPosition(System.Int32)">
            <summary>
            Get the position with a circular index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.GetParam(System.Int32)">
            <summary>
            Get the param with a circular index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.GetLength(System.Int32)">
            <summary>
            Get the length with a circular index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.CreateIndices">
            <summary>
            Create the index array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.Reverse">
            <summary>
            Will reverse the polygon.
            A CCW polygon will be come a CW polygon.
            No need to recalculate.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.Copy">
            <summary>
            Copy the polygon.
            No need to recalculate the copy.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.Calculate">
            <summary>
            Update the polygons properties.
            Should be called when polygon
            created or changes. 
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.CalculateCentroid">
            <summary>
            The centroid of the polygon.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.CalculateArea">
            <summary>
            The polygons area.
            https://en.wikipedia.org/wiki/Shoelace_formula
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.CalculateLengths">
            <summary>
            Create the lengths array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the polygon contain the point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            The sigined distance from the polygon to the point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.FromTriangle(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Create a triangle polygon from the 3 points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.FromBox(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Create a box polygon from the 4 points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2d.FromCircle(Common.Core.Numerics.Vector2d,System.Double,System.Int32)">
            <summary>
            Create a circle polygon.
            </summary>
        </member>
        <member name="T:Common.Geometry.Polygons.Polygon2f">
            <summary>
            A simple polygon with no holes.
            Maybe CCW or CW.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.#ctor(System.Int32)">
            <summary>
            Create a polygon.
            </summary>
            <param name="count">The number of points in polygon.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.#ctor(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Create a polygon.
            </summary>
            <param name="positions">The polygons positions.</param>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2f.SignedArea">
            <summary>
            The signed area of the polygon.
            CCW polygons have a positive area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2f.Area">
            <summary>
            The polygons area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2f.Centroid">
            <summary>
            The polygons centroid.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2f.IsCW">
            <summary>
            Is the polygon points ordered clockwise.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2f.IsCCW">
            <summary>
            Is the polygon points ordered counter clockwise.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polygon2f.IsDegenerate">
            <summary>
            Are the polygon points degenerate.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.GetPosition(System.Int32)">
            <summary>
            Get the position with a circular index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.GetParam(System.Int32)">
            <summary>
            Get the param with a circular index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.GetLength(System.Int32)">
            <summary>
            Get the length with a circular index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.CreateIndices">
            <summary>
            Create the index array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.Reverse">
            <summary>
            Will reverse the polygon.
            A CCW polygon will be come a CW polygon.
            No need to recalculate.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.Copy">
            <summary>
            Copy the polygon.
            No need to recalculate the copy.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.Calculate">
            <summary>
            Update the polygons properties.
            Should be called when polygon
            created or changes. 
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.CalculateCentroid">
            <summary>
            The centroid of the polygon.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.CalculateArea">
            <summary>
            The polygons area.
            https://en.wikipedia.org/wiki/Shoelace_formula
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.CalculateLengths">
            <summary>
            Create the lengths array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the polygon contain the point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            The sigined distance from the polygon to the point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.FromTriangle(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Create a triangle polygon from the 3 points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.FromBox(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Create a box polygon from the 4 points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polygon2f.FromCircle(Common.Core.Numerics.Vector2f,System.Single,System.Int32)">
            <summary>
            Create a circle polygon.
            </summary>
        </member>
        <member name="T:Common.Geometry.Polygons.Polyline2d">
            <summary>
            A line made from connected segments.
            Segment have width and are treated as capsules.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.#ctor(System.Double,System.Int32)">
            <summary>
            Create a polyline.
            </summary>
            <param name="width">The lines width.</param>
            <param name="count">The number points in the line.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.#ctor(System.Double,System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Create a polyline.
            </summary>
            <param name="width">The lines width.</param>
            <param name="positions">The lines positions.</param>
        </member>
        <member name="P:Common.Geometry.Polygons.Polyline2d.Width">
            <summary>
            The width of the line.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polyline2d.Radius">
            <summary>
            The radius of the line segments capsules.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.GetPosition(System.Int32)">
            <summary>
            Get the position with a clamped index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.GetParam(System.Int32)">
            <summary>
            Get the param with a clamped index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.GetLength(System.Int32)">
            <summary>
            Get the length with a clamped index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.CreateIndices">
            <summary>
            Create the index array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.Reverse">
            <summary>
            Will reverse the polyline.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.Copy">
            <summary>
            Copy the polyline.
            No need to recalculate the copy.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.Calculate">
            <summary>
            Update the polylines properties.
            Should be called when polyline
            created or changes. 
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.CalculateLengths">
            <summary>
            Calculate the total length of the line
            and the length of each segment in line.
            Lengths represents the length of line 
            up to that point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the line contain the point.
            The line has some thickness from its width.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.Closest(Common.Core.Numerics.Vector2d)">
            <summary>
            Find the closest point on the line
            to the other point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the line intersect with the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            The signed distance from the line to the point.
            </summary>
        </member>
        <member name="T:Common.Geometry.Polygons.Polyline2f">
            <summary>
            A line made from connected segments.
            Segment have width and are treated as capsules.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.#ctor(System.Single,System.Int32)">
            <summary>
            Create a polyline.
            </summary>
            <param name="width">The lines width.</param>
            <param name="count">The number points in the line.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.#ctor(System.Single,System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Create a polyline.
            </summary>
            <param name="width">The lines width.</param>
            <param name="positions">The lines positions.</param>
        </member>
        <member name="P:Common.Geometry.Polygons.Polyline2f.Width">
            <summary>
            The width of the line.
            </summary>
        </member>
        <member name="P:Common.Geometry.Polygons.Polyline2f.Radius">
            <summary>
            The radius of the line segments capsules.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.GetPosition(System.Int32)">
            <summary>
            Get the position with a clamped index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.GetParam(System.Int32)">
            <summary>
            Get the param with a clamped index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.GetLength(System.Int32)">
            <summary>
            Get the length with a clamped index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.CreateIndices">
            <summary>
            Create the index array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.Reverse">
            <summary>
            Will reverse the polyline.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.Copy">
            <summary>
            Copy the polyline.
            No need to recalculate the copy.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.Calculate">
            <summary>
            Update the polylines properties.
            Should be called when polyline
            created or changes. 
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.CalculateLengths">
            <summary>
            Calculate the total length of the line
            and the length of each segment in line.
            Lengths represents the length of line 
            up to that point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the line contain the point.
            The line has some thickness from its width.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            Find the closest point on the line
            to the other point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the line intersect with the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyline2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            The signed distance from the line to the point.
            </summary>
        </member>
        <member name="T:Common.Geometry.Polygons.Polyobject2d">
            <summary>
            Base class for polygon and polyline.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.GetPosition(System.Double)">
            <summary>
            Get the position with a interpolated index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.GetLength(System.Double)">
            <summary>
            Get the length with a interpolated index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.GetParam(System.Double)">
            <summary>
            Get the param with a interpolated index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.CreatePositions(System.Int32)">
            <summary>
            Creates the position array.
            </summary>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.SetPositions(System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Create the position array.
            </summary>
            <param name="positions">Array to copy from.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.CreateParams">
            <summary>
            Create the param array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.SetParams(System.Collections.Generic.IList{System.Double})">
            <summary>
            Create the param array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.CreateLengths(System.Int32)">
            <summary>
            Create the length array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.SetLengths(System.Collections.Generic.IList{System.Double})">
            <summary>
            Create the lengths array.
            </summary>
            <param name="lengths">Array to copy from.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.CreateIndices(System.Int32)">
            <summary>
            Create the indices array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.CalculateBounds">
            <summary>
            Find the shapes bounding box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.CalculateLengths">
            <summary>
            Create the lengths array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.Reverse">
            <summary>
            Will reverse the polyshape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.CreateIndices">
            <summary>
            Create the index array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the shape contain the points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            The signed distance to the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.Interpolate(System.Double,System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Given the number normalized interpolate 
            along the object to find the value in the array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.Interpolate(System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Given the number normalized interpolate 
            along the object to find the value in the array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.Translate(Common.Core.Numerics.Vector2d)">
            <summary>
            Translate the positions.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.Scale(Common.Core.Numerics.Vector2d)">
            <summary>
            Scale the positions.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.Transform(Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Transform the positions.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.Transform(Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Transform the positions.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2d.FindInterpolationPoint(System.Double,System.Int32@,System.Double@)">
            <summary>
            Given the normalized number find this length on the 
            object and return the index before this point and the 
            distance from this point to the next.
            </summary>
            <param name="t">The normalized param representing length between first and last point.</param>
            <param name="idx">The index of the point.</param>
            <param name="s">The normalized param representing length between idx and idx+1.</param>
        </member>
        <member name="T:Common.Geometry.Polygons.Polyobject2f">
            <summary>
            Base class for polygon and polyline.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.GetPosition(System.Single)">
            <summary>
            Get the position with a interpolated index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.GetLength(System.Single)">
            <summary>
            Get the length with a interpolated index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.GetParam(System.Single)">
            <summary>
            Get the param with a interpolated index.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.CreatePositions(System.Int32)">
            <summary>
            Creates the position array.
            </summary>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.SetPositions(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Create the position array.
            </summary>
            <param name="positions">Array to copy from.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.CreateParams">
            <summary>
            Create the param array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.SetParams(System.Collections.Generic.IList{System.Single})">
            <summary>
            Create the param array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.CreateLengths(System.Int32)">
            <summary>
            Create the length array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.SetLengths(System.Collections.Generic.IList{System.Single})">
            <summary>
            Create the lengths array.
            </summary>
            <param name="lengths">Array to copy from.</param>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.CreateIndices(System.Int32)">
            <summary>
            Create the indices array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.CalculateBounds">
            <summary>
            Find the shapes bounding box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.CalculateLengths">
            <summary>
            Create the lengths array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.Reverse">
            <summary>
            Will reverse the polyshape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.CreateIndices">
            <summary>
            Create the index array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the shape contain the points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            The signed distance to the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.Interpolate(System.Single,System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Given the number normalized interpolate 
            along the object to find the value in the array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.Interpolate(System.Single,System.Collections.Generic.IList{System.Single})">
            <summary>
            Given the number normalized interpolate 
            along the object to find the value in the array.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.Translate(Common.Core.Numerics.Vector2f)">
            <summary>
            Translate the positions.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.Scale(Common.Core.Numerics.Vector2f)">
            <summary>
            Scale the positions.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.Transform(Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Transform the positions.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.Transform(Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Transform the positions.
            </summary>
        </member>
        <member name="M:Common.Geometry.Polygons.Polyobject2f.FindInterpolationPoint(System.Single,System.Int32@,System.Single@)">
            <summary>
            Given the normalized number find this length on the 
            object and return the index before this point and the 
            distance from this point to the next.
            </summary>
            <param name="t">The normalized param representing length between first and last point.</param>
            <param name="idx">The index of the point.</param>
            <param name="s">The normalized param representing length between idx and idx+1.</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2d.Enlarge(Common.Geometry.Shapes.Box2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2d.Enlarge(Common.Geometry.Shapes.Box2d,Common.Geometry.Shapes.Box2d)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2d.Expand(Common.Geometry.Shapes.Box2d,System.Double)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2d.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2d.Contains(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the box contain the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the box contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2d.Closest(Common.Core.Numerics.Vector2d)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2f.Enlarge(Common.Geometry.Shapes.Box2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2f.Enlarge(Common.Geometry.Shapes.Box2f,Common.Geometry.Shapes.Box2f)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2f.Expand(Common.Geometry.Shapes.Box2d,System.Single)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2f.Contains(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the box contain the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the box contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2i.Enlarge(Common.Geometry.Shapes.Box2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2i.Enlarge(Common.Geometry.Shapes.Box2i,Common.Geometry.Shapes.Box2i)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2i.Expand(Common.Geometry.Shapes.Box2i,System.Int32)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2i.Intersects(Common.Geometry.Shapes.Box2i)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2i.Contains(Common.Geometry.Shapes.Box2i)">
            <summary>
            Does the box contain the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2i.Contains(Common.Core.Numerics.Vector2i)">
            <summary>
            Does the box contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box2i.Closest(Common.Core.Numerics.Vector2i)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3d.Enlarge(Common.Geometry.Shapes.Box3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3d.Enlarge(Common.Geometry.Shapes.Box3d,Common.Geometry.Shapes.Box3d)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3d.Expand(Common.Geometry.Shapes.Box3d,System.Double)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3d.Intersects(Common.Geometry.Shapes.Box3d)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3d.Contains(Common.Geometry.Shapes.Box3d)">
            <summary>
            Does the box contain the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3d.Contains(Common.Core.Numerics.Vector3d)">
            <summary>
            Returns true if this bounding box contains the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3d.Closest(Common.Core.Numerics.Vector3d)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3d.SignedDistance(Common.Core.Numerics.Vector3d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3f.Enlarge(Common.Geometry.Shapes.Box3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3f.Enlarge(Common.Geometry.Shapes.Box3f,Common.Geometry.Shapes.Box3f)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3f.Expand(Common.Geometry.Shapes.Box3f,System.Single)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3f.Intersects(Common.Geometry.Shapes.Box3f)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3f.Contains(Common.Geometry.Shapes.Box3f)">
            <summary>
            Does the box contain the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3f.Contains(Common.Core.Numerics.Vector3f)">
            <summary>
            Returns true if this bounding box contains the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3f.Closest(Common.Core.Numerics.Vector3f)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3f.SignedDistance(Common.Core.Numerics.Vector3f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside box field is positive.
            If point is inside box field is negative.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3i.Enlarge(Common.Geometry.Shapes.Box3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Returns the bounding box containing this box and the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3i.Enlarge(Common.Geometry.Shapes.Box3i,Common.Geometry.Shapes.Box3i)">
            <summary>
            Returns the bounding box containing this box and the given box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3i.Expand(Common.Geometry.Shapes.Box3i,System.Int32)">
            <summary>
            Return a new box expanded by the amount.
            </summary>
            <param name="box">The box to expand.</param>
            <param name="amount">The amount to expand.</param>
            <returns>The expanded box.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3i.Intersects(Common.Geometry.Shapes.Box3i)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3i.Contains(Common.Geometry.Shapes.Box3i)">
            <summary>
            Does the box contain the other box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3i.Contains(Common.Core.Numerics.Vector3i)">
            <summary>
            Returns true if this bounding box contains the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Box3i.Closest(Common.Core.Numerics.Vector3i)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2d.Center">
            <summary>
            The center position of the capsule.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2d.Radius2">
            <summary>
            The capsules squared radius at the end points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2d.Diameter">
            <summary>
            The capsules diameter at the end points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2d.Segment">
            <summary>
            The segment made from the capsules two points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2d.Bounds">
            <summary>
            The capsules bounding box.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2d.Item(System.Int32)">
            <summary>
            Access point a or b by index.
            </summary>
            <param name="i">A index of 0 or 1.</param>
            <returns>The point at index i.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.op_Implicit(Common.Geometry.Shapes.Capsule2f)~Common.Geometry.Shapes.Capsule2d">
            <summary>
            Cast the capsule.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.op_Equality(Common.Geometry.Shapes.Capsule2d,Common.Geometry.Shapes.Capsule2d)">
            <summary>
            Are these two capsules equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.op_Inequality(Common.Geometry.Shapes.Capsule2d,Common.Geometry.Shapes.Capsule2d)">
            <summary>
            Are these two capsules not equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.Equals(System.Object)">
            <summary>
            Are these two capsules equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.Equals(Common.Geometry.Shapes.Capsule2d)">
            <summary>
            Are these two capsules equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.GetHashCode">
            <summary>
            The capsules hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.ToString">
            <summary>
            The capsules description.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the capsule contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.Closest(Common.Core.Numerics.Vector2d)">
            <summary>
            Find the closest point to the capsule
            If point inside capsule return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the capsule intersect with the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.Intersects(Common.Geometry.Shapes.Capsule2d)">
            <summary>
            Does the capsule intersect with the capsule.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            The signed distance to the point.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2f.Center">
            <summary>
            The center position of the capsule.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2f.Radius2">
            <summary>
            The capsules squared radius at the end points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2f.Diameter">
            <summary>
            The capsules diameter at the end points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2f.Segment">
            <summary>
            The segment made from the capsules two points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2f.Bounds">
            <summary>
            The capsules bounding box.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Capsule2f.Item(System.Int32)">
            <summary>
            Access point a or b by index.
            </summary>
            <param name="i">A index of 0 or 1.</param>
            <returns>The point at index i.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.op_Explicit(Common.Geometry.Shapes.Capsule2d)~Common.Geometry.Shapes.Capsule2f">
            <summary>
            Cast the capsule.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.op_Equality(Common.Geometry.Shapes.Capsule2f,Common.Geometry.Shapes.Capsule2f)">
            <summary>
            Are these two capsules equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.op_Inequality(Common.Geometry.Shapes.Capsule2f,Common.Geometry.Shapes.Capsule2f)">
            <summary>
            Are these two capsules not equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.Equals(System.Object)">
            <summary>
            Are these two capsules equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.Equals(Common.Geometry.Shapes.Capsule2f)">
            <summary>
            Are these two capsules equal.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.GetHashCode">
            <summary>
            The capsules hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.ToString">
            <summary>
            The capsules description.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the capsule contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            Find the closest point to the capsule
            If point inside capsule return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the capsule intersect with the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.Intersects(Common.Geometry.Shapes.Capsule2f)">
            <summary>
            Does the capsule intersect with the capsule.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Capsule2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            The signed distance to the point.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2d.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2d.Diameter">
            <summary>
            The circles diameter.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2d.Area">
            <summary>
            The circles area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2d.Circumference">
            <summary>
            the circles circumference.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2d.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.Closest(Common.Core.Numerics.Vector2d)">
            <summary>
            Find the closest point to the circle.
            If point inside circle return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            Return the signed distance to the point. 
            If point is outside circle field is positive.
            If point is inside circle field is negative.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the circle contain the point.
            </summary>
            <param name="p">The point</param>
            <returns>true if circle contains point</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.Contains(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the circle fully contain the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.Intersects(Common.Geometry.Shapes.Circle2d)">
            <summary>
            Does this circle intersect with the other circle.
            </summary>
            <param name="circle">The other circle</param>
            <returns>True if the circles intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the circle intersect the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.Enlarge(Common.Geometry.Shapes.Circle2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Enlarge the circle so it contains the point p.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.InCircle(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Returns true if the point d is inside the circle defined by the points a, b, c.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.CircumCircle(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Creates a circle that has both points on its circumference.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.CircumCircle(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Creates a circle that has all 3 points on its circumference.
            From MathWorld: http://mathworld.wolfram.com/Circumcircle.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.CalculateBounds(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Creates a circle that contains all three point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Calculate the bounding circle that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2d.ExtremePoints(System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2f.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2f.Diameter">
            <summary>
            The circles diameter.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2f.Area">
            <summary>
            The circles area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2f.Circumference">
            <summary>
            the circles circumference.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Circle2f.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            Find the closest point to the circle.
            If point inside circle return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside circle field is positive.
            If point is inside circle field is negative.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the circle contain the point.
            </summary>
            <param name="p">The point</param>
            <returns>true if circle contains point</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.Contains(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the circle fully contain the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.Intersects(Common.Geometry.Shapes.Circle2f)">
            <summary>
            Does this circle intersect with the other circle.
            </summary>
            <param name="circle">The other circle</param>
            <returns>True if the circles intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the circle intersect the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.Enlarge(Common.Geometry.Shapes.Circle2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Enlarge the circle so it contains the point p.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.InCircle(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Returns true if the point d is inside the circle defined by the points a, b, c.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.CircumCircle(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Creates a circle that has both points on its circumference.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.CircumCircle(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Creates a circle that has all 3 points on its circumference.
            From MathWorld: http://mathworld.wolfram.com/Circumcircle.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.CalculateBounds(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Creates a circle that contains all three point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Calculate the bounding circle that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Circle2f.ExtremePoints(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="T:Common.Geometry.Shapes.HalfPlane2f">
            <summary>
            Represents a halfplane by means of the boundary line
            ax + by = c, where one accepts that
            for the halfplane ax + by + c less tha or equal 0 holds.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.HalfPlane2f.#ctor(Common.Geometry.Shapes.Line2f,System.Boolean)">
            <summary>
            Initializes a halfplane by its boundary line
            and by the side where the halfplane lies.
            </summary>
            <param name="line">The boundary line</param>
            <param name="rightSide">rightSide true, if the 
            halfplanes lies on the right side of the line, 
            false otherwise</param>
        </member>
        <member name="P:Common.Geometry.Shapes.HalfPlane2f.IsLeftBoundary">
            <summary>
            Determines whether the boundary line
            lies on the left side of the halfplane.
            </summary>
            <return>if the boundary line is on the left, flase otherwise</return>
        </member>
        <member name="P:Common.Geometry.Shapes.HalfPlane2f.IsRightBoundary">
            <summary>
            Determines whether the boundary line
            lies on the right side of the halfplane.
            </summary>
            <return>if the boundary line is on the right, flase otherwise</return>
        </member>
        <member name="M:Common.Geometry.Shapes.HalfPlane2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Determines whether the point lies in the halfplane.
            </summary>
            <param name="p"></param>
            <returns>if the point lies in the left halfplane, false otherwise</returns>
        </member>
        <member name="T:Common.Geometry.Shapes.Line2d">
            <summary>
             Represents a line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
             Create a new line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
            <param name="a">The constant in ax.</param>
            <param name="b">The constant in by</param>
            <param name="c">The constant c</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.#ctor(System.Double,System.Double)">
            <summary>
             Create a new line from the slope and the y 
             intercept, where y = mx + b holds.
            </summary>
            <param name="m">The lines slope.</param>
            <param name="b">The y intercept.</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.#ctor(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Create a new line that passes through the two points.
            </summary>
            <param name="p1">Point 1.</param>
            <param name="p2">Point 2.</param>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2d.Slope">
            <summary>
            Find the slope of the line.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2d.IsAscending">
            <summary>
            Determines whether the line is ascending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (0, pi/2).
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2d.IsVertical">
            <summary>
            Determines whether the line is vertical
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi/2.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2d.IsDescending">
            <summary>
            Determines whether the line is descending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (pi/2, pi).
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2d.IsHorizontal">
            <summary>
            Determines whether the line is horizontal
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2d.IsUndefined">
            <summary>
            Determines whether the line is undefined
            (e.g.two equal points were passed to the constructor).
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2d.Angle">
            <summary>
            Calculates the angle that the line makes
            with the positive direction of the X axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.X(System.Double)">
            <summary>
            Calculates the X coordinate of a point on the line by its Y coordinate.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.Y(System.Double)">
            <summary>
            Calculates the Y coordinate of a point on the line by its X coordinate.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.PointOnLine(Common.Core.Numerics.Vector2d)">
            <summary>
            Determines whether the point lies on the line.
            </summary>
            <param name="p"></param>
            <returns>if the point lies on the line</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.PerpendicularLine(Common.Core.Numerics.Vector2d)">
            <summary>
            Calculates the perpendicular line that
            passes through the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.IsLeftPoint(Common.Core.Numerics.Vector2d)">
            <summary>
            Determines whether the point lies
            on the left side of the line.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.IsRightPoint(Common.Core.Numerics.Vector2d)">
            <summary>
            Determines whether the point lies
            on the right side of the line.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.AreEquivalent(Common.Geometry.Shapes.Line2d)">
            <summary>
            Determine if the two lines are the equivalent
            even though they may have a different equation.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2d.Intersects(Common.Geometry.Shapes.Line2d,Common.Core.Numerics.Vector2d@)">
            <summary>
            Calculates the intersection of two lines.
            </summary>
            <param name="line">the other line</param>
            <param name="p">intersection point</param>
            <returns>if lines intersect</returns>
        </member>
        <member name="T:Common.Geometry.Shapes.Line2f">
            <summary>
             Represents a line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
             Create a new line from three coefficients
             a, b and c, where ax + by + c = 0 holds.
            </summary>
            <param name="a">The constant in ax.</param>
            <param name="b">The constant in by</param>
            <param name="c">The constant c</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.#ctor(System.Single,System.Single)">
            <summary>
             Create a new line from the slope and the y 
             intercept, where y = mx + b holds.
            </summary>
            <param name="m">The lines slope.</param>
            <param name="b">The y intercept.</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.#ctor(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Create a new line that passes through the two points.
            </summary>
            <param name="p1">Point 1.</param>
            <param name="p2">Point 2.</param>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2f.Slope">
            <summary>
            Find the slope of the line.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2f.IsAscending">
            <summary>
            Determines whether the line is ascending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (0, pi/2).
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2f.IsVertical">
            <summary>
            Determines whether the line is vertical
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi/2.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2f.IsDescending">
            <summary>
            Determines whether the line is descending
            (that is, makes an angle with the positive
            direction of the X axis that lies in (pi/2, pi).
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2f.IsHorizontal">
            <summary>
            Determines whether the line is horizontal
            (that is, makes an angle with the positive
            direction of the X axis that is equal to pi.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2f.IsUndefined">
            <summary>
            Determines whether the line is undefined
            (e.g.two equal points were passed to the constructor).
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Line2f.Angle">
            <summary>
            Calculates the angle that the line makes
            with the positive direction of the X axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.X(System.Single)">
            <summary>
            Calculates the X coordinate of a point on the line by its Y coordinate.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.Y(System.Single)">
            <summary>
            Calculates the Y coordinate of a point on the line by its X coordinate.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.PointOnLine(Common.Core.Numerics.Vector2f)">
            <summary>
            Determines whether the point lies on the line.
            </summary>
            <param name="p"></param>
            <returns>if the point lies on the line</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.PerpendicularLine(Common.Core.Numerics.Vector2f)">
            <summary>
            Calculates the perpendicular line that
            passes through the given point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.IsLeftPoint(Common.Core.Numerics.Vector2f)">
            <summary>
            Determines whether the point lies
            on the left side of the line.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.IsRightPoint(Common.Core.Numerics.Vector2f)">
            <summary>
            Determines whether the point lies
            on the right side of the line.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.AreEquivalent(Common.Geometry.Shapes.Line2f)">
            <summary>
            Determine if the two lines are the equivalent
            even though they may have a different equation.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Line2f.Intersects(Common.Geometry.Shapes.Line2f,Common.Core.Numerics.Vector2f@)">
            <summary>
            Calculates the intersection of two lines.
            </summary>
            <param name="line">the other line</param>
            <param name="p">intersection point</param>
            <returns>if lines intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Plane3f.#ctor(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            From three noncollinear points (ordered ccw).
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2d.GetPosition(System.Double)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2d.Intersection(Common.Geometry.Shapes.Ray2d)">
            <summary>
            Intersection point between two rays.
            Presumes there is a intersection.
            </summary>
            <param name="ray">The other ray.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2d.Intersects(Common.Geometry.Shapes.Ray2d,System.Double@,System.Double@)">
            <summary>
            Intersection between two rays.
            </summary>
            <param name="ray">The other ray</param>
            <param name="s">Intersection point = Position + s * Direction.</param>
            <param name="t">Intersection point = ray.Position + t * ray.Direction.</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2d.Intersects(Common.Geometry.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            Intersection between ray and segment.
            </summary>
            <param name="seg">the segment</param>
            <param name="s">Intersection point = Position + s * Direction</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2d.Intersects(Common.Geometry.Shapes.Circle2d,System.Double@)">
            <summary>
            Intersection between ray and circle.
            </summary>
            <param name="circle">the circle</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2d.Intersects(Common.Geometry.Shapes.Box2d,System.Double@)">
            <summary>
            Intersection between ray and box.
            </summary>
            <param name="box">the box</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2f.GetPosition(System.Single)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2f.Intersection(Common.Geometry.Shapes.Ray2f)">
            <summary>
            Intersection point between two rays.
            Presumes there is a intersection.
            </summary>
            <param name="ray">The other ray.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2f.Intersects(Common.Geometry.Shapes.Ray2f,System.Single@,System.Single@)">
            <summary>
            Intersection between two rays.
            </summary>
            <param name="ray">The other ray</param>
            <param name="s">Intersection point = Position + s * Direction.</param>
            <param name="t">Intersection point = ray.Position + t * ray.Direction.</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2f.Intersects(Common.Geometry.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            Intersection between ray and segment.
            </summary>
            <param name="seg">the segment</param>
            <param name="s">Intersection point = Position + s * Direction</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2f.Intersects(Common.Geometry.Shapes.Circle2f,System.Single@)">
            <summary>
            Intersection between ray and circle.
            </summary>
            <param name="circle">the circle</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray2f.Intersects(Common.Geometry.Shapes.Box2f,System.Single@)">
            <summary>
            Intersection between ray and box.
            </summary>
            <param name="box">the box</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Ray3f.Intersects(Common.Geometry.Shapes.Sphere3f,System.Single@)">
            <summary>
            Intersection between ray and sphere.
            </summary>
            <param name="sphere">the sphere</param>
            <param name="t">Intersection point = Position + t * Direction</param>
            <returns>If rays intersect</returns>
        </member>
        <member name="P:Common.Geometry.Shapes.Segment2d.C">
            <summary>
            Alternative names for a and b to make
            it more clear when comparing two segments 
            named ab and cd.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Contains(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Intersects(Common.Geometry.Shapes.Segment2d)">
            <summary>
            Does the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Intersects(Common.Geometry.Shapes.Segment2d,System.Double@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Intersects(Common.Geometry.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="s">Intersection point = A + s * (B - A)</param>
            <param name="t">Intersection point = seg.A + t * (seg.B - seg.A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the segment intersect this box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Closest(Common.Core.Numerics.Vector2d)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Closest(Common.Core.Numerics.Vector2d,System.Double@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Closest(Common.Geometry.Shapes.Segment2d)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2d.Closest(Common.Geometry.Shapes.Segment2d,System.Double@,System.Double@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="P:Common.Geometry.Shapes.Segment2f.C">
            <summary>
            Alternative names for a and b to make
            it more clear when comparing two segments 
            named ab and cd.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Contains(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Intersects(Common.Geometry.Shapes.Segment2f)">
            <summary>
            Does the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Intersects(Common.Geometry.Shapes.Segment2f,System.Single@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="t">Intersection point = A + t * (B - A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Intersects(Common.Geometry.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            Do the two segments intersect.
            </summary>
            <param name="seg">other segment</param>
            <param name="s">Intersection point = A + s * (B - A)</param>
            <param name="t">Intersection point = seg.A + t * (seg.B - seg.A)</param>
            <returns>If they intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the segment intersect this box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Closest(Common.Core.Numerics.Vector2f,System.Single@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Closest(Common.Geometry.Shapes.Segment2f)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment2f.Closest(Common.Geometry.Shapes.Segment2f,System.Single@,System.Single@)">
            <summary>
            The closest segment spanning two other segments.
            </summary>
            <param name="seg">the other segment</param>
            <param name="s">closest point = A + s * (B - A)</param>
            <param name="t">other closest point = seg.A + t * (seg.B - seg.A)</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment3f.Contains(Common.Core.Numerics.Vector3f)">
            <summary>
            Does the point line on the segemnts.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment3f.Intersects(Common.Geometry.Shapes.Box3f)">
            <summary>
            Does the segment intersect this box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment3f.Closest(Common.Core.Numerics.Vector3f)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment3f.Closest(Common.Core.Numerics.Vector3f,System.Single@)">
            <summary>
            The closest point on segment to point.
            </summary>
            <param name="p">point</param>
            <param name="t">closest point = A + t * (B - A)</param>
        </member>
        <member name="M:Common.Geometry.Shapes.Segment3f.SignedDistance(Common.Core.Numerics.Vector3f)">
            <summary>
            Return the signed distance to the point. 
            Always positive.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.IShape2d.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.IShape2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.IShape2d.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.IShape2d.Closest(Common.Core.Numerics.Vector2d)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.IShape2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p"></param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:Common.Geometry.Shapes.Shape2d.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Shape2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Shape2d.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Shape2d.Closest(Common.Core.Numerics.Vector2d)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Shape2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p"></param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:Common.Geometry.Shapes.IShape2f.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.IShape2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.IShape2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.IShape2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.IShape2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p"></param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:Common.Geometry.Shapes.Shape2f.Bounds">
            <summary>
            The bounding box that contains the shape.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Shape2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the shape contain the point.
            Points on the shapes surface count as 
            being contained in the shape.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Shape2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the shape intersect the box.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Shape2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            The closest point to the shape.
            If point inside shape return the same point.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Shape2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            The signed distance between the shapes surface and the point.
            </summary>
            <param name="p"></param>
            <returns>Positive if outside shape, negative if inside and 0 on boundary</returns>
        </member>
        <member name="P:Common.Geometry.Shapes.Sphere3f.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Sphere3f.Diameter">
            <summary>
            The spheres diameter.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Sphere3f.Area">
            <summary>
            The spheres area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Sphere3f.SurfaceArea">
            <summary>
            The spheres surface area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Sphere3f.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.Enlarge(Common.Core.Numerics.Vector3f)">
            <summary>
            Enlarge the sphere so it contains the point p.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.Closest(Common.Core.Numerics.Vector3f)">
            <summary>
            Find the closest point to the sphere.
            If point inside sphere return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.SignedDistance(Common.Core.Numerics.Vector3f)">
            <summary>
            Return the signed distance to the point. 
            If point is outside sphere field is positive.
            If point is inside spher field is negative.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.Contains(Common.Core.Numerics.Vector3f)">
            <summary>
            Does the sphere contain the point.
            </summary>
            <param name="p">The point</param>
            <returns>true if sphere contains point</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.Contains(Common.Geometry.Shapes.Box3f)">
            <summary>
            Does the sphere fully contain the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.Intersects(Common.Geometry.Shapes.Sphere3f)">
            <summary>
            Does this sphere intersect with the other sphere.
            </summary>
            <param name="sphere">The other sphere</param>
            <returns>True if the spheres intersect</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.Intersects(Common.Geometry.Shapes.Box3f)">
            <summary>
            Does the sphere intersect the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.CircumSphere(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Creates a sphere that has both points on its surface.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.CircumSphere(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Creates a sphere that has all 4 points on its surface.
            From MathWorld: http://mathworld.wolfram.com/Circumsphere.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.CalculateBounds(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Creates a sphere that contains all three points.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.CalculateBounds(System.Collections.Generic.IList{Common.Core.Numerics.Vector3f})">
            <summary>
            Calculate the minimum bounding sphere that contains 
            all the points in the list.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Sphere3f.ExtremePoints(System.Collections.Generic.IList{Common.Core.Numerics.Vector3f})">
            <summary>
            Finds which axis contains the two most extreme points
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.Center">
            <summary>
            The average of the triangles positions.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.IsCCW">
            <summary>
            Is the triangle orientated ccw.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.Area">
            <summary>
            The triangles area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.SignedArea">
            <summary>
            The triangles signed area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.SideLengths">
            <summary>
            The side lengths are given as
            a = sqrt((cx - bx)^2 + (cy - by)^2) -- side BC opposite of A
            b = sqrt((cx - ax)^2 + (cy - ay)^2) -- side CA opposite of B
            c = sqrt((ax - bx)^2 + (ay - by)^2) -- side AB opposite of C
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.Angles">
            <summary>
            The side lengths are given as
            ang_a = acos((b^2 + c^2 - a^2)  / (2 * b * c)) -- angle at A
            ang_b = acos((c^2 + a^2 - b^2)  / (2 * c * a)) -- angle at B
            ang_c = acos((a^2 + b^2 - c^2)  / (2 * a * b)) -- angle at C
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.SemiPerimeter">
            <summary>
            The semiperimeter is given as
            s = (a + b + c) / 2
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.InRadius">
            <summary>
            The inradius is given as
            r = D / s
            This is the radius of the largest circle that can
            fit within the triangle. Not the same as the 
            circum circles radius.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.CircumRadius">
            <summary>
            The circumradius is given as
              R = a * b * c / (4 * D)
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.CircumCircle">
            <summary>
            The circum circle formed by the 
            triangles points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.Altitudes">
            <summary>
            The altitudes are given as
              alt_a = 2 * D / a -- altitude above side a
              alt_b = 2 * D / b -- altitude above side b
              alt_c = 2 * D / c -- altitude above side c
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2d.AspectRatio">
            <summary>
            The aspect ratio may be given as the ratio of the longest to the
            shortest edge or, more commonly as the ratio of the circumradius 
            to twice the inradius
              ar = R / (2 * r)
                 = a * b * c / (8 * (s - a) * (s - b) * (s - c))
                 = a * b * c / ((b + c - a) * (c + a - b) * (a + b - c))
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2d.CrossProductArea(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The cross product area which is the 
            same as double the signed area.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2d.Barycentric(Common.Core.Numerics.Vector2d)">
            <summary>
            Return th barycentric coordinates
            with respect to p.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2d.Closest(Common.Core.Numerics.Vector2d)">
            <summary>
            Find the closest point to the triangle.
            If point inside triangle return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2d.SignedDistance(Common.Core.Numerics.Vector2d)">
            <summary>
            Returns the signed distance to surface of triangle.
            </summary>
            <returns>positive if outside triangle, negative if inside and 0 on boundary</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2d.Contains(Common.Core.Numerics.Vector2d)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2d.ContainsCCW(Common.Core.Numerics.Vector2d)">
            <summary>
            Does triangle contain point.
            Asumes triangle is CCW;
            </summary>
            <param name="p">point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2d.Intersects(Common.Geometry.Shapes.Box2d)">
            <summary>
            Does the triangle intersect this box.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.Center">
            <summary>
            The average of the triangles positions.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.IsCCW">
            <summary>
            Is the triangle orientated ccw.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.Area">
            <summary>
            The triangles area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.SignedArea">
            <summary>
            The triangles signed area.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.SideLengths">
            <summary>
            The side lengths are given as
            a = sqrt((cx - bx)^2 + (cy - by)^2) -- side BC opposite of A
            b = sqrt((cx - ax)^2 + (cy - ay)^2) -- side CA opposite of B
            c = sqrt((ax - bx)^2 + (ay - by)^2) -- side AB opposite of C
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.Angles">
            <summary>
            The side lengths are given as
            ang_a = acos((b^2 + c^2 - a^2)  / (2 * b * c)) -- angle at A
            ang_b = acos((c^2 + a^2 - b^2)  / (2 * c * a)) -- angle at B
            ang_c = acos((a^2 + b^2 - c^2)  / (2 * a * b)) -- angle at C
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.SemiPerimeter">
            <summary>
            The semiperimeter is given as
            s = (a + b + c) / 2
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.InRadius">
            <summary>
            The inradius is given as
            r = D / s
            This is the radius of the largest circle that can
            fit within the triangle. Not the same as the 
            circum circles radius.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.CircumRadius">
            <summary>
            The circumradius is given as
              R = a * b * c / (4 * D)
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.CircumCircle">
            <summary>
            The circum circle formed by the 
            triangles points.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.Altitudes">
            <summary>
            The altitudes are given as
              alt_a = 2 * D / a -- altitude above side a
              alt_b = 2 * D / b -- altitude above side b
              alt_c = 2 * D / c -- altitude above side c
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle2f.AspectRatio">
            <summary>
            The aspect ratio may be given as the ratio of the longest to the
            shortest edge or, more commonly as the ratio of the circumradius 
            to twice the inradius
              ar = R / (2 * r)
                 = a * b * c / (8 * (s - a) * (s - b) * (s - c))
                 = a * b * c / ((b + c - a) * (c + a - b) * (a + b - c))
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2f.CrossProductArea(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The cross product area which is the 
            same as double the signed area.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2f.Barycentric(Common.Core.Numerics.Vector2f)">
            <summary>
            Return th barycentric coordinates
            with respect to p.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            Find the closest point to the triangle.
            If point inside triangle return point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            Returns the signed distance to surface of triangle.
            </summary>
            <returns>positive if outside triangle, negative if inside and 0 on boundary</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does triangle contain point.
            </summary>
            <param name="p">point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2f.ContainsCCW(Common.Core.Numerics.Vector2f)">
            <summary>
            Does triangle contain point.
            Asumes triangle is CCW;
            </summary>
            <param name="p">point</param>
            <returns>true if triangle contains point</returns>
        </member>
        <member name="M:Common.Geometry.Shapes.Triangle2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the triangle intersect this box.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.Triangle3f.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.UnevenCapsule2f.Center">
            <summary>
            The center position of the capsule.
            </summary>
        </member>
        <member name="P:Common.Geometry.Shapes.UnevenCapsule2f.Bounds">
            <summary>
            Calculate the bounding box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.UnevenCapsule2f.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.UnevenCapsule2f.Contains(Common.Core.Numerics.Vector2f)">
            <summary>
            Does the capsule contain the point.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.UnevenCapsule2f.Closest(Common.Core.Numerics.Vector2f)">
            <summary>
            The closest point to the surface of the capsule.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.UnevenCapsule2f.Intersects(Common.Geometry.Shapes.Box2f)">
            <summary>
            Does the capsule intersect with the box.
            </summary>
        </member>
        <member name="M:Common.Geometry.Shapes.UnevenCapsule2f.SignedDistance(Common.Core.Numerics.Vector2f)">
            <summary>
            The signed distance to the point.
            </summary>
        </member>
        <member name="P:Common.Meshes.IndexableMesh.PositionCount">
            <summary>
            The number of positions in mesh.
            </summary>
        </member>
        <member name="P:Common.Meshes.IndexableMesh.HasIndices">
            <summary>
            Does the mesh have indices.
            </summary>
        </member>
        <member name="P:Common.Meshes.IndexableMesh.IndexCount">
            <summary>
            The number of indices in mesh.
            </summary>
        </member>
        <member name="P:Common.Meshes.IndexableMesh.Indices">
            <summary>
            The mesh indices.
            </summary>
        </member>
        <member name="P:Common.Meshes.IndexableMesh.HasColors">
            <summary>
            The does the mesh have colors..
            </summary>
        </member>
        <member name="P:Common.Meshes.IndexableMesh.Colors">
            <summary>
            The mesh colors.
            </summary>
        </member>
        <member name="M:Common.Meshes.IndexableMesh.CreateColors">
            <summary>
            Creates the color array.
            </summary>
        </member>
        <member name="M:Common.Meshes.IndexableMesh.SetColors(System.Collections.Generic.IList{Common.Core.Colors.ColorRGBA})">
            <summary>
            Create the color array.
            </summary>
            <param name="colors">Array to copy from.</param>
        </member>
        <member name="M:Common.Meshes.IndexableMesh.CreateIndices(System.Int32)">
            <summary>
            Creates the index array.
            </summary>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Common.Meshes.IndexableMesh.SetIndices(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Create the index array.
            </summary>
            <param name="indices">Array to copy from.</param>
        </member>
        <member name="P:Common.Meshes.Mesh2f.PositionCount">
            <summary>
            The number of positions in mesh.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh2f.Positions">
            <summary>
            The vertex positions.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh2f.HasNormals">
            <summary>
            Does the mesh have normals.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh2f.Normals">
            <summary>
            The vertex normals.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh2f.HasTexCoords">
            <summary>
            Does the mesh have tex coords.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh2f.TexCoords">
            <summary>
            The vertex uvs.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh2f.ToString">
            <summary>
            Convert mesh to string.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh2f.CreatePositions(System.Int32)">
            <summary>
            Creates the position array.
            </summary>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Common.Meshes.Mesh2f.SetPositions(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Create the position array.
            </summary>
            <param name="positions">Array to copy from.</param>
        </member>
        <member name="M:Common.Meshes.Mesh2f.CreateNormals">
            <summary>
            Creates the normals array.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh2f.SetNormals(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Create the normal array.
            </summary>
            <param name="normals">Array to copy from.</param>
        </member>
        <member name="M:Common.Meshes.Mesh2f.CreateTexCoords">
            <summary>
            Creates the uv array.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh2f.SetTexCoords(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Create the uv array.
            </summary>
            <param name="texCoords">Array to copy from.</param>
        </member>
        <member name="M:Common.Meshes.Mesh2f.Translate(Common.Core.Numerics.Vector2f)">
            <summary>
            Translate the positions.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh2f.Scale(Common.Core.Numerics.Vector2f)">
            <summary>
            Scale the positions.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh2f.Transform(Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Transform the positions.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh2f.Transform(Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Transform the positions.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh3f.PositionCount">
            <summary>
            The number of positions in mesh.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh3f.Positions">
            <summary>
            The vertex positions.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh3f.HasNormals">
            <summary>
            Does the mesh have normals.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh3f.Normals">
            <summary>
            The vertex normals.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh3f.HasTexCoords">
            <summary>
            Does the mesh have tex coords.
            </summary>
        </member>
        <member name="P:Common.Meshes.Mesh3f.TexCoords">
            <summary>
            The vertex uvs.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.ToString">
            <summary>
            Convert mesh to string.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.CreatePositions(System.Int32)">
            <summary>
            Creates the position array.
            </summary>
            <param name="size">The size of the array.</param>
        </member>
        <member name="M:Common.Meshes.Mesh3f.SetPositions(System.Collections.Generic.IList{Common.Core.Numerics.Vector3f})">
            <summary>
            Create the position array.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.CreateNormals">
            <summary>
            Creates the normals array.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.SetNormals(System.Collections.Generic.IList{Common.Core.Numerics.Vector3f})">
            <summary>
            Create the normal array.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.CreateTexCoords">
            <summary>
            Creates the uv array.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.SetTexCoords(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Create the uv array.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.Translate(Common.Core.Numerics.Vector3f)">
            <summary>
            Translate the positions.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.Rotate(Common.Core.Numerics.Vector3f)">
            <summary>
            Rotate allpositions.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.Scale(Common.Core.Numerics.Vector3f)">
            <summary>
            Scale the positions.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.Transform(Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Transform the positions.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.Transform(Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Transform the positions.
            </summary>
        </member>
        <member name="M:Common.Meshes.Mesh3f.CreateTriangleNormals">
            <summary>
            Create the area weighted normals
            presuming mesh has triangle faces.
            </summary>
        </member>
    </members>
</doc>
