<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.Core</name>
    </assembly>
    <members>
        <member name="M:Common.Core.Colors.ColorHSV.op_Addition(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Addition(Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Addition(System.Single,Common.Core.Colors.ColorHSV)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Subtraction(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Subtraction(Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Subtraction(System.Single,Common.Core.Colors.ColorHSV)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Multiply(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Multiply(Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Multiply(System.Single,Common.Core.Colors.ColorHSV)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Division(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Division(Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Equality(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.op_Inequality(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.AlmostEqual(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.Equals(Common.Core.Colors.ColorHSV)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.FromBytes(System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.Distance(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.SqrDistance(Common.Core.Colors.ColorHSV,Common.Core.Colors.ColorHSV)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.ToRGB(System.Single,System.Single,System.Single)">
            <summary>
            Convert to RGB color space.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorHSV.GenerateSpectrum(System.Int32)">
            <summary>
            Generates a list of colors with hues ranging from 0 360
            and a saturation and value of 1. 
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Addition(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Addition(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Addition(System.Single,Common.Core.Colors.ColorRGB)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Subtraction(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Subtraction(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Subtraction(System.Single,Common.Core.Colors.ColorRGB)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Multiply(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Multiply(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Multiply(System.Single,Common.Core.Colors.ColorRGB)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Division(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Division(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Equality(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.op_Inequality(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.AlmostEqual(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Equals(Common.Core.Colors.ColorRGB)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.FromBytes(System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Distance(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.SqrDistance(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Min(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Max(Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Clamp(Common.Core.Colors.ColorRGB,System.Single,System.Single)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.Lerp(Common.Core.Colors.ColorRGB,Common.Core.Colors.ColorRGB,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.ToHSV(System.Single,System.Single,System.Single)">
            <summary>
            Convert to HSV color space.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.RainbowPalatte">
            <summary>
            Create a palette of 6 colors from the rainbow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGB.CustomPalatte(System.Int32,System.Single,System.Single)">
            <summary>
            Create a custom palette of hues with the same saturation and value.
            </summary>
            <param name="hues">The number of hues in the palette.</param>
            <param name="saturation">The saturation of the colors.</param>
            <param name="value">The values of the colors.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Addition(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Add two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Addition(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Add color and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Addition(System.Single,Common.Core.Colors.ColorRGBA)">
            <summary>
            Add color and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Subtraction(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Subtract two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Subtraction(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Subtract color and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Subtraction(System.Single,Common.Core.Colors.ColorRGBA)">
            <summary>
            Subtract color and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Multiply(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Multiply two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Multiply(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Multiply a color and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Multiply(System.Single,Common.Core.Colors.ColorRGBA)">
            <summary>
            Multiply a color and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Division(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Divide two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Division(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Divide a color and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Equality(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.op_Inequality(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            Are these colors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Equals(System.Object)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.AlmostEqual(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Are these colors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Equals(Common.Core.Colors.ColorRGBA)">
            <summary>
            Are these colors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.GetHashCode">
            <summary>
            colors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.ToString">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.ToString(System.String)">
            <summary>
            color as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.FromBytes(System.Int32,System.Int32,System.Int32)">
            <summary>
            color from bytes.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Distance(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            The distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.SqrDistance(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA)">
            <summary>
            The square distance between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.FromBytes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            color from ints.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Min(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Max(Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Clamp(Common.Core.Colors.ColorRGBA,System.Single,System.Single)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.Lerp(Common.Core.Colors.ColorRGBA,Common.Core.Colors.ColorRGBA,System.Single)">
            <summary>
            Lerp between two colors.
            </summary>
        </member>
        <member name="M:Common.Core.Colors.ColorRGBA.ToHSV">
            <summary>
            Convert to HSV color space.
            </summary>
        </member>
        <member name="T:Common.Core.Directions.D26">
            <summary>
            Represents the 26 directions around a 3D array
            including diagonals.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D26.LEFT_TOP">
            <summary>
            Assign a number to each direction.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D26.OFFSETS">
            <summary>
            The offset needed to be applied to a
            index to move in that direction.
            </summary>
        </member>
        <member name="T:Common.Core.Directions.D4">
            <summary>
            Represents the 4 directions around a 2D array
            not including diagonals.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D4.LEFT">
            <summary>
            Assign a number to each direction.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D4.OFFSETS">
            <summary>
            The offset needed to be applied to a
            index to move in that direction.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D4.OPPOSITES">
            <summary>
            The opposite direction.
            OPPOSITE[LEFT] == RIGHT
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D4.ADJACENT">
            <summary>
            The two adjacent directions.
            ADJACENT[LEFT, 0] == BOTTOM
            ADJACENT[LEFT, 1] == TOP
            </summary>
        </member>
        <member name="T:Common.Core.Directions.D8">
            <summary>
            Represents the 8 directions around a 2D array
            including diagonals.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.LEFT">
            <summary>
            Assign a number to each direction.
            </summary>
        </member>
        <member name="M:Common.Core.Directions.D8.IsDiagonal(System.Int32)">
            <summary>
            Is this a diagonal direction.
            IsDiagonal(RIGHT_TOP) == true
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.NAME">
            <summary>
            The directions name.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.OFFSETS">
            <summary>
            The offset needed to be applied to a
            index to move in that direction.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.DIRECTION">
            <summary>
            Given a 2D index from 0-2 what direction does it represent.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.OPPOSITES">
            <summary>
            The opposite direction.
            OPPOSITE[LEFT] == RIGHT
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.BITS">
            <summary>
            In a byte flag which bit does a direction represents.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.ADJACENT">
            <summary>
            The two adjacent directions.
            ADJACENT[LEFT, 0] == LEFT_BOTTOM
            ADJACENT[LEFT, 1] == LEFT_TOP
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.DIAGONAL">
            <summary>
            A list of only the diagonal directions.
            </summary>
        </member>
        <member name="F:Common.Core.Directions.D8.ORTHOGONAL">
            <summary>
            A list of only the orthogonal directions.
            </summary>
        </member>
        <member name="T:Common.Core.IO.RawFileProperties">
            <summary>
            Raw file Settings.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFileProperties.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.Core.IO.RawFile">
            <summary>
            Raw file to help loading and saving of raw file format.
            Always converts the data to a float for convenience.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.#ctor(System.String)">
            <summary>
            Load 32 bit data from file name.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.#ctor(System.String,System.Int32,Common.Core.IO.BYTE_ORDER)">
            <summary>
            Load data from file with the provided bitdepth and byte order.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Load data from file with the provided bitdepth and byte order.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.#ctor(Common.Core.IO.RawFileProperties)">
            <summary>
            Load data from file with the provided format.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.FileName">
            <summary>
            The filename to load from and save to.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.BigEndian">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.BitDepth">
            <summary>
            Gets the bit depth.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.ByteOrder">
            <summary>
            Gets the byte order. Only needed for 16 bit files.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.ByteCount">
            <summary>
            Gets the size of the file in bytes.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.ElementCount">
            <summary>
            Gets the number of elements, ie float == 4 bytes.
            </summary>
        </member>
        <member name="P:Common.Core.IO.RawFile.Data">
            <summary>
            The loaded data.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.IO.RawFile.ReadFloat(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.ReadShort(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.ReadByte(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.FindSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.LoadData">
            <summary>
            Loads the bytes from file.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Load8Bit(System.String)">
            <summary>
            Loads 8 bit file and convert to float.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Load16Bit(System.String,System.Boolean)">
            <summary>
            Loads 16 bit file and convert to float.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Load16Bit(System.String,Common.Core.IO.BYTE_ORDER)">
            <summary>
            Loads 16 bit file and convert to float.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Load32Bit(System.String)">
            <summary>
            Loads 32 bit file and convert to float.
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Save8Bit(System.String,System.Single[])">
            <summary>
            Saves float data to 8 bit..
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Save16Bit(System.String,System.Single[],System.Boolean)">
            <summary>
            Saves float data to 16 bit..
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Save16Bit(System.String,System.Single[],Common.Core.IO.BYTE_ORDER)">
            <summary>
            Saves float data to 16 bit..
            </summary>
        </member>
        <member name="M:Common.Core.IO.RawFile.Save32Bit(System.String,System.Single[])">
            <summary>
            Saves float data to 32 bit..
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Wrap(System.Int32,System.Int32)">
            <summary>
            Wrap a value between 0 and count-1 (inclusive).
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Mirror(System.Int32,System.Int32)">
            <summary>
            Mirror a value between 0 and count-1 (inclusive).
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.IsPow2(System.Int32)">
            <summary>
            Is number a power of 2.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.NearestPow2(System.Int32)">
            <summary>
            Return the closest pow2 number to num.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.LowerPow2(System.Int32)">
            <summary>
            Return the closest pow2 number thats less than num.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.IntPow(System.Int32,System.Int32)">
            <summary>
            Simple int pow function.
            System Math.Pow may produce precision errors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Binomial(System.Int32,System.Int32)">
            <summary>
            Return the Binomial coefficients.
            </summary>
            <param name="k">N</param>
            <param name="i">n</param>
            <returns></returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Factorial(System.Int32)">
            <summary>
            Returns the factorial of number.
            Must be less than or equal MAX_FACTORIAL or overflow will occur.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.FactorialBI(System.Int32)">
            <summary>
            Returns the factorial of number using a BigInteger.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.Permutations(System.Int32)">
            <summary>
            Given N objects, how many unique sets exist.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.PermutationsOrderedWithRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order matters and objects may repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.PermutationsUnorderedWithRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order does not matters and objects may repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.PermutationsOrderedWithoutRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order matters and objects may not repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.PermutationsUnorderedWithoutRepeats(System.Int32,System.Int32)">
            <summary>
            Given N objects, how many unique sets exist of size n 
            where the order does not matters and objects may not repeat.
            </summary>
            <param name="n">The size of the sets</param>
            <param name="N">The total number of objects</param>
            <returns>The number of sets possible</returns>
        </member>
        <member name="M:Common.Core.Numerics.MathUtil.CreateFactorialTable">
            <summary>
            Creates a look up table for factorials.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix2x2d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*2). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.#ctor(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Addition(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Subtraction(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(Common.Core.Numerics.Matrix2x2d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Multiply(System.Double,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Equality(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.op_Inequality(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.Equals(Common.Core.Numerics.Matrix2x2d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.AlmostEqual(Common.Core.Numerics.Matrix2x2d,Common.Core.Numerics.Matrix2x2d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.TryInverse(Common.Core.Numerics.Matrix2x2d@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.SetColumn(System.Int32,Common.Core.Numerics.Vector2d)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.SetRow(System.Int32,Common.Core.Numerics.Vector2d)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.Rotate(System.Double)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2d.ToMatrix3x3d">
            <summary>
            Convert to a float precision 3 dimension matrix.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix2x2f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*2). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix2x2f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.#ctor(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix2x2f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Addition(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Subtraction(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(Common.Core.Numerics.Matrix2x2f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Multiply(System.Single,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Equality(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.op_Inequality(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.Equals(Common.Core.Numerics.Matrix2x2f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.AlmostEqual(Common.Core.Numerics.Matrix2x2f,Common.Core.Numerics.Matrix2x2f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.TryInverse(Common.Core.Numerics.Matrix2x2f@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.SetColumn(System.Int32,Common.Core.Numerics.Vector2f)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.SetRow(System.Int32,Common.Core.Numerics.Vector2f)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.Rotate(System.Single)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix2x2f.ToMatrix3x3f">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix3x3d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*3). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3d.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.#ctor(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Addition(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Subtraction(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(Common.Core.Numerics.Matrix3x3d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Multiply(System.Double,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Equality(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.op_Inequality(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Equals(Common.Core.Numerics.Matrix3x3d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.AlmostEqual(Common.Core.Numerics.Matrix3x3d,Common.Core.Numerics.Matrix3x3d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.TryInverse(Common.Core.Numerics.Matrix3x3d@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            Invert a 3x3 using cofactors.  This is about 8 times faster than
            the Numerical Recipes code which uses Gaussian elimination.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.SetColumn(System.Int32,Common.Core.Numerics.Vector3d)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.SetRow(System.Int32,Common.Core.Numerics.Vector3d)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.ToMatrix4x4d">
            <summary>
            Convert to a double precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Translate(Common.Core.Numerics.Vector2d)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Scale(Common.Core.Numerics.Vector2d)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Scale(System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.RotateX(System.Double)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.RotateY(System.Double)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.RotateZ(System.Double)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3d.Rotate(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix3x3f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*3). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3f.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix3x3f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.#ctor(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix3x3f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Addition(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Subtraction(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(Common.Core.Numerics.Matrix3x3f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Multiply(System.Single,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Equality(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.op_Inequality(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Equals(Common.Core.Numerics.Matrix3x3f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.AlmostEqual(Common.Core.Numerics.Matrix3x3f,Common.Core.Numerics.Matrix3x3f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.TryInverse(Common.Core.Numerics.Matrix3x3f@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            Invert a 3x3 using cofactors.  This is about 8 times faster than
            the Numerical Recipes code which uses Gaussian elimination.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.SetColumn(System.Int32,Common.Core.Numerics.Vector3f)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.SetRow(System.Int32,Common.Core.Numerics.Vector3f)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.ToMatrix4x4f">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Translate(Common.Core.Numerics.Vector2f)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Scale(Common.Core.Numerics.Vector2f)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Scale(System.Single)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.RotateX(System.Single)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.RotateY(System.Single)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.RotateZ(System.Single)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix3x3f.Rotate(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix4x4d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*4). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.m30">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.#ctor(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Adjoint">
            <summary>
            The adjoint of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Addition(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Subtraction(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(Common.Core.Numerics.Matrix4x4d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Multiply(System.Double,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Equality(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.op_Inequality(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Equals(Common.Core.Numerics.Matrix4x4d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.AlmostEqual(Common.Core.Numerics.Matrix4x4d,Common.Core.Numerics.Matrix4x4d,System.Double)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Minor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The minor of a matrix. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.TryInverse(Common.Core.Numerics.Matrix4x4d@)">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.SetColumn(System.Int32,Common.Core.Numerics.Vector4d)">
            <summary>
            Set the ith column from a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.SetRow(System.Int32,Common.Core.Numerics.Vector4d)">
            <summary>
            Set the ith row from a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.ToMatrix3x3d">
            <summary>
            Convert to a 3 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.TranslateRotateScale(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Create a translation, rotation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.TranslateRotate(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Create a translation and rotation.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.TranslateScale(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Create a translation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.RotateScale(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Create a rotation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Translate(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Scale(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Scale(System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.RotateX(System.Double)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.RotateY(System.Double)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.RotateZ(System.Double)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Rotate(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a perspective matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a ortho matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4d.LookAt(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Creates the matrix need to look at target from position.
            </summary>
        </member>
        <member name="T:Common.Core.Numerics.Matrix4x4f">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*4). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.m30">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Matrix4x4f.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.#ctor(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.#ctor(System.Single)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.#ctor(System.Single[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Adjoint">
            <summary>
            The adjoint of a matrix. 
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Matrix4x4f.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Addition(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Subtraction(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Multiply  a vector by a matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(Common.Core.Numerics.Matrix4x4f,System.Single)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Multiply(System.Single,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Equality(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.op_Inequality(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Equals(Common.Core.Numerics.Matrix4x4f)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.AlmostEqual(Common.Core.Numerics.Matrix4x4f,Common.Core.Numerics.Matrix4x4f,System.Single)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Minor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The minor of a matrix. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.TryInverse(Common.Core.Numerics.Matrix4x4f@)">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.SetColumn(System.Int32,Common.Core.Numerics.Vector4f)">
            <summary>
            Set the ith column from a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.SetRow(System.Int32,Common.Core.Numerics.Vector4f)">
            <summary>
            Set the ith row from a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.ToMatrix3x3f">
            <summary>
            Convert to a 3 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.TranslateRotateScale(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Create a translation, rotation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.TranslateRotate(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Create a translation and rotation.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.TranslateScale(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Create a translation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.RotateScale(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Create a rotation and scale.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Translate(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Scale(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Scale(System.Single)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.RotateX(System.Single)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.RotateY(System.Single)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.RotateZ(System.Single)">
            <summary>
            Create a rotation out of a angle in degrees.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Rotate(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a perspective matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a ortho matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Matrix4x4f.LookAt(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Creates the matrix need to look at target from position.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.#ctor(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            A Quaternion from a vector axis and angle.
            The axis is the up direction and the angle is the rotation.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.#ctor(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            A quaternion with the rotation required to
            rotation from the from direction to the to direction.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.Conjugate">
            <summary>
            Returns the conjugate of a quaternion value.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.Inverse">
            <summary>
            The inverse of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.Magnitude">
            <summary>
            The length of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.SqrMagnitude">
            <summary>
            The sqr length of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3d.Normalized">
            <summary>
            The a normalized quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Multiply(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Multiply two quternions together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Multiply(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Multiply(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Equality(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.op_Inequality(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Equals(Common.Core.Numerics.Quaternion3d)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Equals(System.Object)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.GetHashCode">
            <summary>
            Quaternions hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.ToString">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.ToString(System.String)">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z,w</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.ToMatrix3x3d">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.ToMatrix4x4d">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Normalize">
            <summary>
            The normalize the quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Dot(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d)">
            <summary>
            The dot product of two quaternion..
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.Slerp(Common.Core.Numerics.Quaternion3d,Common.Core.Numerics.Quaternion3d,System.Double)">
            <summary>
            Slerp the quaternion from the from rotation to the to rotation by t.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.FromEuler(Common.Core.Numerics.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            Uses Unity euler axis (+x right, +y up, +z forward)
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.RotateX(System.Double)">
            <summary>
            Returns a 4x4 matrix that rotates around the x-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the x-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.RotateY(System.Double)">
            <summary>
            Returns a 4x4 matrix that rotates around the y-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the y-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3d.RotateZ(System.Double)">
            <summary>
            Returns a 4x4 matrix that rotates around the z-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the z-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.#ctor(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            A Quaternion from a vector axis and angle.
            The axis is the up direction and the angle is the rotation.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.#ctor(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            A quaternion with the rotation required to
            rotation from the from direction to the to direction.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.Conjugate">
            <summary>
            Returns the conjugate of a quaternion value.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.Inverse">
            <summary>
            The inverse of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.Magnitude">
            <summary>
            The length of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.SqrMagnitude">
            <summary>
            The sqr length of the quaternion.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Quaternion3f.Normalized">
            <summary>
            The a normalized quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Multiply(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Multiply two quternions together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Multiply(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Multiply(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Equality(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.op_Inequality(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Equals(Common.Core.Numerics.Quaternion3f)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Equals(System.Object)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.GetHashCode">
            <summary>
            Quaternions hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.ToString">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.ToString(System.String)">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z,w</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.ToMatrix3x3f">
            <summary>
            Convert to a single precision 3 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.ToMatrix4x4f">
            <summary>
            Convert to a single precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Normalize">
            <summary>
            The normalize the quaternion.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Dot(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f)">
            <summary>
            The dot product of two quaternion..
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.Slerp(Common.Core.Numerics.Quaternion3f,Common.Core.Numerics.Quaternion3f,System.Single)">
            <summary>
            Slerp the quaternion from the from rotation to the to rotation by t.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.FromEuler(Common.Core.Numerics.Vector3f)">
            <summary>
            Create a rotation out of a vector.
            Uses Unity euler axis (+x right, +y up, +z forward)
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.RotateX(System.Single)">
            <summary>
            Returns a 4x4 matrix that rotates around the x-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the x-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.RotateY(System.Single)">
            <summary>
            Returns a 4x4 matrix that rotates around the y-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the y-axis towards the origin in degrees.
            </param>
        </member>
        <member name="M:Common.Core.Numerics.Quaternion3f.RotateZ(System.Single)">
            <summary>
            Returns a 4x4 matrix that rotates around the z-axis by a given number of degrees.
            </summary>
            <param name="angle">
            The clockwise rotation angle when looking along the z-axis towards the origin in degrees.
            </param>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.x0y">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.xy0">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.xy01">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.x0y1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.PerpendicularCCW">
            <summary>
            Counter clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.PerpendicularCW">
            <summary>
            Clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Addition(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Addition(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Addition(System.Double,Common.Core.Numerics.Vector2d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_UnaryNegation(Common.Core.Numerics.Vector2d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Subtraction(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Subtraction(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Subtraction(System.Double,Common.Core.Numerics.Vector2d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Multiply(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Multiply(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Multiply(System.Double,Common.Core.Numerics.Vector2d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Division(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Division(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Equality(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.op_Inequality(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.AlmostEqual(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Equals(Common.Core.Numerics.Vector2d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.CompareTo(Common.Core.Numerics.Vector2d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Dot(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.AbsDot(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Cross(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Distance(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.SqrDistance(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Project(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Reflect(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Refract(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,System.Single)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Angle180(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Angle360(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Min(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Min(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Max(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Max(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Clamp(Common.Core.Numerics.Vector2d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Clamp(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Lerp(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Slerp(Common.Core.Numerics.Vector2d,Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2d.IsCCW(System.Collections.Generic.IList{Common.Core.Numerics.Vector2d})">
            <summary>
            Returns if list of verts make a CCW polygon.
            Presumes polygon is simple.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.x0y">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.xy0">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.xy01">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.x0y1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.#ctor(System.Single,System.Single)">
            <summary>
            A vector from the variables.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.#ctor(System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.PerpendicularCCW">
            <summary>
            Counter clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.PerpendicularCW">
            <summary>
            Clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Addition(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Addition(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Addition(System.Single,Common.Core.Numerics.Vector2f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_UnaryNegation(Common.Core.Numerics.Vector2f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Subtraction(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Subtraction(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Subtraction(System.Single,Common.Core.Numerics.Vector2f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Multiply(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Multiply(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Multiply(System.Single,Common.Core.Numerics.Vector2f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Division(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Division(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Equality(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.op_Inequality(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.AlmostEqual(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Equals(Common.Core.Numerics.Vector2f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.CompareTo(Common.Core.Numerics.Vector2f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Dot(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.AbsDot(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Cross(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Distance(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.SqrDistance(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Project(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Reflect(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Refract(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Angle180(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Angle360(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Min(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Min(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Max(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Max(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Clamp(Common.Core.Numerics.Vector2f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Clamp(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Lerp(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Slerp(Common.Core.Numerics.Vector2f,Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:Common.Core.Numerics.Vector2f.IsCCW(System.Collections.Generic.IList{Common.Core.Numerics.Vector2f})">
            <summary>
            Returns if list of verts make a CCW polygon.
            Presumes polygon is simple.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2i.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2i.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2i.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2i.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2i.MinInt">
            <summary>
            A vector of min REAL.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector2i.MaxInt">
            <summary>
            A vector of max REAL.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.x0y">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.xy0">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.xy01">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.x0y1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector2i.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Addition(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Addition(Common.Core.Numerics.Vector2i,System.Int32)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Addition(System.Int32,Common.Core.Numerics.Vector2i)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_UnaryNegation(Common.Core.Numerics.Vector2i)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Subtraction(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Subtraction(Common.Core.Numerics.Vector2i,System.Int32)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Subtraction(System.Int32,Common.Core.Numerics.Vector2i)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Multiply(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Multiply(Common.Core.Numerics.Vector2i,System.Int32)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Multiply(System.Int32,Common.Core.Numerics.Vector2i)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Division(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Division(Common.Core.Numerics.Vector2i,System.Int32)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Equality(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.op_Inequality(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Equals(Common.Core.Numerics.Vector2i)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.CompareTo(Common.Core.Numerics.Vector2i)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Dot(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.AbsDot(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Cross(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Distance(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.SqrDistance(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Angle180(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Angle360(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Angle between two vectors in degrees from 0 to 360.
            Angle represents moving ccw from a to b.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Min(Common.Core.Numerics.Vector2i,System.Int32)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Min(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Max(Common.Core.Numerics.Vector2i,System.Int32)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Max(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Clamp(System.Int32,System.Int32)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector2i.Clamp(Common.Core.Numerics.Vector2i,Common.Core.Numerics.Vector2i)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.zy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xyz0">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.xyz1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.#ctor(Common.Core.Numerics.Vector2d,System.Double)">
            <summary>
            A vector from a 2d vector and the z varible.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3d.TangentSpaceNormal">
            <summary>
            Convert a normalized vector to tangent space.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Addition(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Addition(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Addition(System.Double,Common.Core.Numerics.Vector3d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_UnaryNegation(Common.Core.Numerics.Vector3d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Subtraction(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Subtraction(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Subtraction(System.Double,Common.Core.Numerics.Vector3d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Multiply(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Multiply(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Multiply(System.Double,Common.Core.Numerics.Vector3d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Division(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Division(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Equality(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.op_Inequality(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.AlmostEqual(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Equals(Common.Core.Numerics.Vector3d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.CompareTo(Common.Core.Numerics.Vector3d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Dot(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.AbsDot(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Angle180(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Cross(Common.Core.Numerics.Vector3d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Cross(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Distance(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.SqrDistance(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Project(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Reflect(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Refract(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,System.Single)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Orthonormal(Common.Core.Numerics.Vector3d@,Common.Core.Numerics.Vector3d@,Common.Core.Numerics.Vector3d@)">
            <summary>
            Create a set of orthonormal vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Min(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Min(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Max(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Max(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Clamp(Common.Core.Numerics.Vector3d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Clamp(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Lerp(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Slerp(Common.Core.Numerics.Vector3d,Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.zy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xyz0">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.xyz1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.#ctor(Common.Core.Numerics.Vector2f,System.Single)">
            <summary>
            A vector from a 2d vector and the z varible.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3f.TangentSpaceNormal">
            <summary>
            Convert a normalized vector to tangent space.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Addition(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Addition(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Addition(System.Single,Common.Core.Numerics.Vector3f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_UnaryNegation(Common.Core.Numerics.Vector3f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Subtraction(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Subtraction(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Subtraction(System.Single,Common.Core.Numerics.Vector3f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Multiply(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Multiply(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Multiply(System.Single,Common.Core.Numerics.Vector3f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Division(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Division(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Equality(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.op_Inequality(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.AlmostEqual(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Equals(Common.Core.Numerics.Vector3f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.CompareTo(Common.Core.Numerics.Vector3f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Dot(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.AbsDot(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Angle180(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Angle between two vectors in degrees from 0 to 180.
            A and b origin treated as 0,0 and do not need to be normalized.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Cross(Common.Core.Numerics.Vector3f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Cross(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Distance(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.SqrDistance(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Project(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Project vector v onto u.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Reflect(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Given an incident vector i and a normal vector n.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Refract(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Returns the refraction vector given the incident vector i, 
            the normal vector n and the refraction index eta.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Orthonormal(Common.Core.Numerics.Vector3f@,Common.Core.Numerics.Vector3f@,Common.Core.Numerics.Vector3f@)">
            <summary>
            Create a set of orthonormal vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Min(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Min(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Max(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Max(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Clamp(Common.Core.Numerics.Vector3f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Clamp(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Lerp(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Slerp(Common.Core.Numerics.Vector3f,Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            Slerp between two vectors arc.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="F:Common.Core.Numerics.Vector3i.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3i.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3i.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3i.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3i.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3i.MinInt">
            <summary>
            A vector of min REAL.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector3i.MaxInt">
            <summary>
            A vector of max REAL.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.zy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.xyz0">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.xyz1">
            <summary>
            Convert to a 4 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector3i.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Addition(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Addition(Common.Core.Numerics.Vector3i,System.Int32)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Addition(System.Int32,Common.Core.Numerics.Vector3i)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_UnaryNegation(Common.Core.Numerics.Vector3i)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Subtraction(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Subtraction(Common.Core.Numerics.Vector3i,System.Int32)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Subtraction(System.Int32,Common.Core.Numerics.Vector3i)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Multiply(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Multiply(Common.Core.Numerics.Vector3i,System.Int32)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Multiply(System.Int32,Common.Core.Numerics.Vector3i)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Division(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Division(Common.Core.Numerics.Vector3i,System.Int32)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Equality(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.op_Inequality(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Equals(Common.Core.Numerics.Vector3i)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.CompareTo(Common.Core.Numerics.Vector3i)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Dot(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.AbsDot(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Cross(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Distance(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.SqrDistance(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Min(Common.Core.Numerics.Vector3i,System.Int32)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Min(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Max(Common.Core.Numerics.Vector3i,System.Int32)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Max(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Clamp(System.Int32,System.Int32)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector3i.Clamp(Common.Core.Numerics.Vector3i,Common.Core.Numerics.Vector3i)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.UnitW">
            <summary>
            The unit w vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.xyz">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.xyz0">
            <summary>
            A copy of the vector with w as 0.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.#ctor(Common.Core.Numerics.Vector2d,System.Double,System.Double)">
            <summary>
            A vector from a 2d vector and the z and w varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.#ctor(Common.Core.Numerics.Vector3d,System.Double)">
            <summary>
            A vector from a 3d vector and the w varible.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4d.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Addition(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Addition(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Addition(System.Double,Common.Core.Numerics.Vector4d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_UnaryNegation(Common.Core.Numerics.Vector4d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Subtraction(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Subtraction(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Subtraction(System.Double,Common.Core.Numerics.Vector4d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Multiply(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Multiply(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Multiply(System.Double,Common.Core.Numerics.Vector4d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Division(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Division(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Equality(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.op_Inequality(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.AlmostEqual(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Equals(Common.Core.Numerics.Vector4d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.CompareTo(Common.Core.Numerics.Vector4d)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z,w</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Dot(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.AbsDot(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Distance(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.SqrDistance(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Min(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Min(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Max(Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Max(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Clamp(Common.Core.Numerics.Vector4d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Clamp(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Lerp(Common.Core.Numerics.Vector4d,Common.Core.Numerics.Vector4d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.UnitW">
            <summary>
            The unit w vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4f.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.xyz">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.xyz0">
            <summary>
            A copy of the vector with w as 0.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(System.Single)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(Common.Core.Numerics.Vector2f,System.Single,System.Single)">
            <summary>
            A vector from a 2d vector and the z and w varibles.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.#ctor(Common.Core.Numerics.Vector3f,System.Single)">
            <summary>
            A vector from a 3d vector and the w varible.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4f.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Addition(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Addition(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Addition(System.Single,Common.Core.Numerics.Vector4f)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_UnaryNegation(Common.Core.Numerics.Vector4f)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Subtraction(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Subtraction(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Subtraction(System.Single,Common.Core.Numerics.Vector4f)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Multiply(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Multiply(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Multiply(System.Single,Common.Core.Numerics.Vector4f)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Division(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Division(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Equality(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.op_Inequality(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.AlmostEqual(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Are these vectors equal given the error.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Equals(Common.Core.Numerics.Vector4f)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.CompareTo(Common.Core.Numerics.Vector4f)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z,w</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Dot(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.AbsDot(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Distance(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.SqrDistance(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Min(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Min(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Max(Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Max(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Clamp(Common.Core.Numerics.Vector4f,System.Single,System.Single)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Clamp(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Lerp(Common.Core.Numerics.Vector4f,Common.Core.Numerics.Vector4f,System.Single)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4f.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="F:Common.Core.Numerics.Vector4i.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4i.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4i.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4i.UnitW">
            <summary>
            The unit w vector.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4i.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4i.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4i.MinInt">
            <summary>
            A vector of min REAL.
            </summary>
        </member>
        <member name="F:Common.Core.Numerics.Vector4i.MaxInt">
            <summary>
            A vector of max REAL.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.xy">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.xz">
            <summary>
            Convert to a 2 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.xyz">
            <summary>
            Convert to a 3 dimension vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.xyz0">
            <summary>
            A copy of the vector with w as 0.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.Sum">
            <summary>
            The sum of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.Product">
            <summary>
            The product of the vectors components.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:Common.Core.Numerics.Vector4i.Absolute">
            <summary>
            The vectors absolute values.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Addition(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Addition(Common.Core.Numerics.Vector4i,System.Int32)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Addition(System.Int32,Common.Core.Numerics.Vector4i)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_UnaryNegation(Common.Core.Numerics.Vector4i)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Subtraction(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Subtraction(Common.Core.Numerics.Vector4i,System.Int32)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Subtraction(System.Int32,Common.Core.Numerics.Vector4i)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Multiply(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Multiply two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Multiply(Common.Core.Numerics.Vector4i,System.Int32)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Multiply(System.Int32,Common.Core.Numerics.Vector4i)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Division(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Divide two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Division(Common.Core.Numerics.Vector4i,System.Int32)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Equality(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.op_Inequality(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Equals(Common.Core.Numerics.Vector4i)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.CompareTo(Common.Core.Numerics.Vector4i)">
            <summary>
            Compare two vectors by axis.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.FromString(System.String)">
            <summary>
            Convert from a string.
            </summary>
            <param name="text">A string in fromat x,y,z,w</param>
            <returns>A vector</returns>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Dot(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.AbsDot(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Distance(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.SqrDistance(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Square distance between two vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Min(Common.Core.Numerics.Vector4i,System.Int32)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Min(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Max(Common.Core.Numerics.Vector4i,System.Int32)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Max(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Clamp(System.Int32,System.Int32)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="M:Common.Core.Numerics.Vector4i.Clamp(Common.Core.Numerics.Vector4i,Common.Core.Numerics.Vector4i)">
            <summary>
            Clamp the each component to specified min and max.
            </summary>
        </member>
        <member name="P:Common.Core.RandomNum.IRandomGenerator.Value">
            <summary>
            A random double greater than or equal to 0 and less than 1.
            </summary>
        </member>
        <member name="P:Common.Core.RandomNum.IRandomGenerator.Seed">
            <summary>
            The seed for the random generator.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.IRandomGenerator.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.IRandomGenerator.Next">
            <summary>
            A random int greater than or equal to 0 and less than MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.IRandomGenerator.Next(System.Int32)">
            <summary>
            A random int greater than or equal to 0 and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.IRandomGenerator.Next(System.Int32,System.Int32)">
            <summary>
            A random int greater than or equal to min and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.IRandomGenerator.NextDouble(System.Double,System.Double)">
            <summary>
            A random double greater than or equal to min and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.IRandomGenerator.NextDouble">
            <summary>
            A random double greater than or equal to 0 and less than 1.
            </summary>
        </member>
        <member name="T:Common.Core.RandomNum.LCHGenerator">
            <summary>
            A linear congruential generator (LCG) is an algorithm that yields
            a sequence of pseudo-randomized numbers calculated with a discontinuous 
            piecewise linear equation. The method represents one of the oldest 
            and best-known pseudorandom number generator algorithms.
            If increment = 0, the generator is often called a multiplicative congruential generator
            https://en.wikipedia.org/wiki/Linear_congruential_generator
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.LCHGenerator.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.RandomNum.LCHGenerator.Next">
            <summary>
            A random int greater than or equal to 0 and less than MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.LCHGenerator.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="T:Common.Core.RandomNum.MersenneTwister">
            <summary>
            The Mersenne Twister is a pseudorandom number generator (PRNG). 
            It is by far the most widely used general-purpose PRNG.
            Its name derives from the fact that its period length is chosen to be a Mersenne prime. 
            For all the details on this algorithm, see the original paper:
            http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf
            https://en.wikipedia.org/wiki/Mersenne_Twister
            https://github.com/cslarsen/mersenne-twister/blob/master/mersenne-twister.cpp
            </summary>
        </member>
        <member name="F:Common.Core.RandomNum.MersenneTwister.SIZE">
            <summary>
            We have an array of 624 32-bit values, and there are 31 unused bits, so we
            have a seed value of 624*32-31 = 19937 bits.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.Next">
            <summary>
            A random int greater than or equal to 0 and less than MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.M32(System.UInt32)">
            <summary>
            32nd MSB
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.MersenneTwister.L31(System.UInt32)">
            <summary>
            31 LSBs
            </summary>
        </member>
        <member name="T:Common.Core.RandomNum.RandomGenerator">
            <summary>
            A base class for generating a random number.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.#ctor">
            <summary>
            Create a random number with a randow seed.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.#ctor(System.Int32)">
            <summary>
            Create a random number.
            </summary>
            <param name="seed">The seed for the generator.</param>
        </member>
        <member name="P:Common.Core.RandomNum.RandomGenerator.Value">
            <summary>
            A random double greater than or equal to 0 and less than 1.
            </summary>
        </member>
        <member name="P:Common.Core.RandomNum.RandomGenerator.Seed">
            <summary>
            The seed for the random generator.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.Next">
            <summary>
            A random int greater than or equal to 0 and less than MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.Next(System.Int32)">
            <summary>
            A random int greater than or equal to 0 and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.Next(System.Int32,System.Int32)">
            <summary>
            A random int greater than or equal to min and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.NextDouble(System.Double,System.Double)">
            <summary>
            A random double greater than or equal to min and less than max.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.RandomGenerator.NextDouble">
            <summary>
            A random double greater than or equal to 0 and less than 1.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.SystemRandom.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Core.RandomNum.SystemRandom.Next">
            <summary>
            A random int between 0 - MaxInt.
            </summary>
        </member>
        <member name="M:Common.Core.RandomNum.SystemRandom.UpdateSeed(System.Int32)">
            <summary>
            Update seed.
            Called when seed changes.
            </summary>
        </member>
        <member name="M:Common.Core.Time.Timer.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.IListExtension.PeekLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Return the last item in list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IListExtension.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle the list into a random order.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IListExtension.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffle the list into a random order.
            </summary>
            <param name="seed">The random generators seed.</param>
        </member>
        <member name="M:System.Collections.Generic.IListExtension.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffle the list into a random order.
            </summary>
            <param name="rnd">The random generator.</param>
        </member>
        <member name="M:System.Collections.Generic.IListExtension.GetCircular``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get the element at index i and wrap
            the index to the lists bounds.
            </summary>
            <param name="i">The index.</param>
            <returns>The element at index i.</returns>
        </member>
        <member name="M:System.Collections.Generic.IListExtension.GetClamped``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get the element at index i and clamp
            the index to the lists bounds.
            </summary>
            <param name="i">The index.</param>
            <returns>The element at index i.</returns>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.Add``1(System.Collections.Generic.LinkedList{``0},``0)">
            <summary>
            Add the item to the end of the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.AddRange``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to end of list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.IndexOf``1(System.Collections.Generic.LinkedList{``0},``0)">
            <summary>
            Find the index of the item in the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.RemoveAt``1(System.Collections.Generic.LinkedList{``0},System.Int32)">
            <summary>
            Remove the item at index i.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.Sort``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Sort the linked list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.Sort``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort the linked list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.Sort``1(System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Sort the linked list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LinkedListExtensions.Sort``1(System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.LinkedListNode{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort the linked list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.Add``1(System.Collections.Generic.List{``0},``0,``0)">
            <summary>
            Add two items to the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.Add``1(System.Collections.Generic.List{``0},``0,``0,``0)">
            <summary>
            Add three items to the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.Add``1(System.Collections.Generic.List{``0},``0,``0,``0,``0)">
            <summary>
            Add four items to the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.AddRange``1(System.Collections.Generic.List{``0},System.Int32,``0)">
            <summary>
            Add the same item to the list a number of times.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.PopFirst``1(System.Collections.Generic.List{``0})">
            <summary>
            Remove and return the first element in the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.PopLast``1(System.Collections.Generic.List{``0})">
            <summary>
            Remove and return the last element in the list.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.RemoveBySwap``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Remove the item at index i by moving the
            last element to index i and then removing
            the last element.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.Cut``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Remove the elements in the list and return as a seperate list.
            </summary>
            <param name="index">The index to start at.</param>
            <param name="count">The number of elements to cut.</param>
            <returns>The cut elements.</returns>
        </member>
    </members>
</doc>
