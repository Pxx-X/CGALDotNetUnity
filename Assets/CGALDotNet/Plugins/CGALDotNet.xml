<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CGALDotNet</name>
    </assembly>
    <members>
        <member name="T:CGALDotNet.Arrangements.Arrangement2`1">
            <summary>
            The generic arrangment class.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2`1.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2`1.#ctor(System.IntPtr)">
            <summary>
            Create a arrangement from a unmanaged ptr.
            </summary>
            <param name="ptr">The unmanaged pointer.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2`1.ToString">
            <summary>
            The arrangement as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2`1.Assign(CGALDotNet.Arrangements.Arrangement2{`0})">
            <summary>
            Assigns the contents of another arrangement. 
            </summary>
            <param name="other">The other arrangement.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2`1.Overlay(CGALDotNet.Arrangements.Arrangement2{`0})">
            <summary>
            Computes the overlay of two arrangements and return as a new arrangement.
            </summary>
            <param name="other">The other arrangement.</param>
            <returns>The overlay of both arrangements.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2`1.Copy">
            <summary>
            Create a deep copy of this arrangment.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2`1.InsertPolygon(CGALDotNet.Polygons.Polygon2{`0},System.Boolean)">
            <summary>
            Insert the polygon into this arrangement.
            </summary>
            <param name="polygon">The polygon.</param>
            <param name="nonIntersecting">If the polygon intersects anything else in the arramgement.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2`1.InsertPolygon(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Boolean)">
            <summary>
            Insert the polygon into this arrangement.
            </summary>
            <param name="polygon">The polygon.</param>
            <param name="nonIntersecting">If the polygon intersects anything else in the arramgement.</param>
        </member>
        <member name="T:CGALDotNet.Arrangements.Arrangement2">
            <summary>
            The abstract base class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Create a arrangement from the kernel.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Create a arrangement from the kernel and unmanaged pointer.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="ptr">The unmanaged pointer.</param>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.Kernel">
            <summary>
            The arrangements kernel.
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.VertexCount">
            <summary>
            The number of vertices in the arrangement.
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.IsolatedVerticesCount">
            <summary>
            The number of vertices in the arrangement that are i
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.VerticesAtInfinityCount">
            <summary>
            returns the number of arrangement vertices that lie at infinity a
            nd are not associated with valid points.
            Such vertices are not considered to be regular arrangement 
            vertices and VertexCount does not count them.
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.HalfEdgeCount">
            <summary>
            The number of half edges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.EdgeCount">
            <summary>
            The number of edges. two half edges count as one edge.
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.FaceCount">
            <summary>
            The number of faces in the arrangement not counting
            the unbounded face.
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.UnboundedFaceCount">
            <summary>
            returns the number of unbounded faces in the arrangement.
            Such faces are not considered to be regular arrangement 
            faces and FaceCount does not count them.
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.Locator">
            <summary>
            The type of locator used to find element 
            in the arrangement when queried.
            Default is walk which is the best in most cases
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.IsEmpty">
            <summary>
            Is the arrangement empty.
            </summary>
        </member>
        <member name="P:CGALDotNet.Arrangements.Arrangement2.BuildStamp">
            <summary>
            A number that will change if the unmanaged 
            arrangement model changes.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.Clear">
            <summary>
            Clear the arrangement.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.IsValid">
            <summary>
            In particular, the functions checks the topological structure of the arrangement 
            and assures that it is valid. In addition, the function performs several simple 
            geometric tests to ensure the validity of some of the geometric properties of 
            the arrangement. Namely, it checks that all arrangement vertices are associated 
            with distinct points, and that the halfedges around every vertex are ordered clockwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.GetPoints(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Get a copy of all the points in the arrangement.
            </summary>
            <param name="points">A point array that is the length of the vertex count.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.GetSegments(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Get a copy of all the segments in the arrangment.
            </summary>
            <param name="segments">A segment array that is the length of the edge count.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.GetVertices(CGALDotNet.Arrangements.ArrVertex2[],System.Int32)">
            <summary>
            Get a copy of all the vertices in the arrangement.
            </summary>
            <param name="vertices">A vertices array that is the length of the vertex count.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.GetVertex(System.Int32,CGALDotNet.Arrangements.ArrVertex2@)">
            <summary>
            Get the vertex from the arrangement.
            </summary>
            <param name="index">The index of the vertex.</param>
            <param name="vertex">The vertex.</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.GetHalfEdges(CGALDotNet.Arrangements.ArrHalfedge2[],System.Int32)">
            <summary>
            Get a copy of all the half edges in the arrangement.
            </summary>
            <param name="edges">A half edge array that is the length of the half edge count.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.GetHalfEdge(System.Int32,CGALDotNet.Arrangements.ArrHalfedge2@)">
            <summary>
            Get the half edge from the arrangement.
            </summary>
            <param name="index">The index of the half edge.</param>
            <param name="edge">The half edge.</param>
            <returns>True if the half edge was found.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.GetFaces(CGALDotNet.Arrangements.ArrFace2[],System.Int32)">
            <summary>
            Get a copy of all the faces in the arrangement.
            </summary>
            <param name="faces">A face array that is the length of the facee count.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.GetFace(System.Int32,CGALDotNet.Arrangements.ArrFace2@)">
            <summary>
            Get the face from the arrangement.
            </summary>
            <param name="index">The index of the half edge.</param>
            <param name="face">The face.</param>
            <returns>True if the face was found.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.CreateLocator(CGALDotNet.Arrangements.ARR_LOCATOR)">
            <summary>
            Create the locator used to find query the arrangement.
            </summary>
            <param name="locator">The locator type.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.ReleaseLocator">
            <summary>
            Release the locator. Default will be used..
            Default is walk which is the best in most cases.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.PointQuery(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Arrangements.ArrQuery@)">
            <summary>
            Query what the point hits in the arrangment.
            </summary>
            <param name="point">The point to query.</param>
            <param name="result">What was hit.</param>
            <returns>True if something was hit.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.BatchedPointQuery(CGALDotNetGeometry.Numerics.Point2d[],CGALDotNet.Arrangements.ArrQuery[])">
            <summary>
            Query multiple points in the arrangment.
            </summary>
            <param name="points">The points to query.</param>
            <param name="results">The results for each point.</param>
            <returns>True if any point hit something.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.VerticalRayQuery(CGALDotNetGeometry.Numerics.Point2d,System.Boolean,CGALDotNet.Arrangements.ArrQuery@)">
            <summary>
            Query using a ray going up or down (y axis) from the query point.
            </summary>
            <param name="point">The point to start at.</param>
            <param name="up">True to shoot ray up, false to shoot down.</param>
            <param name="result">The result of what was hits.</param>
            <returns>True if some thing was hit.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.LocateVertex(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Arrangements.ArrVertex2@)">
            <summary>
            Locate the vertex at this point.
            </summary>
            <param name="point">The point to locate vertex at.</param>
            <param name="vert">The vertex.</param>
            <returns>True if a vertex was located.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.LocateVertex(CGALDotNetGeometry.Numerics.Point2d,System.Double,CGALDotNet.Arrangements.ArrVertex2@)">
            <summary>
            Locate the closest vertex in the hit face
            </summary>
            <param name="point">The point</param>
            <param name="radius">The radius te closest vertex has to be within.</param>
            <param name="vertex">The closest vertex.</param>
            <returns>True if point hit a face and found a vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.LocateEdge(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Arrangements.ArrHalfedge2@)">
            <summary>
            Locate the edge at this point.
            </summary>
            <param name="point">The point to locate edge at.</param>
            <param name="edge">The edge.</param>
            <returns>True if a edge was located.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.LocateEdge(CGALDotNetGeometry.Numerics.Point2d,System.Double,CGALDotNet.Arrangements.ArrHalfedge2@)">
            <summary>
            Locate the closest edge in the hit face.
            </summary>
            <param name="point">The point</param>
            <param name="edge">The closest edge.</param>
            <param name="radius">The radius from the point a edge counts as being clicked on.</param>
            <returns>True if the point hit a face and found a edge.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.LocateFace(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Arrangements.ArrFace2@)">
            <summary>
            Locate the faces at this point.
            </summary>
            <param name="point">The point to locate face at.</param>
            <param name="face">The face.</param>
            <returns>True if a face was located.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.IntersectsSegment(CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            Find if the arrangement has a element that intersects the segment.
            </summary>
            <param name="segment">The segment.</param>
            <returns>True if the segment intersects something in the arrangement.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.InsertPoint(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Inserts a given point into a given arrangement.
            It uses a given point-location object to locate the given point in the given arrangement.
            If the point conincides with an existing vertex, there is nothing left to do. if it lies 
            on an edge, the edge is split at the point. Otherwise, the point is contained inside a face, 
            and is inserted as an isolated vertex inside this face.
            </summary>
            <param name="point">The point to insert.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.InsertSegment(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Insert the segment in to the arrangement.
            </summary>
            <param name="a">The segments start point.</param>
            <param name="b">The segments end point.</param>
            <param name="nonIntersecting">True if the segment is know not to 
            hit anything currently in the arrangement.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.InsertSegment(CGALDotNetGeometry.Shapes.Segment2d,System.Boolean)">
            <summary>
            Insert a segment into the arrangement.
            </summary>
            <param name="segment"></param>
            <param name="nonIntersecting">True if the segment is know not to 
            hit anything currently in the arrangement.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.InsertSegments(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32,System.Boolean)">
            <summary>
            Insert a array of segments into the arrangement.
            </summary>
            <param name="segments">The segment array</param>
            <param name="count">The segment arrays length.</param>
            <param name="nonIntersecting">True if the segments are known not to 
            hit anything currently in the arrangement.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.RemoveVertex(System.Int32)">
            <summary>
            Attempts to removed a given vertex from a given arrangement.
            The vertex can be removed if it is either an isolated vertex, 
            (and has no incident edge,) or if it is a redundant vertex.That is, 
            it has exactly two incident edges, whose associated curves can be 
            merged to form a single x-monotone curve.The function returns a 
            boolean value that indicates whether it succeeded removing the 
            vertex from the arrangement.
            </summary>
            <param name="index">The index of the vertex in the arrangement.</param>
            <returns>True if the vertex was removed.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.RemoveVertex(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Attempts to removed a given vertex from a given arrangement.
            The vertex can be removed if it is either an isolated vertex, 
            (and has no incident edge,) or if it is a redundant vertex.That is, 
            it has exactly two incident edges, whose associated curves can be 
            merged to form a single x-monotone curve.The function returns a 
            boolean value that indicates whether it succeeded removing the 
            vertex from the arrangement.
            </summary>
            <param name="point">The poisition of the vertex in the arrangement.</param>
            <returns>True if the vertex was removed.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.RemoveEdge(System.Int32)">
            <summary>
            Removes an edge at the index from the arrangement.
            Once the edge is removed, if the vertices associated with its endpoints 
            become isolated, they are removed as well.
            </summary>
            <param name="index">The index of the one of the half edges in the arrangement.</param>
            <returns>True if the edge was removed.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.RemoveEdge(CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            Removes an edge at the index from the arrangement.
            Once the edge is removed, if the vertices associated with its endpoints 
            become isolated, they are removed as well.
            </summary>
            <param name="segment">A segment with the same positions as the edge in the arrangement.</param>
            <returns>True if the edge was removed.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.Print(System.Text.StringBuilder,System.Boolean)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="printElements"></param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.PrintVertices(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.PrintHalfEdges(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.PrintFaces(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Arrangements.Arrangement2.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Arrangements.ArrVertex2">
            <summary>
            From Point to HalfEdgeIndex must match layout
            of the unmanaged ArrVertex2 in the ArrVertex2 header file.
            </summary>
        </member>
        <member name="T:CGALDotNet.Arrangements.SweepLine`1">
            <summary>
            The generic sweep line class.
            </summary>
            <typeparam name="K">The kernel.</typeparam>
        </member>
        <member name="F:CGALDotNet.Arrangements.SweepLine`1.Instance">
            <summary>
            A static instanceof a sweep line.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine`1.#ctor(System.IntPtr)">
            <summary>
            Create from a unmanaged pointer.
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine`1.ToString">
            <summary>
            The sweep line as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Arrangements.SweepLine">
            <summary>
            The abstract sweep line.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.#ctor">
            <summary>
            The default sweep line.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Create from the kernel.
            </summary>
            <param name="kernel">A kernel that implements a sweep line.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Create from the kernel and unmanaged pointer.
            </summary>
            <param name="kernel">A kernel that implements a sweep line.</param>
            <param name="ptr">A unmanaged pointer to a sweep line.</param>
        </member>
        <member name="P:CGALDotNet.Arrangements.SweepLine.Kernel">
            <summary>
            The sweep line kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.DoIntersect(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Do any of the segments in the array intersect.
            </summary>
            <param name="segments">The segment array.</param>
            <param name="count">The ararys length.</param>
            <returns>Do any of the segments in the array intersect.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.ComputeSubcurves(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Compute all the sub segemnts from the intersection 
            of the segments in the array.
            </summary>
            <param name="segments">The segment array.</param>
            <param name="count">The ararys length.</param>
            <returns>The sub segments.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.ComputeIntersectionPoints(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Compute all the intersection points from the 
            segments in the array.
            </summary>
            <param name="segments">The segment array.</param>
            <param name="count">The ararys length.</param>
            <returns>The intersection points.</returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.GetPoints(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Get all the points in the point buffer.
            </summary>
            <param name="points">A point array the size of the point buffer.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.GetSegments(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Get all the segments in the point buffer.
            </summary>
            <param name="segments">A segment array the size of the segment buffer.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.ClearPointBuffer">
            <summary>
            Clear the point buffer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.ClearSegmentBuffer">
            <summary>
            Clear the segment buffer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.PointBufferSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.SegmentBufferSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Arrangements.SweepLine.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.CGALGlobal">
            <summary>
            Global utility functions.
            </summary>
        </member>
        <member name="P:CGALDotNet.CGALGlobal.Version">
            <summary>
            Get the version of CGAL in use.
            </summary>
        </member>
        <member name="P:CGALDotNet.CGALGlobal.EigenVersion">
            <summary>
            Get the version of eigen being used.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Angle(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Returns CGAL_OBTUSE, CGAL_RIGHT or CGAL_ACUTE depending on the 
            angle formed by the two vectors u and v.
            </summary>
            <param name="u">The first vector.</param>
            <param name="v">The second vector.</param>
            <returns>CGAL_OBTUSE, CGAL_RIGHT or CGAL_ACUTE depending on the 
            angle formed by the two vectors u and v.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Angle(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            returns CGAL_OBTUSE, CGAL_RIGHT or CGAL_ACUTE depending on the 
            angle formed by the two vectors u and v.
            </summary>
            <param name="u">The first vector.</param>
            <param name="v">The second vector.</param>
            <returns>CGAL_OBTUSE, CGAL_RIGHT or CGAL_ACUTE depending on the 
            angle formed by the two vectors u and v.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.ApproxAngle(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Returns an approximation of the angle between u and v.
            </summary>
            <param name="u">The first vector.</param>
            <param name="v">The second vector.</param>
            <returns>The angle is given in degrees.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.ApproxDihedralAngle(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Returns an approximation of the signed dihedral angle 
            in the tetrahedron pqrs of edge pq.
            p,q,r and p,q,s are not collinear.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <param name="s"></param>
            <returns>The sign is negative if orientation(p,q,r,s) 
            is CGAL::NEGATIVE and positive otherwise.
            The angle is given in degrees.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.AreOrderedAlongLine(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Returns true, if the three points are collinear 
            and q lies between p and r.
            Note that true is returned, if q==p or q==r.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>Returns true, if the three points are 
            collinear and q lies between p and r.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.AreOrderedAlongLine(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Returns true, if the three points are collinear 
            and q lies between p and r.
            Note that true is returned, if q==p or q==r.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>Returns true, if the three points are 
            collinear and q lies between p and r.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.AreStrictlyOrderedAlongLine(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            returns true, if the three points are collinear 
            and q lies strictly between p and r.
            Note that false is returned, if q==p or q==r.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>returns true, iff the three points are 
            collinear and q lies strictly between p and r.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.AreStrictlyOrderedAlongLine(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            returns true, if the three points are collinear 
            and q lies strictly between p and r.
            Note that false is returned, if q==p or q==r.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>returns true, iff the three points are 
            collinear and q lies strictly between p and r.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Collinear(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Returns true, if p, q, and r are collinear
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>returns true, if p, q, and r are collinear</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Collinear(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Returns true, if p, q, and r are collinear
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>Returns true, iff p, q, and r are collinear</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Bisector(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Constructs the bisector line of the two points p and q.
            The bisector is oriented in such a way that p lies on its positive side.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <returns>Constructs the bisector line of the two points p and q.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Bisector(CGALDotNetGeometry.Shapes.Line2d,CGALDotNetGeometry.Shapes.Line2d)">
            <summary>
            Constructs the bisector of the two lines l1 and l2.
            
            In the general case, the bisector has the direction of
            the vector which is the sum of the normalized directions 
            of the two lines, and which passes through the intersection 
            of l1 and l2. If l1 and l2 are parallel, then the bisector 
            is defined as the line which has the same direction as l1, 
            and which is at the same distance from l1 and l2. 
            If Kernel::FT is not a model of FieldWithSqrt an 
            approximation of the square root will be used in this 
            function, impacting the exactness of the result even 
            with an (exact) multiprecision number type.
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns>Constructs the bisector of the two lines l1 and l2.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Coplanar(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Returns true, if p, q, r, and s are coplanar.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <param name="s"></param>
            <returns>Returns true, if p, q, r, and s are coplanar.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.CoplanarOrientation(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            If p,q,r are collinear, then CGAL_COLLINEAR is returned.
            If not, then p,q,r define a plane p. The return value in this 
            case is either CGAL_POSITIVE or CGAL_NEGATIVE, but we don't 
            specify it explicitly. However, we guarantee that all calls to
            this predicate over 3 points in p will return a coherent 
            orientation if considered a 2D orientation in p
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>If p,q,r are collinear, then CGAL_COLLINEAR is returned.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.CoplanarOrientation(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Let P be the plane defined by the points p, q, and r.
            Note that the order defines the orientation of P. The function computes 
            the orientation of points p, q, and s in P: If p, q, s are collinear, 
            CGAL_COLLINEAR is returned. If P and the plane defined by p, q,
            and s have the same orientation, CGAL_POSITIVE is returned; 
            otherwise CGAL_NEGATIVE is returned.
            p, q, r, and s are coplanar and p, q, and r are not collinear.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.LeftTurn(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Returns true if p, q, and r form a left turn.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>Returns true if p, q, and r form a left turn.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.RightTurn(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Returns true if p, q, and r form a right turn.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>Returns true if p, q, and r form a right turn.</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Orientation(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            returns CGAL::LEFT_TURN, if r lies to the left of the oriented 
            line l defined by p and q, returns CGAL::RIGHT_TURN if r lies 
            to the right of l, and returns CGAL::COLLINEAR if r lies on l.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Orientation(CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            returns CGAL::LEFT_TURN if u and v form a left turn, returns 
            CGAL::RIGHT_TURN if u and v form a right turn, and returns 
            CGAL::COLLINEAR if u and v are collinear.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Orientation(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            returns CGAL::POSITIVE, if s lies on the positive side of the 
            oriented plane h defined by p, q, and r, returns CGAL::NEGATIVE
            if s lies on the negative side of h, and returns CGAL::COPLANAR 
            if s lies on h.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Orientation(CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d,CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            returns CGAL::NEGATIVE if u, v and w are negatively oriented, 
            CGAL::POSITIVE if u, v and w are positively oriented,
            and CGAL::COPLANAR if u, v and w are coplanar.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Orientation(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            returns CGAL::NEGATIVE if u, v and w are negatively oriented, 
            CGAL::POSITIVE if u, v and w are positively oriented,
            and CGAL::COPLANAR if u, v and w are coplanar.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.OrthogonalVector(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            computes an orthogonal vector of the plane defined by p, q
            and r, which is directed to the positive side of this plane.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="r"></param>
            <returns>computes an orthogonal vector of the plane</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Parallel(CGALDotNetGeometry.Shapes.Line2d,CGALDotNetGeometry.Shapes.Line2d)">
            <summary>
            returns true, if l1 and l2 are parallel or if one of those 
            (or both) is degenerate.
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns>returns true, if l1 and l2 are parallel</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Parallel(CGALDotNetGeometry.Shapes.Ray2d,CGALDotNetGeometry.Shapes.Ray2d)">
            <summary>
            returns true, if r1 and r2 are parallel or if one of 
            those (or both) is degenerate.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns>returns true, if r1 and r2 are parallel</returns>
        </member>
        <member name="M:CGALDotNet.CGALGlobal.Parallel(CGALDotNetGeometry.Shapes.Segment2d,CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            returns true, if s1 and s2 are parallel or if one of 
            those (or both) is degenerate.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns>returns true, if s1 and s2 are parallel</returns>
        </member>
        <member name="T:CGALDotNet.CGALObject">
            <summary>
            Base class for objects that referrence a CGAL object.
            </summary>
        </member>
        <member name="F:CGALDotNet.CGALObject.m_ptr">
            <summary>
            The pointer to the unmanged CGAL object.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALObject.#ctor(System.IntPtr)">
            <summary>
            Constructor taking a referrence to a CGAL object.
            </summary>
            <param name="ptr">A pointer to a CGAL object.</param>
        </member>
        <member name="M:CGALDotNet.CGALObject.Finalize">
            <summary>
            The destuctor.
            </summary>
        </member>
        <member name="P:CGALDotNet.CGALObject.IsDisposed">
            <summary>
            Has the object been disposed.
            </summary>
        </member>
        <member name="P:CGALDotNet.CGALObject.Ptr">
            <summary>
            Get the ptr to the CGAL object.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALObject.Dispose">
            <summary>
            Dispose the CGAl object.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALObject.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.CGALObject.Print">
            <summary>
            Print the object into the console.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALObject.Print(System.Text.StringBuilder)">
            <summary>
            Print the object into a string builder.
            </summary>
            <param name="builder">The builder to print into.</param>
        </member>
        <member name="M:CGALDotNet.CGALObject.Release">
            <summary>
            Release the CGAL object.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALObject.Swap(System.IntPtr)">
            <summary>
            Swap the unmanaged pointer with another.
            The old ptr will be released first.
            </summary>
            <param name="ptr">The new ptr. The old ptr will be released first.</param>
        </member>
        <member name="M:CGALDotNet.CGALObject.ReleasePtr">
            <summary>
            Allow derived class to release the unmanaged memory.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALObject.ReleasePtr(System.IntPtr)">
            <summary>
            Allow derived class to release the unmanaged memory.
            </summary>
        </member>
        <member name="M:CGALDotNet.CGALObject.CheckPtr">
            <summary>
            Check if the object is still valid.
            </summary>
        </member>
        <member name="T:CGALDotNet.Collections.NativeList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:CGALDotNet.Collections.NativeList`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.Get(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList`1.Set(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="T:CGALDotNet.Collections.NativeList">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Collections.NativeList.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:CGALDotNet.Collections.NativeList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:CGALDotNet.Collections.NativeList.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList.TrimExcess">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Collections.NativeList.ReleasePtr">
            <summary>
            
            </summary>
        </member>
        <member name="T:CGALDotNet.Geometry.CGALIntersections">
            <summary>
            The static intersection class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.DoIntersect(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Shapes.Line2d)">
            <summary>--------------------------------------------------------
            
                            The Point DoIntersect functions
            
            </summary>--------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.DoIntersect(CGALDotNetGeometry.Shapes.Line2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Line DoIntersect functions
            
            </summary>--------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.DoIntersect(CGALDotNetGeometry.Shapes.Ray2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Ray DoIntersect functions
            
            </summary>--------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.DoIntersect(CGALDotNetGeometry.Shapes.Segment2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Segment DoIntersect functions
            
            </summary>--------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.DoIntersect(CGALDotNetGeometry.Shapes.Triangle2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Triangle DoIntersect functions
            
            </summary>--------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.DoIntersect(CGALDotNetGeometry.Shapes.Box2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Box DoIntersect functions
            
            </summary>--------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersection(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Shapes.Line2d)">
            <summary>--------------------------------------------------------
            
                            The Point Intersection functions
            
            </summary>--------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersection(CGALDotNetGeometry.Shapes.Line2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Line Intersection functions
            
            </summary>-----------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersection(CGALDotNetGeometry.Shapes.Ray2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Ray Intersection functions
            
            </summary>-----------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersection(CGALDotNetGeometry.Shapes.Segment2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Segment Intersection functions
            
            </summary>-----------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersection(CGALDotNetGeometry.Shapes.Triangle2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Triangle Intersection functions
            
            </summary>-----------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersection(CGALDotNetGeometry.Shapes.Box2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Box Intersection functions
            
            </summary>-----------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_DoIntersect_PointLine(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Shapes.Line2d)">
            <summary>--------------------------------------------------------
            
                            The Point DoIntersect extern functions
            
            </summary>------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_DoIntersect_LinePoint(CGALDotNetGeometry.Shapes.Line2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Linet DoIntersect extern functions
            
            </summary>------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_DoIntersect_RayPoint(CGALDotNetGeometry.Shapes.Ray2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Ray DoIntersect extern functions
            
            </summary>------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_DoIntersect_SegmentPoint(CGALDotNetGeometry.Shapes.Segment2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Segment DoIntersect extern functions
            
            </summary>------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_DoIntersect_TrianglePoint(CGALDotNetGeometry.Shapes.Triangle2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Triangle DoIntersect extern functions
            
            </summary>------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_DoIntersect_BoxPoint(CGALDotNetGeometry.Shapes.Box2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Box DoIntersect extern functions
            
            </summary>------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_Intersection_PointLine(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Shapes.Line2d)">
            <summary>--------------------------------------------------------
            
                            The Point Intersection extern functions
            
            </summary>-------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_Intersection_LinePoint(CGALDotNetGeometry.Shapes.Line2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Line Intersection extern functions
            
            </summary>-------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_Intersection_RayPoint(CGALDotNetGeometry.Shapes.Ray2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Ray Intersection extern functions
            
            </summary>-------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_Intersection_SegmentPoint(CGALDotNetGeometry.Shapes.Segment2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Segment Intersection extern functions
            
            </summary>-------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_Intersection_TrianglePoint(CGALDotNetGeometry.Shapes.Triangle2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Triangle Intersection extern functions
            
            </summary>-------------------------------------------------------
        </member>
        <member name="M:CGALDotNet.Geometry.CGALIntersections.Intersections_EIK_Intersection_BoxPoint(CGALDotNetGeometry.Shapes.Box2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>--------------------------------------------------------
            
                            The Box Intersection extern functions
            
            </summary>-------------------------------------------------------
        </member>
        <member name="T:CGALDotNet.Geometry.INTERSECTION_RESULT_2D">
            <summary>
            Enum for the type of intersection geomerty.
            </summary>
        </member>
        <member name="T:CGALDotNet.Geometry.IntersectionResult2d">
            <summary>
            The intersection result struct.
            May contain up tp 6 points of data.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.IntersectionResult2d.Data">
            <summary>
            The point data for the intersection.
            Represents up to 6 points in xy order.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.IntersectionResult2d.Count">
            <summary>
            The number of points of data used.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.Hit">
            <summary>
            Was there a intersection.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.IsPolygon">
            <summary>
            Is the intersection a polygon.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.IntersectionResult2d.Type">
            <summary>
            The intersection geometry type.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.Item(System.Int32)">
            <summary>
            Array accessor for the point data.
            </summary>
            <param name="i">The array index from 0 to 6.</param>
            <returns>The point at index i.</returns>
        </member>
        <member name="M:CGALDotNet.Geometry.IntersectionResult2d.ToString">
            <summary>
            Results information as string.
            </summary>
            <returns>esults information as string</returns>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.Point">
            <summary>
            If result type was point get the point geometry.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.Line">
            <summary>
            If result type was line get the line geometry.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.Ray">
            <summary>
            If result type was ray get the ray geometry.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.Segment">
            <summary>
            If result type was segment get the segment geometry.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.Box">
            <summary>
            If result type was box get the box geometry.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.Triangle">
            <summary>
            If result type was triangle get the triangle geometry.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IntersectionResult2d.PolygonPoints">
            <summary>
            If result type was polygon get the points that
            make up the polygon geometry.
            Should only ever have at most 6 points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.IntersectionResult2d.Polygon``1">
            <summary>
            The intersection result as a polygon.
            </summary>
            <typeparam name="K">The polygons kernel.</typeparam>
            <returns>The polygon.</returns>
        </member>
        <member name="T:CGALDotNet.Geometry.IsoRectangle2`1">
            <summary>
            The generic IsoRectangle wrapper for a CGAL object.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2`1.#ctor(System.IntPtr)">
            <summary>
            Create from a pointer.
            </summary>
            <param name="ptr">The iso rectangle pointer.</param>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2`1.ToString">
            <summary>
            The iso rectangle as a string.
            </summary>
            <returns>The iso rectangle as a string.</returns>
        </member>
        <member name="T:CGALDotNet.Geometry.IsoRectangle2">
            <summary>
            The abstract iso rectangle definition.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2.#ctor(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The geometry kernel.</param>
            <param name="ptr">The IsoRectangle pointer.</param>
        </member>
        <member name="P:CGALDotNet.Geometry.IsoRectangle2.Kernel">
            <summary>
            The iso rectangle kernel.
            Contains the functions to the unmanaged CGAL object.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IsoRectangle2.Min">
            <summary>
            The rectangles min point.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IsoRectangle2.Max">
            <summary>
            The rectangles max point.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.IsoRectangle2.Area">
            <summary>
            The rectangles area.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2.BoundedSide(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            The side the rectangle the point is on.
            </summary>
            <param name="point">The point.</param>
            <returns>If the point is iside, outside or on boundary.</returns>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2.ContainsPoint(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the rectangle contain the point.
            </summary>
            <param name="point">The point</param>
            <param name="includeBoundary">Should a point on 
            the boundary count as being inside.</param>
            <returns>Does the rectangle contain the point</returns>
        </member>
        <member name="M:CGALDotNet.Geometry.IsoRectangle2.ReleasePtr">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="T:CGALDotNet.Hulls.HULL_METHOD">
            <summary>
            The convex hull method to use.
            </summary>
        </member>
        <member name="T:CGALDotNet.Hulls.ConvexHull2`1">
            <summary>
            The generic convex hull class.
            </summary>
            <typeparam name="K">The kernel type</typeparam>
        </member>
        <member name="F:CGALDotNet.Hulls.ConvexHull2`1.Instance">
            <summary>
            The static instance.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2`1.CreateHull(CGALDotNetGeometry.Numerics.Point2d[],System.Int32,CGALDotNet.Hulls.HULL_METHOD)">
            <summary>
            Find the convex of the points.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The ararys length.</param>
            <param name="method">The hull ethod to use.</param>
            <returns>A polygon that represents the convex hull.</returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2`1.UpperHull(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Find the upper hull of points.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The ararys length.</param>
            <returns>A polygon that represents the upper hull.</returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2`1.LowerHull(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Find the lower hull of points.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The ararys length.</param>
            <returns>A polygon that represents the lower hull.</returns>
        </member>
        <member name="T:CGALDotNet.Hulls.ConvexHull2">
            <summary>
            The convex hull abstract base class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Construct hull with the kernel.
            </summary>
            <param name="kernel">The kernel</param>
        </member>
        <member name="P:CGALDotNet.Hulls.ConvexHull2.Kernel">
            <summary>
            The hulls kernel type.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2.IsStronglyConvexCCW(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Is this set of points ccw orderer.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The ararys length.</param>
            <returns>Is this set of points ccw orderer.</returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2.IsStronglyConvexCW(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Is this set of points cw orderer.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The ararys length.</param>
            <returns>Is this set of points cw orderer.</returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2.CheckCount(System.Int32)">
            <summary>
            Checks if the minimum number of points have been provided.
            </summary>
            <param name="count">The point array length.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull2.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Hulls.ConvexHull3`1">
            <summary>
            The generic convex hull class.
            </summary>
            <typeparam name="K">The kernel type</typeparam>
        </member>
        <member name="F:CGALDotNet.Hulls.ConvexHull3`1.Instance">
            <summary>
            The static instance.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3`1.CreateHullAsPolyhedron(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Create the convex hull from a set of points.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The point arrays length</param>
            <returns>The hull as a polyhedron.</returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3`1.CreateHullAsSurfaceMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Create the convex hull from a set of points.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The point arrays length</param>
            <returns>The hull as a surface mesh.</returns>
        </member>
        <member name="T:CGALDotNet.Hulls.ConvexHull3">
            <summary>
            The convex hull abstract base class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Construct hull with the kernel.
            </summary>
            <param name="kernel">The kernel</param>
        </member>
        <member name="P:CGALDotNet.Hulls.ConvexHull3.Kernel">
            <summary>
            The hulls kernel type.
            </summary>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3.IsStronglyConvex(CGALDotNet.Polyhedra.Polyhedron3)">
            <summary>
            Check if the points in the polyhedron are convex.
            </summary>
            <param name="poly">The polyhedron.</param>
            <returns>True if the polyhedron is convex.</returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3.IsStronglyConvex(CGALDotNet.Polyhedra.SurfaceMesh3)">
            <summary>
            Check if the points in the mesh are convex.
            </summary>
            <param name="mesh">The mesh.</param>
            <returns>True if the mesh is convex.</returns>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3.CheckCount(System.Int32)">
            <summary>
            Checks if the minimum number of points have been provided.
            </summary>
            <param name="count">The point array length.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CGALDotNet.Hulls.ConvexHull3.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="P:CGALDotNet.Marching.MarchingBase.WindingOrder">
            <summary>
            Winding order of triangles use 2,1,0 or 0,1,2
            </summary>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingBase.Generate(System.Func{CGALDotNetGeometry.Numerics.Point3d,System.Double},System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            Generate the vertices and indices from the data returned from the function.
            </summary>
            <param name="sdf">The signed distance function</param>
            <param name="width">The width of the sdf's bounds</param>
            <param name="height">The height of the sdf's bounds</param>
            <param name="depth">The depth of the sdf's bounds</param>
            <param name="verts">The list the vertices will be added to.</param>
            <param name="indices">The list the indices will be added to.</param>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingBase.Generate(System.Single[0:,0:,0:],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            Generate the vertices and indices from the data in the voxel array.
            </summary>
            <param name="voxels">The voxel array</param>
            <param name="verts">The list the vertices will be added to.</param>
            <param name="indices">The list the indices will be added to.</param>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingBase.March(System.Double,System.Double,System.Double,System.Single[],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            MarchCube performs the Marching algorithm on a single cube
            </summary>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingBase.GetOffset(System.Double,System.Double)">
            <summary>
            GetOffset finds the approximate point of intersection of the surface
            between two points with the values v1 and v2
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingBase.VertexOffset">
            <summary>
            VertexOffset lists the positions, relative to vertex0, 
            of each of the 8 vertices of a cube.
            vertexOffset[8][3]
            </summary>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingCubes.March(System.Double,System.Double,System.Double,System.Single[],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            MarchCube performs the Marching Cubes algorithm on a single cube
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingCubes.EdgeConnection">
            <summary>
            EdgeConnection lists the index of the endpoint vertices for each 
            of the 12 edges of the cube.
            edgeConnection[12][2]
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingCubes.EdgeDirection">
            <summary>
            edgeDirection lists the direction vector (vertex1-vertex0) for each edge in the cube.
            edgeDirection[12][3]
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingCubes.CubeEdgeFlags">
            <summary>
            For any edge, if one vertex is inside of the surface and the other 
            is outside of the surface then the edge intersects the surface.
            For each of the 8 vertices of the cube can be two possible states,
            either inside or outside of the surface.
            For any cube the are 2^8=256 possible sets of vertex states.
            This table lists the edges intersected by the surface for all 256 
            possible vertex states. There are 12 edges.  
            For each entry in the table, if edge #n is intersected, then bit #n is set to 1.
            cubeEdgeFlags[256]
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingCubes.TriangleConnectionTable">
            <summary>
            For each of the possible vertex states listed in cubeEdgeFlags there is a specific triangulation
            of the edge intersection points.  triangleConnectionTable lists all of them in the form of
            0-5 edge triples with the list terminated by the invalid value -1.
            For example: triangleConnectionTable[3] list the 2 triangles formed when corner[0] 
            and corner[1] are inside of the surface, but the rest of the cube is not.
            triangleConnectionTable[256][16]
            </summary>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingSquares.Generate(System.Func{CGALDotNetGeometry.Numerics.Point2d,System.Double},System.Int32,System.Int32,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Collections.Generic.List{System.Int32})">
            <summary>
            Generate the vertices and indices from the data returned from the function.
            </summary>
            <param name="sdf">The signed distance function</param>
            <param name="width">The width of the sdf's bounds</param>
            <param name="height">The height of the sdf's bounds</param>
            <param name="verts">The list the vertices will be added to.</param>
            <param name="indices">The list the indices will be added to.</param>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingSquares.Generate(System.Single[0:,0:],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Collections.Generic.List{System.Int32})">
            <summary>
            Generate the vertices and indices from the data in the voxel array.
            </summary>
            <param name="voxels">The voxel array</param>
            <param name="verts">The list the vertices will be added to.</param>
            <param name="indices">The list the indices will be added to.</param>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingSquares.GetOffset(System.Double,System.Double)">
            <summary>
            GetOffset finds the approximate point of intersection of the surface
            between two points with the values v1 and v2
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingSquares.VertexOffset">
            <summary>
            VertexOffset lists the positions, relative to vertex0, 
            of each of the 4 vertices of a square.
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingSquares.EdgeConnection">
            <summary>
            EdgeConnection lists the index of the endpoint vertices for each 
            of the 4 edges of the cube.
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingSquares.EdgeDirection">
            <summary>
            edgeDirection lists the direction vector (vertex1-vertex0) for each edge in the cube.
            </summary>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingTertrahedron.March(System.Double,System.Double,System.Double,System.Single[],System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.List{System.Int32})">
            <summary>
            MarchCubeTetrahedron performs the Marching Tetrahedrons algorithm on a single cube
            </summary>
        </member>
        <member name="M:CGALDotNet.Marching.MarchingTertrahedron.MarchTetrahedron(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point3d},System.Collections.Generic.IList{System.Int32})">
            <summary>
            MarchTetrahedron performs the Marching Tetrahedrons algorithm on a single tetrahedron
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingTertrahedron.TetrahedronEdgeConnection">
            <summary>
            TetrahedronEdgeConnection lists the index of the endpoint vertices for each of the 6 edges of the tetrahedron.
            tetrahedronEdgeConnection[6][2]
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingTertrahedron.TetrahedronsInACube">
            <summary>
            TetrahedronEdgeConnection lists the index of verticies from a cube 
            that made up each of the six tetrahedrons within the cube.
            tetrahedronsInACube[6][4]
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingTertrahedron.TetrahedronEdgeFlags">
            <summary>
            For any edge, if one vertex is inside of the surface and the other is outside of 
            the surface then the edge intersects the surface
            For each of the 4 vertices of the tetrahedron can be two possible states, 
            either inside or outside of the surface
            For any tetrahedron the are 2^4=16 possible sets of vertex states.
            This table lists the edges intersected by the surface for all 16 possible vertex states.
            There are 6 edges.  For each entry in the table, if edge #n is intersected, then bit #n is set to 1.
            tetrahedronEdgeFlags[16]
            </summary>
        </member>
        <member name="F:CGALDotNet.Marching.MarchingTertrahedron.TetrahedronTriangles">
            <summary>
            For each of the possible vertex states listed in tetrahedronEdgeFlags there
            is a specific triangulation of the edge intersection points.  
            TetrahedronTriangles lists all of them in the form of 0-2 edge triples 
            with the list terminated by the invalid value -1.
            tetrahedronTriangles[16][7]
            </summary>
        </member>
        <member name="T:CGALDotNet.Meshing.ConformingTriangulation2`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Meshing.ConformingTriangulation2`1.Instance">
            <summary>
            A static instance of the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.ToString">
            <summary>
            The triangulation as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.Insert(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Insert the polygons points into the triangulation.
            May not retain the poylgons edges.
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.Insert(CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Insert the polygons points into the triangulation.
            May not retain the poylgons edges.
            </summary>
            <param name="pwh"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.InsertConstraint(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Insert the polygons points and the edges as constraints into the triangulation.
            Will retain the poylgons edges.
            </summary>
            <param name="polygon">The polygon to insert.</param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.InsertConstraint(CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Insert the polygons points and the edges as constraints into the triangulation.
            Will retain the poylgons edges.
            </summary>
            <param name="pwh">The polygon to insert.</param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2`1.Copy">
            <summary>
            A deep copy of the triangulation.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="T:CGALDotNet.Meshing.ConformingTriangulation2">
            <summary>
            
            </summary>
        </member>
        <member name="F:CGALDotNet.Meshing.ConformingTriangulation2.MAX_ANGLE_BOUNDS">
            <summary>
            The max value the angle bounds can be.
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Meshing.ConformingTriangulation2.VertexCount">
            <summary>
            The number of verices in the triangulation.
            </summary>
        </member>
        <member name="P:CGALDotNet.Meshing.ConformingTriangulation2.TriangleCount">
            <summary>
            The number of triangles in the triangulation.
            </summary>
        </member>
        <member name="P:CGALDotNet.Meshing.ConformingTriangulation2.IndiceCount">
            <summary>
            The number of indices need to represent the
            triangulation (number of triangles * 3).
            </summary>
        </member>
        <member name="P:CGALDotNet.Meshing.ConformingTriangulation2.Kernel">
            <summary>
            The conforming triangulation kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Clear">
            <summary>
            Clear the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Insert(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Insert(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.GetPoints(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.GetIndices(System.Int32[],System.Int32)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Translate(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Translate the triangulation.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Rotate the triangulation.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Scale(System.Double)">
            <summary>
            Scale the triangulation.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.InsertConstraint(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.InsertConstraint(CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.InsertConstraints(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            
            </summary>
            <param name="segments"></param>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.MakeDelaunay">
            <summary>
            Make the mesh delaunay.
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.MakeGabriel">
            <summary>
            Make the mesh 
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Refine(System.Double,System.Double)">
            <summary>
            Refine the mesh into smaller triangles.
            </summary>
            <param name="angleBounds">Default shape bound. 0.125 corresponds to abound 20.6 degree. Max 0.125 value.</param>
            <param name="lengthBounds">Upper bound on the length of the longest edge.</param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Refine(System.Double,System.Double,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            Refine the mesh into smaller triangles.
            </summary>
            <param name="angleBounds">Default shape bound. 0.125 corresponds to abound 20.6 degree. Max 0.125 value.</param>
            <param name="lengthBounds">Upper bound on the length of the longest edge.</param>
            <param name="seeds">Seeds point in polygons that are not to be refined.</param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.ConformingTriangulation2.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Meshing.SkinSurfaceMeshing`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Meshing.SkinSurfaceMeshing`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing`1.CreateSkinPolyhedra(System.Double,System.Boolean,CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            
            </summary>
            <param name="shrinkFactor"></param>
            <param name="subdivde"></param>
            <param name="points"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing`1.CreateSkinPolyhedra(System.Double,System.Boolean,CGALDotNetGeometry.Numerics.HPoint3d[],System.Int32)">
            <summary>
            
            </summary>
            <param name="shrinkFactor"></param>
            <param name="subdivde"></param>
            <param name="points"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Meshing.SkinSurfaceMeshing">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Meshing.SkinSurfaceMeshing.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.SkinSurfaceMeshing.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Meshing.TetrahedralRemeshing`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Meshing.TetrahedralRemeshing`1.Instance">
            <summary>
            A static instance of the tetrahedral remeshing.
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Meshing.TetrahedralRemeshing">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Meshing.TetrahedralRemeshing.Kernel">
            <summary>
            The tetrahedral remeshing kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing.Remesh(System.Double,System.Int32,CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            
            </summary>
            <param name="targetLength"></param>
            <param name="iterations"></param>
            <param name="points"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing.GetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Meshing.TetrahedralRemeshing.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Nurbs.LinearSystem">
            <summary>
            Used to solve linear systems of equation.
            https://en.wikipedia.org/wiki/LU_decomposition
            </summary>
        </member>
        <member name="F:CGALDotNet.Nurbs.LinearSystem.PA">
            <summary>
            Matrix A changed so that it contains a copy of both 
            matrices L-E and U as A=(L-E)+U such that P*A=L*U.
            </summary>
        </member>
        <member name="F:CGALDotNet.Nurbs.LinearSystem.P">
            <summary>
             The permutation matrix is not stored as a matrix, 
             but in an integer vector P of size N+1 
             containing column indexes where the permutation
             matrix has "1". The last element P[N] = S + N,
             where S is the number of row exchanges needed 
             for determinant computation, det(P)=(-1)^S
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.LinearSystem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.LinearSystem.#ctor(System.Double[0:,0:])">
            <summary>
            Construct a linear system from matrix A.
            </summary>
            <param name="A">The matrix to decompose.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.LinearSystem.ToString">
            <summary>
            The description of the linear system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.LinearSystem.Decompose(System.Double[0:,0:],System.Double)">
            <summary>
            Decompose matrix A.
            </summary>
            <param name="A">Matrix A that is part of the linear system Ax.</param>
            <param name="eps">small tolerance number to detect failure 
            when the matrix is near degenerate</param>
            <returns>If the decompositon was successful.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.LinearSystem.Solve(System.Double[],System.Double[])">
            <summary>
            Solve the linear system for the input vector.
            </summary>
            <param name="b">The vector in Ax=b.</param>
            <param name="x">The solution vector of Ax=b.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.LinearSystem.SwapRows(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Swap the rows i and k in the matrix.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsBasis.FindSpan(System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Find the span of the given parameter in the knot vector.
            </summary>
            <param name="degree">Degree of the curve.</param>
            <param name="knots">Knot vector of the curve.</param>
            <param name="u">Parameter value.</param>
            <returns>Span index into the knot vector such that (span - 1) less than u less tha or equal span</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsBasis.BSplineBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compute all non-zero B-spline basis functions
            </summary>
            <param name="deg">Degree of the basis function.</param>
            <param name="span"></param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <returns>N Values of (deg+1) non-zero basis functions.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsBasis.BSplineOneBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Compute a single B-spline basis function
            </summary>
            <param name="i">The ith basis function to compute.</param>
            <param name="deg">Degree of the basis function.</param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <returns>The value of the ith basis function at u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsBasis.BSplineDerBasis(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Compute all non-zero derivatives of B-spline basis functions
            </summary>
            <param name="deg">Degree of the basis function.</param>
            <param name="span">Index obtained from findSpan() corresponding the u and knots.</param>
            <param name="knots">Knot vector corresponding to the basis functions.</param>
            <param name="u">Parameter to evaluate the basis functions at.</param>
            <param name="num_ders">Number of derivatives to compute (num_ders less tha or equal deg)</param>
            <returns>Values of non-zero derivatives of basis functions.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.KnotMultiplicity(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns the mulitplicity of the knot at index
            </summary>
            <param name="knots">Knot vector</param>
            <param name="index">index Index of knot of interest</param>
            <returns>Multiplicity (>= 1)</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.CurveIsValid(CGALDotNet.Nurbs.BaseNurbsCurve2d)">
            <summary>
            Returns whether the curve is valid
            </summary>
            <param name="crv">Curve object</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.CurveIsClosed(CGALDotNet.Nurbs.BaseNurbsCurve2d)">
            <summary>
            Checks whether the curve is closed
            </summary>
            <param name="crv">Curve object</param>
            <returns>Whether closed</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.SurfaceIsValid(CGALDotNet.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the surface is valid
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.SurfaceIsClosedU(CGALDotNet.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Checks whether the surface is closed along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether closed along u-direction</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.SurfaceIsClosedV(CGALDotNet.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Checks whether the surface is closed along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <returns>Whether closed along v-direction</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.IsValidRelation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the relation between degree, number of knots, and
            number of control points is valid
            </summary>
            <param name="degree">The degree</param>
            <param name="num_knots">Number of knot values</param>
            <param name="num_ctrl_pts">Number of control points</param>
            <returns>Whether the relationship is valid</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.IsKnotVectorMonotonic(System.Collections.Generic.IList{System.Double})">
            <summary>
            Whether the knots are in ascending order
            </summary>
            <param name="knots">Knot vector</param>
            <returns>Whether monotonic</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.CurveIsValid(System.Int32,System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns whether the curve is valid
            </summary>
            <param name="degree">Degree of curve</param>
            <param name="knots">Knot vector of curve</param>
            <param name="numControlPoints">The number of control points.</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.SurfaceIsValid(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Returns whether the surface is valid
            </summary>
            <param name="degree_u">Degree of surface along u-direction</param>
            <param name="degree_v">Degree of surface along v-direction</param>
            <param name="knots_u">Knot vector of surface along u-direction</param>
            <param name="knots_v">Knot vector of surface along v-direction</param>
            <param name="controlPointsLen0">The number of control point in first dimension.</param>
            <param name="controlPointsLen1">The number of control point in second dimension.</param>
            <returns>Whether valid</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.IsKnotVectorClosed(CGALDotNet.Nurbs.BaseNurbsCurve2d)">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.IsKnotVectorClosedU(CGALDotNet.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.IsKnotVectorClosedV(CGALDotNet.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.IsArray1Closed(CGALDotNet.Nurbs.BaseNurbsCurve2d)">
            <summary>
            Returns whether the given knot vector is closed by checking the
            periodicity of knot vectors near the start and end
            </summary>
            <returns>Whether knot vector is closed</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.IsArray2ClosedU(CGALDotNet.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the 2D array is closed along the u-direction
            i.e., along rows.
            </summary>
            <returns>Whether closed along u-direction</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCheck.IsArray2ClosedV(CGALDotNet.Nurbs.BaseNurbsSurface3d)">
            <summary>
            Returns whether the 2D array is closed along the v-direction
            i.e., along columns.
            </summary>
            <returns>Whether closed along v-direction</returns>
        </member>
        <member name="T:CGALDotNet.Nurbs.NurbsCurveParams2d">
            <summary>
            
            </summary>
        </member>
        <member name="T:CGALDotNet.Nurbs.BaseNurbsCurve2d">
            <summary>
            Class for holding a polynomial B-spline curve
            Not part of CGAL.
            Implementation found https://github.com/pboyer/verb and https://github.com/pradeep-pyro/tinynurbs
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsCurve2d.IsRational">
            <summary>
            Is this a rational curve.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsCurve2d.Degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsCurve2d.Knots">
            <summary>
            The curves knots.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsCurve2d.Count">
            <summary>
            The number of control points.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsCurve2d.IsValid">
            <summary>
            Is this a valid curve.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsCurve2d.IsClosed">
            <summary>
            Is this a closed curve.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.GetCartesianControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.GetHomogeneousControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in homogeneous coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.SetCartesianControlPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.CartesianPoint(System.Double)">
            <summary>
            Get the point at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The point at u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.GetCartesianPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.Translate(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Translate the triangulation.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Rotate the triangulation.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.Scale(System.Double)">
            <summary>
            Scale the triangulation.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.Tangent(System.Double)">
            <summary>
            Get the tangent at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <returns>The tangent at u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.GetTangents(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Vector2d},System.Int32)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="tangents">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.Normal(System.Double,System.Boolean)">
            <summary>
            Get the tangent at parameter u.
            </summary>
            <param name="u">The parameter.</param>
            <param name="ccw">The normal direction.</param>
            <returns>The normal at u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.GetNormals(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Vector2d},System.Int32,System.Boolean)">
            <summary>
            Sample a curves normals in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="normals">The list of sampled points.</param>
            <param name="ccw">The normals direction.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsCurve2d.NormalizeKnots">
            <summary>
            Normlize the curves knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="T:CGALDotNet.Nurbs.NurbsCurve2d">
            <summary>
            Class for holding a polynomial B-spline curve
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.HPoint2d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points in cartesian coordinates.</param>
        </member>
        <member name="P:CGALDotNet.Nurbs.NurbsCurve2d.IsRational">
            <summary>
            Is this a rational curve.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.NurbsCurve2d.Degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.NurbsCurve2d.Count">
            <summary>
            The number of control points.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.NurbsCurve2d.CartesianControlPoints">
            <summary>
            The curves control points in cartesian coordinates.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.GetCartesianControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.GetHomogeneousControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in homogeneous coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.SetCartesianControlPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.GetCartesianPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.InsertKnot(CGALDotNet.Nurbs.NurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the curve and return as a new curve.
            </summary>
            <param name="crv">The curve to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new curve with the inserted knots.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsCurve2d.Split(CGALDotNet.Nurbs.NurbsCurve2d,System.Double,CGALDotNet.Nurbs.NurbsCurve2d@,CGALDotNet.Nurbs.NurbsCurve2d@)">
            <summary>
            Split the curve a the parameter and return the two new curves.
            </summary>
            <param name="crv">The curve to split.</param>
            <param name="u">The parameter to split the curve at</param>
            <param name="left">The left side of the split curve.</param>
            <param name="right">The right side of the split curve.</param>
            <returns>The two new curves.</returns>
        </member>
        <member name="T:CGALDotNet.Nurbs.RationalNurbsCurve2d">
            <summary>
            Class for holding a polynomial B-spline curve
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d},System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points.</param>
            <param name="weights">The curves weights.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.#ctor(System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.HPoint2d})">
            <summary>
            Create a curve new curve.
            </summary>
            <param name="degree">The curves degree.</param>
            <param name="knots">The curves knots.</param>
            <param name="control_points">The curves control points in cartesian coordinates.</param>
        </member>
        <member name="P:CGALDotNet.Nurbs.RationalNurbsCurve2d.IsRational">
            <summary>
            Is this a rational curve.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.RationalNurbsCurve2d.Degree">
            <summary>
            The curves degree.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.RationalNurbsCurve2d.Count">
            <summary>
            The number of control points.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.RationalNurbsCurve2d.HomogeneousControlPoints">
            <summary>
            The curves control points in homogegous coordinates.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.GetCartesianControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.GetHomogeneousControlPoint(System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points index.</param>
            <returns>The control point in homogeneous coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.SetCartesianControlPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.GetCartesianPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="samples">The numbers times to sample the curve.</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.InsertKnot(CGALDotNet.Nurbs.RationalNurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the curve and return as a new curve.
            </summary>
            <param name="crv">The curve to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new curve with the inserted knots.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsCurve2d.Split(CGALDotNet.Nurbs.RationalNurbsCurve2d,System.Double,CGALDotNet.Nurbs.RationalNurbsCurve2d@,CGALDotNet.Nurbs.RationalNurbsCurve2d@)">
            <summary>
            Split the curve a the parameter and return the two new curves.
            </summary>
            <param name="crv">The curve to split.</param>
            <param name="u">The parameter to split the curve at.</param>
            <param name="left">The left side of split curve.</param>
            <param name="right">The right side of the split curve.</param>
            <returns>The two new curves.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.CartesianCurvePoint(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to evaluate the curve at.</param>
            <returns>Resulting point on the curve at parameter u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.HomogeneousCurvePoint(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS curve
            </summary>
            <param name="crv">The nurbs curve.</param>
            <param name="u">Parameter to evaluate the curve at.</param>
            <returns>Resulting point on the curve at parameter u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.CurveTangent(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double)">
            <summary>
            Evaluate the tangent of a B-spline curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u"></param>
            <returns>Unit tangent of the curve at u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.CurveNormal(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double,System.Boolean)">
            <summary>
            Evaluate the tangent of a B-spline curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u"></param>
            <param name="ccw">Shouuld the normal be counter clock-wise to the tangent or clock-wise</param>
            <returns>Unit tangent of the curve at u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.CurveDerivatives(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Int32,System.Double)">
            <summary>
            Evaluate derivatives of a non-rational NURBS curve
            E.g. curve_ders[n] is the nth derivative at u, where 0 less than n less than or equal num_ders.
            </summary>
            <param name="crv">Curve object</param>
            <param name="num_ders">Number of times to derivate.</param>
            <param name="u">Parameter to evaluate the derivatives at.</param>
            <returns>Derivatives of the curve at u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.HomogeneousCurveDerivatives(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Int32,System.Double)">
            <summary>
            Evaluate derivatives of a non-rational NURBS curve
            </summary>
            <param name="num_ders">Number of times to derivate.</param>
            <param name="u">Parameter to evaluate the derivatives at.</param>
            <param name="crv"></param>
            <returns>Derivatives of the curve at u.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.CartesianSurfacePoint(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS surface
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Resulting point on the surface at (u, v).</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.HomogeneousSurfacePoint(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate point on a nonrational NURBS surface
            </summary>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <param name="srf">The surface.</param>
            <returns>Resulting point on the surface at (u, v).</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.SurfaceTangent(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,System.Double,CGALDotNetGeometry.Numerics.Vector3d@,CGALDotNetGeometry.Numerics.Vector3d@)">
            <summary>
            Evaluate the two orthogonal tangents of a non-rational surface at the given
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter in the u-direction</param>
            <param name="v">Parameter in the v-direction</param>
            <param name="du"></param>
            <param name="dv"></param>
            <returns>Tuple with unit tangents along u- and v-directions</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.SurfaceNormal(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,System.Double)">
            <summary>
            Evaluate the normal a non-rational surface at the given parameters
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter in the u-direction</param>
            <param name="v">Parameter in the v-direction</param>
            <returns>Unit normal at of the surface at (u, v)</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.SurfaceDerivatives(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Int32,System.Double,System.Double)">
            <summary>
            Evaluate derivatives on a non-rational NURBS surface
            </summary>
            <param name="srf">Surface object</param>
            <param name="num_ders">Number of times to differentiate</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Derivatives of the surface at (u, v).</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsEval.HomogeneousSurfaceDerivatives(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Int32,System.Double,System.Double)">
            <summary>
            Evaluate derivatives on a non-rational NURBS surface
            </summary>
            <param name="srf">The surface.</param>
            <param name="num_ders">Number of times to differentiate.</param>
            <param name="u">Parameter to evaluate the surface at.</param>
            <param name="v">Parameter to evaluate the surface at.</param>
            <returns>Derivatives of the surface at (u, v).</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.FromPoints(System.Int32,System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            0) build knot vector for curve by normalized chord length
            1) construct effective basis function in square matrix
            2) construct set of coordinattes to interpolate vector
            3) set of control points
            4) solve in all 3 dimensions
            </summary>
            <param name="degree">The degree of the curve.</param>
            <param name="points">The points to interp curve from.</param>
            <returns>A curve that passes through all the points.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.BezierCurve(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Create a bezier curve from the control points.
            </summary>
            <param name="controlPoints">Points in counter-clockwise form.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.RationalBezierCurve(System.Collections.Generic.IList{CGALDotNetGeometry.Numerics.HPoint2d})">
            <summary>
            Create a rational bezier curve from the control points and weights.
            </summary>
            <param name="controlPoints">Points in counter-clockwise form.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.Circle(CGALDotNetGeometry.Numerics.Point2d,System.Double)">
            <summary>
            Create an Circle.
            </summary>
            <param name="center"></param>
            <param name="radius">the radius</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.Arc(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double,System.Double)">
            <summary>
            Create an Arc.
            </summary>
            <param name="center"></param>
            <param name="radius">the radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.Ellipse(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double)">
            <summary>
            Create an Ellipse.
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.EllipseArc(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an EllipseArc.
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.EllipseArc(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double,System.Double,System.Double,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Vector2d)">
            <summary>
            Generate the control points, weights, and knots of an elliptical arc.
            (Corresponds to Algorithm A7.1 from Piegl and Tiller)
            </summary>
            <param name="center"></param>
            <param name="xradius">the x radius</param>
            <param name="yradius">the y radius</param>
            <param name="startAngle">start angle of the ellipse arc, between 0 and 2pi, where 0 points at the xaxis</param>
            <param name="endAngle">end angle of the arc, between 0 and 2pi, greater than the start angle</param>
            <param name="xaxis">the x axis</param>
            <param name="yaxis">the y axis</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsMake.IntersectRays(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Vector2d,CGALDotNet.Nurbs.NurbsMake.CurveCurveIntersection@)">
            <summary>
            Find the closest parameter on two rays, see http://geomalgorithms.com/a07-_distance.html
            </summary>
            <param name="a0">origin for ray 1</param>
            <param name="a">direction of ray 1, assumed normalized</param>
            <param name="b0">origin for ray 2</param>
            <param name="b">direction of ray 2, assumed normalized</param>
            <param name="result">The intersection result.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.CurveKnotInsert(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double,System.Int32)">
            <summary>
            Insert knots in the curve
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to insert knot at</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New curve with repeat knots inserted at u</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.CurveSplit(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double,CGALDotNet.Nurbs.NurbsCurveParams2d@,CGALDotNet.Nurbs.NurbsCurveParams2d@)">
            <summary>
            Split a curve into two
            </summary>
            <param name="crv">Curve object</param>
            <param name="u">Parameter to split at</param>
            <param name="leftParam"></param>
            <param name="rightParam"></param>
            <returns>Tuple with first half and second half of the curve</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.CurveKnotInsert(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double,System.Int32,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.HPoint2d}@)">
            <summary>
             Insert knots in the curve
            </summary>
            <param name="crv">The curve to insert knots</param>
            <param name="u">Parameter to insert knot(s) at</param>
            <param name="r">Number of times to insert knot</param>
            <param name="new_knots">Updated knot vector</param>
            <param name="new_cp">Updated control pointss</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.CurveSplit(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.HPoint2d}@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.HPoint2d}@)">
            <summary>
            Split the curve into two
            </summary>
            <param name="crv"></param>
            <param name="u"></param>
            <param name="left_knots"></param>
            <param name="left_control_points"></param>
            <param name="right_knots"></param>
            <param name="right_control_points"></param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.SurfaceKnotInsertU(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert knots in the surface along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Knot value to insert</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New Surface object after knot insertion</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.SurfaceKnotInsertV(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert knots in the surface along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="v">Knot value to insert</param>
            <param name="repeat">Number of times to insert</param>
            <returns>New Surface object after knot insertion</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.SurfaceSplitU(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,CGALDotNet.Nurbs.NurbsSurfaceParams3d@,CGALDotNet.Nurbs.NurbsSurfaceParams3d@)">
            <summary>
            Split a surface into two along u-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="u">Parameter along u-direction to split the surface</param>
            <param name="leftParam"></param>
            <param name="rightParam"></param>
            <returns>Tuple with first and second half of the surfaces</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.SurfaceSplitV(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,CGALDotNet.Nurbs.NurbsSurfaceParams3d@,CGALDotNet.Nurbs.NurbsSurfaceParams3d@)">
            <summary>
            Split a surface into two along v-direction
            </summary>
            <param name="srf">Surface object</param>
            <param name="v">Parameter along v-direction to split the surface</param>
            <param name="leftParam"></param>
            <param name="rightParam"></param>
            <returns>Tuple with first and second half of the surfaces</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.SurfaceKnotInsert(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,System.Int32,System.Boolean,System.Collections.Generic.List{System.Double}@,CGALDotNetGeometry.Numerics.HPoint3d[0:,0:]@)">
            <summary>
            Insert knots in the surface along one direction.
            </summary>
            <param name="srf"></param>
            <param name="knot"></param>
            <param name="r"></param>
            <param name="along_u"></param>
            <param name="new_knots"></param>
            <param name="new_cp"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsModify.SurfaceSplit(CGALDotNet.Nurbs.BaseNurbsSurface3d,System.Double,System.Boolean,System.Collections.Generic.List{System.Double}@,CGALDotNetGeometry.Numerics.HPoint3d[0:,0:]@,System.Collections.Generic.List{System.Double}@,CGALDotNetGeometry.Numerics.HPoint3d[0:,0:]@)">
            <summary>
            
            </summary>
            <param name="srf">The surface.</param>
            <param name="u">Parameter to split curve</param>
            <param name="along_u">Whether the direction to split along is the u-direction</param>
            <param name="left_knots">Knots of the left part of the curve</param>
            <param name="left_control_points">Control points of the left part of the curve</param>
            <param name="right_knots">Knots of the right part of the curve</param>
            <param name="right_control_points">Control points of the right part of the curve</param>
        </member>
        <member name="T:CGALDotNet.Nurbs.BaseNurbsSurface3d">
            <summary>
            Class for representing a non-rational NURBS surface
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsSurface3d.IsRational">
            <summary>
            Is the surface rational.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsSurface3d.DegreeU">
            <summary>
            The degree on the first dimension.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsSurface3d.DegreeV">
            <summary>
            The degree on the second dimension.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsSurface3d.KnotsU">
            <summary>
            The knots on the first dimension.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.BaseNurbsSurface3d.KnotsV">
            <summary>
            The knots on the second dimension.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.GetCartesianControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.GetHomogeneousControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.SetCartesianControlPoint(System.Int32,System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.CartesianPoint(System.Double,System.Double)">
            <summary>
            Get the point at parameter u,v.
            </summary>
            <param name="u">The u parameter.</param>
            <param name="v">The v parameter.</param>
            <returns>The point at u,v.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.GetCartesianPoints(System.Int32,CGALDotNetGeometry.Numerics.Point3d[0:,0:])">
            <summary>
            Get a array of points.
            </summary>
            <param name="samples">The number of samples.</param>
            <param name="points">The points array that has a width 
            and height of the number of samples.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.Tangent(System.Double,System.Double,CGALDotNetGeometry.Numerics.Vector3d@,CGALDotNetGeometry.Numerics.Vector3d@)">
            <summary>
            Get the tangent at parameter u,v.
            </summary>
            <param name="u">The v parameter.</param>
            <param name="v">The v parameter.</param>
            <param name="tu">The u parameters tangent.</param>
            <param name="tv">The v parameters tangent.</param>
            <returns>The tanget at u,v.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.Normal(System.Double,System.Double)">
            <summary>
            Get the normal at parameter u,v.
            </summary>
            <param name="u">The u parameter.</param>
            <param name="v">The v parameter.</param>
            <returns>The normal at u,v.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.GetNormals(System.Int32,CGALDotNetGeometry.Numerics.Vector3d[0:,0:])">
            <summary>
            Get a array of normals.
            </summary>
            <param name="samples">The number of samples</param>
            <param name="normals">The normal array that is same size as the number of samples.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.Translate(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Translate the triangulation.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.Rotate(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Rotate the triangulation.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.Scale(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Scale the triangulation.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.NormalizeKnotsU">
            <summary>
            Normlize the surfaces u knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.NormalizeKnotsV">
            <summary>
            Normlize the surfaces v knots so the first knot starts at 0
            and the last knot ends at 1.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.InsertKnotU(CGALDotNet.Nurbs.NurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the surface and return as a new surface.
            </summary>
            <param name="srf">The surface to insert the knot into.</param>
            <param name="u">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new surface with the inserted knots.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.BaseNurbsSurface3d.InsertKnotV(CGALDotNet.Nurbs.NurbsSurface3d,System.Double,System.Int32)">
            <summary>
            Insert a new knot into the surface and return as a new surface.
            </summary>
            <param name="srf">The surface to insert the knot into.</param>
            <param name="v">The parameter to insert the knot at.</param>
            <param name="repeat">The number of times to repeat the knot.</param>
            <returns>A new surface with the inserted knots.</returns>
        </member>
        <member name="T:CGALDotNet.Nurbs.NurbsSurface3d">
            <summary>
            Class for representing a non-rational NURBS surface
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.Point3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.HPoint3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="P:CGALDotNet.Nurbs.NurbsSurface3d.IsRational">
            <summary>
            Is the surface rational.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.NurbsSurface3d.DegreeU">
            <summary>
            The degree on the first dimension.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.NurbsSurface3d.DegreeV">
            <summary>
            The degree on the second dimension.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.GetCartesianControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.GetHomogeneousControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.SetCartesianControlPoint(System.Int32,System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.SplitU(CGALDotNet.Nurbs.NurbsSurface3d,System.Double,CGALDotNet.Nurbs.NurbsSurface3d@,CGALDotNet.Nurbs.NurbsSurface3d@)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="u"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsSurface3d.SplitV(CGALDotNet.Nurbs.NurbsSurface3d,System.Double,CGALDotNet.Nurbs.NurbsSurface3d@,CGALDotNet.Nurbs.NurbsSurface3d@)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="v"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="T:CGALDotNet.Nurbs.RationalNurbsSurface3d">
            <summary>
            Class for representing a non-rational NURBS surface
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.Point3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.Point3d[0:,0:],System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="degree_u"></param>
            <param name="degree_v"></param>
            <param name="knots_u"></param>
            <param name="knots_v"></param>
            <param name="control_points"></param>
            <param name="weights"></param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},CGALDotNetGeometry.Numerics.HPoint3d[0:,0:])">
            <summary>
            Create a new surface.
            </summary>
            <param name="degree_u">The degree on the first dimension.</param>
            <param name="degree_v">The degree on the second dimension.</param>
            <param name="knots_u">The knots on the first dimension.</param>
            <param name="knots_v">The knots on the second dimension.</param>
            <param name="control_points">The control points in cartesion coordinates.</param>
        </member>
        <member name="P:CGALDotNet.Nurbs.RationalNurbsSurface3d.IsRational">
            <summary>
            Is the surface rational.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.RationalNurbsSurface3d.DegreeU">
            <summary>
            The degree on the first dimension.
            </summary>
        </member>
        <member name="P:CGALDotNet.Nurbs.RationalNurbsSurface3d.DegreeV">
            <summary>
            The degree on the second dimension.
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.GetCartesianControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.GetHomogeneousControlPoint(System.Int32,System.Int32)">
            <summary>
            Get the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <returns>The control point in cartesian coordinates.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.GetCartesianControlPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Get the control points
            </summary>
            <param name="points">The list to copy the points into.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.SetCartesianControlPoint(System.Int32,System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the control point.
            </summary>
            <param name="i">The points first index.</param>
            <param name="j">The points second index.</param>
            <param name="point">The control point in cartesian coordinates.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.SplitU(CGALDotNet.Nurbs.RationalNurbsSurface3d,System.Double,CGALDotNet.Nurbs.RationalNurbsSurface3d@,CGALDotNet.Nurbs.RationalNurbsSurface3d@)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="u"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:CGALDotNet.Nurbs.RationalNurbsSurface3d.SplitV(CGALDotNet.Nurbs.RationalNurbsSurface3d,System.Double,CGALDotNet.Nurbs.RationalNurbsSurface3d@,CGALDotNet.Nurbs.RationalNurbsSurface3d@)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="v"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsTess.GetCartesianPoints(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves points in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="points">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsTess.GetTangents(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Vector2d},System.Double,System.Double,System.Int32)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="tangents">The list of sampled points.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsTess.GetNormals(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Vector2d},System.Double,System.Double,System.Int32,System.Boolean)">
            <summary>
            Sample a curves tangents in a range of equally spaced parametric intervals.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <param name="normals">The list of sampled points.</param>
            <param name="ccw"></param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsTess.EstimateLength(CGALDotNet.Nurbs.BaseNurbsCurve2d,System.Double,System.Double,System.Int32)">
            <summary>
            Estimate the length of the curve.
            </summary>
            <param name="curve">NurbsCurveData object</param>
            <param name="start">start parameter for sampling</param>
            <param name="end">end parameter for sampling</param>
            <param name="numSamples">integer number of samples</param>
            <returns>The curves estmated length.</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsTess.GetCartesianPoints(CGALDotNet.Nurbs.BaseNurbsSurface3d,CGALDotNetGeometry.Numerics.Point3d[0:,0:],System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="points"></param>
            <param name="startU"></param>
            <param name="endU"></param>
            <param name="numSamplesU"></param>
            <param name="startV"></param>
            <param name="endV"></param>
            <param name="numSamplesV"></param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsTess.GetNormals(CGALDotNet.Nurbs.BaseNurbsSurface3d,CGALDotNetGeometry.Numerics.Vector3d[0:,0:],System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="srf"></param>
            <param name="normals"></param>
            <param name="startU"></param>
            <param name="endU"></param>
            <param name="numSamplesU"></param>
            <param name="startV"></param>
            <param name="endV"></param>
            <param name="numSamplesV"></param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsUtil.Copy``1(``0[])">
            <summary>
            Create a shallow copy of the array.
            </summary>
            <typeparam name="T">The arrays type</typeparam>
            <param name="array">The array to copy.</param>
            <returns>The copied array</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsUtil.Copy``1(``0[0:,0:])">
            <summary>
            Create a shallow copy of the array.
            </summary>
            <typeparam name="T">The arrays type</typeparam>
            <param name="array">The array to copy.</param>
            <returns>The copied array</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsUtil.Copy``1(``0[0:,0:,0:])">
            <summary>
            Create a shallow copy of the array.
            </summary>
            <typeparam name="T">The arrays type</typeparam>
            <param name="array">The array to copy.</param>
            <returns>The copied array</returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsUtil.AddRange``1(System.Collections.Generic.List{``0},System.Int32,``0)">
            <summary>
            Add the item to the list a number of times.
            </summary>
            <typeparam name="T">The lists type</typeparam>
            <param name="list">The list to add to.</param>
            <param name="count">The number of items to added</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsUtil.ToVector(CGALDotNetGeometry.Numerics.HPoint3d[0:,0:])">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsUtil.ToVector(CGALDotNetGeometry.Numerics.Point3d[0:,0:])">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsUtil.Binomial(System.Int32,System.Int32)">
            <summary>
            Compute the binomial coefficient
            </summary>
        </member>
        <member name="M:CGALDotNet.Nurbs.NurbsUtil.MapToRange(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Map numbers from one interval to another
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.Polygon2`1">
            <summary>
            Generic polygon definition.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            Create from a set of points.
            </summary>
            <param name="points">The polygons points.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.#ctor(System.IntPtr)">
            <summary>
            Create from a pointer.
            </summary>
            <param name="ptr">The polygons pointer.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.ToString">
            <summary>
            The polygon as a string.
            </summary>
            <returns>The polygon as a string.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Copy">
            <summary>
            Copy the polygon.
            </summary>
            <returns>The copied polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Triangulate(System.Collections.Generic.List{System.Int32})">
            <summary>
            Triangulate the polygon.
            </summary>
            <param name="indices">The triangle indices.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Intersects(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Do the polygons intersect.
            </summary>
            <param name="polygon">The other polygon.</param>
            <returns>Do the polygons intersect.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Intersects(CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Do the polygons intersect.
            </summary>
            <param name="polygon">The other polygon.</param>
            <returns>Do the polygons intersect.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Refine(System.Double)">
            <summary>
            Refine the polygon to a triangulation.
            Does not modify this polygon.
            </summary>
            <param name="lengthBounds">Upper bound on the length of the longest edge.</param>
            <returns>The base triangulation.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Refine(System.Double,System.Double)">
            <summary>
            Refine the polygon to a triangulation.
            Does not modify this polygon.
            </summary>
            <param name="angleBounds">Default shape bound. 0.125 corresponds to abound 20.6 degree. Max 0.125 value.</param>
            <param name="lengthBounds">Upper bound on the length of the longest edge.</param>
            <returns>The base triangulation.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Partition(System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}},CGALDotNet.Polygons.POLYGON_PARTITION)">
            <summary>
            Partition the polygon into convex pieces.
            Does not modify this polygon.
            </summary>
            <param name="results">The convex partition.</param>
            <param name="type">The type of partition method.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Simplify(System.Double)">
            <summary>
            Simplify the polygon.
            </summary>
            <param name="threshold">The simplification threshold.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Simplify(CGALDotNet.Polygons.PolygonSimplificationParams)">
            <summary>
            Simplify the polygon.
            </summary>
            <param name="param">The simplification parameters.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.Offset(CGALDotNet.Polygons.OFFSET,System.Double,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            offset the polygon. Does not modify this polygon.
            </summary>
            <param name="offset">The type of offset.</param>
            <param name="amount">The amount to offset.</param>
            <param name="results">The offset results.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2`1.ToPolyhedron3(System.Boolean)">
            <summary>
            Create a polyhedron3 mesh with one polygon face.
            </summary>
            <param name="xz">Should the y coord of the points be used for the z coord.</param>
            <returns>The new polyhedron mesh</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the polygon is not simple.</exception>
        </member>
        <member name="T:CGALDotNet.Polygons.Polygon2">
            <summary>
            The abstract polygon definition.
            </summary>
        </member>
        <member name="F:CGALDotNet.Polygons.Polygon2.m_isSimple">
            <summary>
            Is the polygon simple.
            Must be updated to find if simple.
            </summary>
        </member>
        <member name="F:CGALDotNet.Polygons.Polygon2.m_orientation">
            <summary>
            The polygons orientation.
            Must be updated to find orientation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polygon kernel.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polygon kernel.</param>
            <param name="points">The points to construct from.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polygon kernel.</param>
            <param name="ptr">The polygons pointer.</param>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.Count">
            <summary>
            The number of points in the polygon.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.Capacity">
            <summary>
            The capacity of the point array.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.IsSimple">
            <summary>
            Is this a simple polygon.
            Certains actions can only be carried out on simple polygons.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.Orientation">
            <summary>
            The polygons orientation.
            Certain actions depend on the polygons orientation.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.ClockDir">
            <summary>
            The orientation expressed as the clock direction.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.IsDegenerate">
            <summary>
            Is the polygon degenerate.
            Polygons with less than 3 points are degenerate.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.IsClockWise">
            <summary>
            Is the polygon cw orientated.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.IsCounterClockWise">
            <summary>
            Is the polygon ccw orientated.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.IsUpdated">
            <summary>
            Is the polygon updated.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.Kernel">
            <summary>
            The polygons kernel.
            Contains the functions to the unmanaged CGAL polygon.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.Polygon2.Item(System.Int32)">
            <summary>
            Array accessor for the polygon.
            Getting a point wraps around the polygon.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.SetIsUpdatedToFalse">
            <summary>
            Mark th mesh as needing to be updated.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.IsValid">
            <summary>
            Valid polygons should be simple and ccw 
            for most algorithms to work on them.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.IsValidHole">
            <summary>
            Valid hole polygons should be simple
            and cw to add to a polygon with holes.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Clear">
            <summary>
            Clear the polygon of all points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.ShrinkToCapacityToFitCount">
            <summary>
            Shrink the capacity to match the point count.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Resize(System.Int32)">
            <summary>
            Resize the point array.
            New elements will default to zero.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Remove(System.Int32)">
            <summary>
            Remove the point at the index from the array.
            </summary>
            <param name="index">The points index</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Remove(System.Int32,System.Int32)">
            <summary>
            Remove a range of points from the array.
            </summary>
            <param name="start">The starting index</param>
            <param name="count">The number of points to remove.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Insert(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Remove the point at the index from the array.
            </summary>
            <param name="index">The points index.</param>
            <param name="point">The point to insert.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Insert(System.Int32,CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Remove a range of points from the array.
            </summary>
            <param name="start">The starting index</param>
            <param name="points">The points to insert.</param>
            <param name="count">The number of points to insert.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.ShrinkCapacityToFitCount">
            <summary>
            Shrink the capacity to match the point count.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Add(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Add the point to the end of the poylgon.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.GetPoint(System.Int32)">
            <summary>
            Get the point a the index.
            </summary>
            <param name="index">The points index to get.</param>
            <returns>The point at index.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.GetPointWrapped(System.Int32)">
            <summary>
            Get the point at the index
            and wrap around the polygon.
            </summary>
            <param name="index">The points index.</param>
            <returns>The point at the index.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.GetPointClamped(System.Int32)">
            <summary>
            Get the point at the index
            and clamp to the polygons last point.
            </summary>
            <param name="index">The points index.</param>
            <returns>The point at the index.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.GetPoints(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Get all the points in the polygon.
            </summary>
            <param name="points">The point array to copy the data into.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.GetPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get all the polygon points.
            </summary>
            <param name="points">The list to copy the data into.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Triangulate(System.Collections.Generic.List{System.Int32})">
            <summary>
            Triangulate the polygon.
            </summary>
            <param name="indices">The triangle indices.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.GetSegments(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Get all the polygon segments.
            </summary>
            <param name="segments">The segment array to copy the data into.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.SetPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Set the points at the index.
            </summary>
            <param name="index">The points index.</param>
            <param name="point">The points value.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.SetPoints(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Set the points from the array.
            If the array is larger than the polygon then 
            the new points will be appended to end of polygon.
            </summary>
            <param name="points">The points array.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Reverse">
            <summary>
            Reverse the polygon.
            Swithches the orientation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.FindBoundingBox">
            <summary>
            Find the bounding box for the polygon.
            </summary>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.FindIfSimple">
            <summary>
            Find if the polygon is simple.
            </summary>
            <returns>True if simple.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.FindIfConvex">
            <summary>
            Find if the polygon is convex.
            Must be simple to determine.
            </summary>
            <returns>True if the polygon is convex.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.FindOrientation">
            <summary>
            Find the polygons orientation.
            Must be simple to determine.
            </summary>
            <returns>The polygons orientations.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.OrientedSide(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Find the orientated side the point lies on.
            Must be simple to determine.
            </summary>
            <param name="point">The point.</param>
            <returns>The orientated side of the polygon the point is on.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.BoundedSide(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Find the bounded side the point lies on.
            Must be simple to determine.
            </summary>
            <param name="point">The point.</param>
            <returns>The bounded side of the polygon the point is on.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.FindSignedArea">
            <summary>
            Find the polygons signed area. 
            Must be simple to determine.
            </summary>
            <returns>The signed area is positive if polygon is ccw 
            and negation if cw.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.FindArea">
            <summary>
            The area of the polygon.
            Must be simple to determine.
            </summary>
            <returns>The abs of the signed area.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.FindPerimeter">
            <summary>
            Find the perimeter.
            This is the length of the polygon boundary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.FindSquarePerimeter">
            <summary>
            Find the square perimeter.
            This is the square length of the polygon boundary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.ContainsPoint(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does the polygon contain the points.
            Must be simple to determine.
            </summary>
            <param name="point">The point to find.</param>
            <param name="inculdeBoundary">Does the point on the boundary count</param>
            <returns>True if the point is inside the polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Translate(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Translate the polygon.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Rotate the polygon.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Scale(System.Double)">
            <summary>
            Scale the polygon.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the polygon with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.GetEnumerator">
            <summary>
            Enumerate all points in the polygon.
            </summary>
            <returns>Each point in polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all points in the polygon.
            </summary>
            <returns>Each point in polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.ToArray">
            <summary>
            Return all the points in the polygon in a array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.ToList">
            <summary>
            Return all the points in the polygon in a list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Convert``1">
            <summary>
            Convert the polygon to a new polygon with a different kernel.
            May result in different values due to precision issues.
            </summary>
            <typeparam name="T">The new kernel type.</typeparam>
            <returns>The new polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Print(System.Text.StringBuilder)">
            <summary>
            Print the polygon into a styring builder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.ReleasePtr">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.ReleasePtr(System.IntPtr)">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Update">
            <summary>
            Update the polygon if needed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.Polygon2.Update(System.Boolean,CGALDotNet.ORIENTATION)">
            <summary>
            Update the polygon directly without calling the update
            function.
            </summary>
            <param name="isSimple">Is the polygon simepl.</param>
            <param name="orientation">The polygons orientation.</param>
        </member>
        <member name="F:CGALDotNet.Polygons.PolygonAlgorithm.CheckInput">
            <summary>
            Should the input polygon be checked.
            Can disable for better performance if 
            it is know all input if valid.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonAlgorithm.CheckPolygon(CGALDotNet.Polygons.Polygon2)">
            <summary>
            Check if the polygon is valid to offset.
            Should be simple and ccw.
            </summary>
            <param name="polygon">The polygon to check.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonAlgorithm.CheckPolygon(CGALDotNet.Polygons.PolygonWithHoles2)">
            <summary>
            Check if the polygon is valid to offset.
            Should be simple and ccw.
            </summary>
            <param name="polygon">The polygon to check.</param>
        </member>
        <member name="T:CGALDotNet.Polygons.POLYGON_BOOLEAN">
            <summary>
            The type of boolean ops.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonBoolean2`1">
            <summary>
            Generic polygon boolean class.
            </summary>
            <typeparam name="K">The type of kernel</typeparam>
        </member>
        <member name="F:CGALDotNet.Polygons.PolygonBoolean2`1.Instance">
            <summary>
            A static instance to the boolean class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.#ctor">
            <summary>
            Create a new object.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Op(CGALDotNet.Polygons.POLYGON_BOOLEAN,CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            Perform the boolean op on the two polygons.
            </summary>
            <param name="op">The type of op.</param>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The result of the op.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Op(CGALDotNet.Polygons.POLYGON_BOOLEAN,CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            Perform the boolean op on the two polygons.
            </summary>
            <param name="op">The type of op.</param>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The result of the op.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Op(CGALDotNet.Polygons.POLYGON_BOOLEAN,CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            Perform the boolean op on the two polygons.
            </summary>
            <param name="op">The type of op.</param>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The result of the op.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.DoIntersect(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Check if the polygons intesect.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <returns>If the polygons intesect.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.DoIntersect(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Check if the polygons intesect.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <returns>If the polygons intesect.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.DoIntersect(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Check if the polygons intesect.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <returns>If the polygons intesect.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Join(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The union of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The union of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Join(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The union of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The union of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Join(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The union of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The union of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Intersect(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The intersection of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The intersection of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Intersect(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The intersection of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The intersection of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Intersect(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The intersection of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The intersection of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Difference(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The difference of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The difference of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Difference(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The difference of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The difference of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Difference(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The difference of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The difference of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.SymmetricDifference(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The symmetric difference of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The symmetric difference of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.SymmetricDifference(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The symmetric difference of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The symmetric difference of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.SymmetricDifference(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The symmetric difference of the two polygons.
            </summary>
            <param name="polygon1">A simple ccw polygon.</param>
            <param name="polygon2">A simple ccw polygon.</param>
            <param name="result">The symmetric difference of the polygons.</param>
            <returns>If the op was performed and the result list changed.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.Complement(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            The complement of the polygon.
            </summary>
            <param name="polygon">A simple ccw polygon.</param>
            <param name="result">The complement of the polygon.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.CopyBuffer(System.Int32,System.Collections.Generic.List{CGALDotNet.Polygons.PolygonWithHoles2{`0}})">
            <summary>
            Copy the unmanaged polygon objects created 
            into the result list.
            </summary>
            <param name="count">The number of objects in the buffer.</param>
            <param name="result">The result lis.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2`1.CopyBufferItem(System.Int32)">
            <summary>
            Copy the unmanaged polygon object.
            </summary>
            <param name="index">The index of the polygon in the buffer.</param>
            <returns>The polygon copy.</returns>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonBoolean2">
            <summary>
            Abstract base class for polygon boolean.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonBoolean2.Kernel">
            <summary>
            The polygon boolean kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2.ClearBuffer">
            <summary>
            Clear the unmanaged buffer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonBoolean2.ReleasePtr">
            <summary>
            Release the unmanaged resourses.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonFactory`1">
            <summary>
            Factory for creating polygons.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.Create">
            <summary>
            Create a empty polygon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateTriangle(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Create a polygon from a triangle.
            </summary>
            <param name="a">The triangle first point.</param>
            <param name="b">The triangle second point.</param>
            <param name="c">The triangle third point.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns>The created polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateTriangle(CGALDotNetGeometry.Shapes.Triangle2d,System.Boolean)">
            <summary>
            Create a polygon from a triangle.
            </summary>
            <param name="tri">The triangle.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns>The created polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateBox(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Create a polygon from a box.
            </summary>
            <param name="min">The boxs min point.</param>
            <param name="max">The boxs max point.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns>The created polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateBox(System.Double,System.Double,System.Boolean)">
            <summary>
            Create a polygon from a box.
            </summary>
            <param name="min">The boxs min point.</param>
            <param name="max">The boxs max point.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns>The created polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateBox(CGALDotNetGeometry.Shapes.Box2d,System.Boolean)">
            <summary>
            Create a polygon from a box.
            </summary>
            <param name="box">The box.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns>The created polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateDounut(System.Double,System.Double,System.Int32)">
            <summary>
            Create a polygon from a dounut.
            Outer radius must be greater than inner.
            </summary>
            <param name="outer">The outer radius.</param>
            <param name="inner">The inner radius</param>
            <param name="segments">The number of segments.</param>
            <returns>The created polygon with holes</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateDounut(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Double,System.Int32)">
            <summary>
            Create a polygon from a dounut.
            Outer radius must be greater than inner.
            </summary>
            <param name="center">The center position of the polygon.</param>
            <param name="outer">The outer radius.</param>
            <param name="inner">The inner radius</param>
            <param name="segments">The number of segments.</param>
            <returns>The created polygon with holes</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateCircle(System.Double,System.Int32,System.Boolean)">
            <summary>
            Create a polygon from a circle.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns>The polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateCircle(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Int32,System.Boolean)">
            <summary>
            Create a polygon from a circle.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="segments">The number of segments.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.CreateCircle(CGALDotNetGeometry.Shapes.Circle2d,System.Int32,System.Boolean)">
            <summary>
            Create a polygon from a circle.
            </summary>
            <param name="circle">The cirlce.</param>
            <param name="segments">The number of segments.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.KochStar(System.Double,System.Int32,System.Boolean)">
            <summary>
            https://rosettacode.org/wiki/Koch_curve#C.2B.2B
            </summary>
            <param name="size">The size of the polygon.</param>
            <param name="iterations">The number of times to sub divide.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.KochStar(CGALDotNetGeometry.Numerics.Point2d,System.Double,System.Int32,System.Boolean)">
            <summary>
            https://rosettacode.org/wiki/Koch_curve#C.2B.2B
            </summary>
            <param name="center">The stars center.</param>
            <param name="size">The size of the polygon.</param>
            <param name="iterations">The number of times to sub divide.</param>
            <param name="ccw">True for a counter clock wise polygon, false for a clock wise polygon</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonFactory`1.KochNext(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            https://rosettacode.org/wiki/Koch_curve#C.2B.2B
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Polygons.MINKOWSKI_DECOMPOSITION">
            <summary>
            Decomposition stratergy for polygons.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.MINKOWSKI_DECOMPOSITION_PWH">
            <summary>
            Decomposition stratergy for polygons with holes.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonMinkowski`1">
            <summary>
            Generic Minkowski class.
            </summary>
            <typeparam name="K">The type of kernel</typeparam>
        </member>
        <member name="F:CGALDotNet.Polygons.PolygonMinkowski`1.Instance">
            <summary>
            A static instance to the Minkowski class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.#ctor">
            <summary>
            Create a new object.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.Sum(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Compute the Minkowski sum of two polygons.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.Sum(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Compute the Minkowski sum of two polygons.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.Sum(CGALDotNet.Polygons.MINKOWSKI_DECOMPOSITION,CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Compute the Minkowski sum of two polygons.
            </summary>
            <param name="decomp">The decomposition method.</param>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.Sum(CGALDotNet.Polygons.MINKOWSKI_DECOMPOSITION_PWH,CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Compute the Minkowski sum of two polygons.
            </summary>
            <param name="decomp">The decomposition method.</param>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.SumSSAB(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            It is based on the angle-bisector decomposition method suggested by Chazelle and Dobkin [4],
            which runs in O(n2) time. In addition, it applies a heuristic by Flato that reduces the number
            of output polygons in many common cases. The convex decompositions that it produces usually 
            yield efficient running times for Minkowski sum computations. It starts by examining each pair 
            of reflex vertices in the input polygon, such that the entire interior of the diagonal 
            connecting these vertices is contained in the polygon. Out of all available pairs, the vertices
            pi and pj are selected, such that the number of reflex vertices encountered when traversing 
            the boundary of the polygon from pi to pj in clockwise order is minimal. The polygon is split 
            by the diagonal pipj. This process is repeated recursively on both resulting sub-polygons. 
            In case it is not possible to eliminate two reflex vertices at once any more, each reflex 
            vertex is eliminated by a diagonal that is closest to the angle bisector emanating from this 
            vertex and having rational-coordinate endpoints on both sides.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.SumOptimalConvex(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Uses the dynamic-programming algorithm of Greene [6] for computing an optimal decomposition of 
            a polygon into a minimal number of convex sub-polygons. While this algorithm results in a small
            number of convex polygons, it consumes rather many resources, as it runs in O(n4) time and O(n3) 
            space in the worst case, where n is the number of vertices in the input polygon.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.SumHertelMehlhorn(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
             Implements the approximation algorithm suggested by Hertel and Mehlhorn [8], which triangulates 
             the input polygon and then discards unnecessary triangulation edges. After triangulation (carried 
             out by the constrained-triangulation procedure of CGAL) the algorithm runs in O(n) time and space,
             and guarantees that the number of sub-polygons it generates is not more than four times the optimum.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.SumGreeneConvex(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Implementation of Greene's approximation algorithm [6], which computes a convex decomposition of the 
            polygon based on its partitioning into y-monotone polygons. This algorithm runs in O(nlogn) time and 
            O(n) space, and has the same guarantee on the quality of approximation as Hertel and Mehlhorn's algorithm.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.SumVertical(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Uses vertical decomposition to decompose the underlying arrangement.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.SumVertical(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Uses vertical decomposition to decompose the underlying arrangement.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.SumTriangle(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Uses constrained triangulation to decompose the input polygons, which may have holes, into triangles.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski`1.SumTriangle(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Uses constrained triangulation to decompose the input polygons, which may have holes, into triangles.
            </summary>
            <param name="polygon"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonMinkowski">
            <summary>
            Abstract base class for polygon minkowski.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonMinkowski.Kernel">
            <summary>
            The polygon Minkowski kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonMinkowski.ReleasePtr">
            <summary>
            Release the unmanaged resourses.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonOffset2`1">
            <summary>
            The generic polgon offset class
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Polygons.PolygonOffset2`1.Instance">
            <summary>
            Static instance of polygon offset.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.#ctor">
            <summary>
            Create new polygon offset.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateOffset(CGALDotNet.Polygons.OFFSET,CGALDotNet.Polygons.Polygon2{`0},System.Double,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Create a interior or exterior offset.
            </summary>
            <param name="offset">The offset type</param>
            <param name="polygon">The polygon to offset.</param>
            <param name="amount">The offset amount</param>
            <param name="results">The offset polygon</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateOffset(CGALDotNet.Polygons.OFFSET,CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Double,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Create a interior or exterior offset.
            </summary>
            <param name="offset">The offset type</param>
            <param name="polygon">The polygon to offset.</param>
            <param name="amount">The offset amount</param>
            <param name="results">The offset polygon</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateInteriorOffset(CGALDotNet.Polygons.Polygon2{`0},System.Double,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Create a interior offset.
            </summary>
            <param name="polygon">The polygon to offset.</param>
            <param name="offset">The offset amount</param>
            <param name="results">The offset polygon</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateInteriorOffset(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Double,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Create a interior offset.
            </summary>
            <param name="polygon">The polygon to offset.</param>
            <param name="offset">The offset amount</param>
            <param name="results">The offset polygon</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateExteriorOffset(CGALDotNet.Polygons.Polygon2{`0},System.Double,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Create a exterior offset.
            </summary>
            <param name="polygon">The polygon to offset.</param>
            <param name="offset">The offset amount</param>
            <param name="results">The offset polygon</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateExteriorOffset(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Double,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Create a exterior offset.
            </summary>
            <param name="polygon">The polygon to offset.</param>
            <param name="offset">The offset amount</param>
            <param name="results">The offset polygon</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateInteriorSkeleton(CGALDotNet.Polygons.Polygon2{`0},System.Boolean,System.Collections.Generic.List{CGALDotNetGeometry.Shapes.Segment2d})">
            <summary>
            Create the interior skeleton of the polygon.
            </summary>
            <param name="polygon">The polygon to offset.</param>
            <param name="includeBorder">Should the polygon be included as the border.</param>
            <param name="results">The skeletons segments.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateInteriorSkeleton(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Boolean,System.Collections.Generic.List{CGALDotNetGeometry.Shapes.Segment2d})">
            <summary>
            Create the interior skeleton of the polygon.
            </summary>
            <param name="polygon">The polygon to offset.</param>
            <param name="includeBorder">Should the polygon be included as the border.</param>
            <param name="results">The skeletons segments.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateExteriorSkeleton(CGALDotNet.Polygons.Polygon2{`0},System.Double,System.Boolean,System.Collections.Generic.List{CGALDotNetGeometry.Shapes.Segment2d})">
            <summary>
            Create the exterior skeleton of the polygon.
            </summary>
            <param name="polygon">The polygon to offset.</param>
            <param name="maxOffset">The bounding boxes offset from the polygons edges. Must be > 0.</param>
            <param name="includeBorder">Should the polygon be included as the border.</param>
            <param name="results">The skeletons segments.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2`1.CreateExteriorSkeleton(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Double,System.Boolean,System.Collections.Generic.List{CGALDotNetGeometry.Shapes.Segment2d})">
            <summary>
            Create the exterior skeleton of the polygon.
            </summary>
            <param name="polygon">The polygon to offset.</param>
            <param name="maxOffset">The bounding boxes offset from the polygons edges. Must be > 0.</param>
            <param name="includeBorder">Should the polygon be included as the border.</param>
            <param name="results">The skeletons segments.</param>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonOffset2">
            <summary>
            The abstract polygon offset class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonOffset2.Kernel">
            <summary>
            The offset kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.PolygonBufferSize">
            <summary>
            Get the number off polygons in the buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.SegmentBufferSize">
            <summary>
            The size of the segment buffer.
            </summary>
            <returns>The number of segments in the buffer.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.GetBufferedPolygon(System.Int32)">
            <summary>
            Get the unmanaged point to the polygon at the buffer index
            </summary>
            <param name="index">The index in the buffer.</param>
            <returns>The pointer</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.GetBufferedSegment(System.Int32)">
            <summary>
            Get the segment from buffer.
            </summary>
            <param name="index">The segments index.</param>
            <returns>The segment.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.ClearPolygonBuffer">
            <summary>
            Clear the polygon buffer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.ClearSegmentBuffer">
            <summary>
            Clear the segment buffer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonOffset2.ReleasePtr">
            <summary>
            Release the unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.POLYGON_PARTITION">
            <summary>
            Type of polygon partitions.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonPartition2`1">
            <summary>
            Generic polygon partition class.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="F:CGALDotNet.Polygons.PolygonPartition2`1.Instance">
            <summary>
            Static instance of polygon partition.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.#ctor">
            <summary>
            Create new polygon partition.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.Is_Y_Monotone(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Is this polygon Y monotonic.
            </summary>
            <param name="polygon">The polygon.</param>
            <returns>True if y monotonic.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.Is_Y_Monotone(CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Is this polygon Y monotonic.
            </summary>
            <param name="polygon">The polygon.</param>
            <returns>True if y monotonic.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.Partition(CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition a polygon.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.Partition(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition a polygon.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.Partition(CGALDotNet.Polygons.POLYGON_PARTITION,CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition a polygon.
            </summary>
            <param name="type">The type of partition to perfrom.</param>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.Partition(CGALDotNet.Polygons.POLYGON_PARTITION,CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition a polygon.
            </summary>
            <param name="type">The type of partition to perfrom.</param>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.Y_Monotone(CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition in to Y monotonic polygons.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.Y_Monotone(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition in to Y monotonic polygons.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.ApproxConvex(CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition the polygon into convex polygons where the number of
            convex polygons produced is no more than four times the minimal number.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.ApproxConvex(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition the polygon into convex polygons where the number of
            convex polygons produced is no more than four times the minimal number.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.GreeneApproxConvex(CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition the polygon into convex polygons where the number of
            convex polygons produced is no more than four times the minimal number.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.GreeneApproxConvex(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition the polygon into convex polygons where the number of
            convex polygons produced is no more than four times the minimal number.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.OptimalConvex(CGALDotNet.Polygons.Polygon2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition the polygon into convex polygons where the number of 
            convex polygons produced is minimal.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.OptimalConvex(CGALDotNet.Polygons.PolygonWithHoles2{`0},System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Partition the polygon into convex polygons where the number of 
            convex polygons produced is minimal.
            </summary>
            <param name="polygon">The polygon to partition.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2`1.CopyBufferAndClear(System.Int32,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            Copy the new polygons into the result array
            and the clear the buffer.
            </summary>
            <param name="count">The number of polygons in buffer.</param>
            <param name="results">The resulting polygons.</param>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonPartition2">
            <summary>
            The abstract base class.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonPartition2.Kernel">
            <summary>
            The partition kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2.ClearBuffer">
            <summary>
            Clear the unmanaged buffer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonPartition2.ReleasePtr">
            <summary>
            Release the unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.POLYGON_SIMP_COST_FUNC">
            <summary>
            Cost options for simplification.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.POLYGON_SIMP_STOP_FUNC">
            <summary>
            Stop distance options for simplification.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonSimplificationParams">
            <summary>
            Paramaters for poylgon simplification.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonSimplificationParams.Default">
            <summary>
            The default param settings.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplificationParams.ToString">
            <summary>
            The param as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonSimplification2`1">
            <summary>
            Generic polygon simplification class.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="F:CGALDotNet.Polygons.PolygonSimplification2`1.Instance">
            <summary>
            Static instance of polygon simplification.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.Simplify(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.PolygonSimplificationParams)">
            <summary>
            Simplify the polygon.
            </summary>
            <param name="polygon">The polygon to simplify. Must be simple.</param>
            <param name="param">The simplification parameters.</param>
            <returns>The simplified polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.SimplifyPtr(CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.PolygonSimplificationParams)">
            <summary>
            Simplify the polygon.
            </summary>
            <param name="polygon">The polygon to simplify. Must be simple.</param>
            <param name="param">The simplification parameters.</param>
            <returns>The simplified polygon ptr.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.Simplify(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonSimplificationParams)">
            <summary>
            Simplify the polygons boundary and all the holes.
            </summary>
            <param name="polygon">The polygon to simplify. Must be simple.</param>
            <param name="param">The simplification parameters.</param>
            <returns>The simplified polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.SimplifyPtr(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonSimplificationParams)">
            <summary>
            Simplify the polygons boundary and all the holes.
            </summary>
            <param name="polygon">The polygon to simplify. Must be simple.</param>
            <param name="param">The simplification parameters.</param>
            <returns>The simplified polygons ptr.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.SimplifyBoundary(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonSimplificationParams)">
            <summary>
            Simplify the polygons boundary.
            </summary>
            <param name="polygon">The polygon to simplify. Must be simple.</param>
            <param name="param">The simplification parameters.</param>
            <returns>The simplified polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.SimplifyHoles(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonSimplificationParams)">
            <summary>
            Simplify the polygons holes.
            </summary>
            <param name="polygon">The polygon to simplify. Must be simple.</param>
            <param name="param">The simplification parameters.</param>
            <returns>The simplified polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2`1.SimplifyHole(CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonSimplificationParams,System.Int32)">
            <summary>
            Simplify one of the polygons holes.
            </summary>
            <param name="polygon">The polygon to simplify. Must be simple.</param>
            <param name="param">The simplification parameters.</param>
            <param name="index">The hole index to simplify.</param>
            <returns>The simplified polygon.</returns>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonSimplification2">
            <summary>
            Abstract polygon simplification class.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonSimplification2.Kernel">
            <summary>
            The simplification kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonSimplification2.ReleasePtr">
            <summary>
            Release unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonVisibility`1">
            <summary>
            The generic polgon visibility class
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Polygons.PolygonVisibility`1.Instance">
            <summary>
            Static instance of polygon visibility.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility`1.#ctor">
            <summary>
            Create new polygon visibility.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility`1.ComputeVisibility(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Polygons.Polygon2{`0},CGALDotNet.Polygons.Polygon2{`0}@)">
            <summary>
            Compute the visibility from a simple polygon with no holes.
            This class implements the algorithm of B.Joe and R.B.Simpson [4]. The algorithm is a modification
            and extension of the linear time algorithm of Lee [5]. It computes the visibility region from a 
            viewpoint that is in the interior or on the boundary of the polygon.
            While scanning the boundary the algorithm uses a stack to manipulate the vertices, and ultimately
            yields the visibility region.For each scanned edge, at most 2 points are pushed onto the stack.
            Overall, at most 2 n points are pushed or popped. Thus, the time and space complexities of the
            algorithm are O(n) even in case of degeneracies such as needles, where n is the number of the vertices of the polygon.
            </summary>
            <param name="point">The visibility point.</param>
            <param name="polygon">A simple polygon that contains the point.</param>
            <param name="result">The visibility result.</param>
            <returns>True if result was computed</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility`1.ComputeVisibility(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0}@)">
            <summary>
            Compute the visibility from a polygon with holes.
            </summary>
            <param name="point">The visibility point.</param>
            <param name="polygon">A polygon with holes that contains the point.</param>
            <param name="result">The visibility result.</param>
            <returns>True if result was computed</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility`1.ComputeVisibility(CGALDotNet.Polygons.POLYGON_VISIBILITY,CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0}@)">
            <summary>
            Compute the visibility from a polygon with holes.
            </summary>
            <param name="method">What method to use.</param>
            <param name="point">The visibility point.</param>
            <param name="polygon">A polygon with holes that contains the point.</param>
            <param name="result">The visibility result.</param>
            <returns>True if result was computed</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility`1.ComputeVisibilityTEV(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0}@)">
            <summary>
            Compute the visibility from a polygon with holes using the triangular expansion method.
            The algorithm does not require preprocessing. It relies on the algorithm of T. 
            Asano [1] based on angular plane sweep, with a time complexity of O(nlogn) in the number of vertices.
            </summary>
            <param name="point">The visibility point.</param>
            <param name="polygon">A polygon with holes that contains the point.</param>
            <param name="result">The visibility result.</param>
            <returns>True if result was computed</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility`1.ComputeVisibilityRSV(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Polygons.PolygonWithHoles2{`0},CGALDotNet.Polygons.PolygonWithHoles2{`0}@)">
            <summary>
            Compute the visibility from a polygon with holes using the rotational sweep method.
            The algorithm obtains a constrained triangulation from the input arrangement, then computes visibility by 
            expanding the triangle that contains the query point. Preprocessing takes O(n) time and O(n) space, where 
            n is the number of vertices of input polygon. The query time is O(nh), where h is the number of holes+1 of 
            input polygon. Thus, for simple polygons (or a polygon with a constant number of holes) the algorithm 
            complexity is linear, but it is O(n2) in the worst case, as the number of holes can be linear in n.
            </summary>
            <param name="point">The visibility point.</param>
            <param name="polygon">A polygon with holes that contains the point.</param>
            <param name="result">The visibility result.</param>
            <returns>True if result was computed</returns>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonVisibility">
            <summary>
            The abstract polygon visibility class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonVisibility.Kernel">
            <summary>
            The offset kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonVisibility.ReleasePtr">
            <summary>
            Release the unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.POLYGON_ELEMENT">
            <summary>
            Polygon with holes consists of a boundary and holes.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonWithHoles2`1">
            <summary>
            Generic polygon definition.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.#ctor">
            <summary>
            Default constuctor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.#ctor(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Construct polygon with the boundary.
            </summary>
            <param name="boundary">A CCW polygon.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            Construct polygon with the boundary points
            </summary>
            <param name="boundary">A CCW set of points.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.#ctor(System.IntPtr)">
            <summary>
            Create from a pointer.
            </summary>
            <param name="ptr">The polygons pointer.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.ToString">
            <summary>
            The polygon as a string.
            </summary>
            <returns>The polygon as a string.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Copy">
            <summary>
            Create a deep copy of the polygon.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Convert``1">
            <summary>
            Convert the polygon to a new polygon with a different kernel.
            May result in different values due to precision issues.
            </summary>
            <typeparam name="T">The new kernel type.</typeparam>
            <returns>The new polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Copy(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            Create a deep copy of the polygon element.
            </summary>
            <param name="element">The element type to copy.</param>
            <param name="index">If element os a hole thiss is the holes index.</param>
            <returns>The copy.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.GetBoundary">
            <summary>
            Get the boundary as a copy.
            If unbounded will return a empty polygon.
            </summary>
            <returns>A copy of the hole polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.GetHole(System.Int32)">
            <summary>
            Get the hole as a copy.
            </summary>
            <param name="index">The holes index</param>
            <returns>A copy of the hole polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.AddHole(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Add a polygon as a holes.
            Holes must simple and CW.
            </summary>
            <param name="polygon">The hole polygon.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.ToList">
            <summary>
            Create a copy of boundary and hole polygons.
            </summary>
            <returns>The list of polygons.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Triangulate(System.Collections.Generic.List{System.Int32})">
            <summary>
            Triangulate the polygon.
            </summary>
            <param name="indices">The triangle indices.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Intersects(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Do the polygons intersect.
            </summary>
            <param name="polygon">The other polygon.</param>
            <returns>Do the polygons intersect.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Intersects(CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Do the polygons intersect.
            </summary>
            <param name="polygon">The other polygon.</param>
            <returns>Do the polygons intersect.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.ConnectHoles">
            <summary>
            Connect all the holes of the polygon 
            and return as a polygon. 
            Will result in a non simple polygon.
            </summary>
            <returns>The connected non-simple polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Partition(System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}},CGALDotNet.Polygons.POLYGON_PARTITION)">
            <summary>
            Partition the polygon into convex pieces.
            </summary>
            <param name="results">The convex partition.</param>
            <param name="type">The type of partition method.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Simplify(System.Double)">
            <summary>
            Simplify the polygon.
            </summary>
            <param name="threshold">The simplification threshold.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Simplify(CGALDotNet.Polygons.PolygonSimplificationParams)">
            <summary>
            Simplify the polygon.
            </summary>
            <param name="param">The simplification parameters.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2`1.Offset(CGALDotNet.Polygons.OFFSET,System.Double,System.Collections.Generic.List{CGALDotNet.Polygons.Polygon2{`0}})">
            <summary>
            offset the polygon. Does not modify this polygon.
            </summary>
            <param name="offset">The type of offset.</param>
            <param name="amount">The amount to offset.</param>
            <param name="results">The offset results.</param>
        </member>
        <member name="T:CGALDotNet.Polygons.PolygonWithHoles2">
            <summary>
            The abstract polygon definition.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Construct polygon with the kernel.
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.#ctor(CGALDotNet.CGALKernel,CGALDotNet.Polygons.Polygon2)">
            <summary>
            Construct the polygon with the kernel and boundary.
            </summary>
            <param name="kernel"></param>
            <param name="boundary">A CCW polygon.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            Construct the polygon with the kernel and boundary.
            </summary>
            <param name="kernel"></param>
            <param name="boundary">A CCW set of points.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Construct the polygon with the kernel and pointer.
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.IsUnbounded">
            <summary>
            Is the polygon unbounded. 
            ie no boundary polygon has been set.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.IsBounded">
            <summary>
            Is the polygon bounded. 
            ie a boundary polygon has been set.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.Count">
            <summary>
            Number of points in the boindary polygon.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.HoleCount">
            <summary>
            The number of holes in polygon.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.IsSimple">
            <summary>
            Is this a simple polygon.
            Certains actions can only be carried out on simple polygons.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.Orientation">
            <summary>
            The polygons orientation.
            Certain actions depend on the polygons orientation.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.ClockDir">
            <summary>
            The orientation expressed as the clock direction.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.IsDegenerate">
            <summary>
            Is the polygon degenerate.
            Polygons with less than 3 points are degenerate.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.IsClockWise">
            <summary>
            Is the polygon cw orientated.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.IsCounterClockWise">
            <summary>
            Is the polygon ccw orientated.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polygons.PolygonWithHoles2.Kernel">
            <summary>
            The polygon kernel.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.IsValid">
            <summary>
            Valid polygon with holes must have a simple and ccw boundary
            and all holes must be simple and cw.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.IsValidHole(CGALDotNet.Polygons.PolygonWithHoles2,CGALDotNet.Polygons.Polygon2)">
            <summary>
            Valid holes must be simple, cw and must be contained
            within the boundary polygon.
            </summary>
            <param name="pwh"></param>
            <param name="hole"></param>
            <returns>True if the polygon is a valid hole.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Clear">
            <summary>
            Clear the polygon.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.ClearBoundary">
            <summary>
            Clear the polygons boundary.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.ClearHoles">
            <summary>
            Clear the polygons holes.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.PointCount(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            Get the number of points of a polygon element.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Remove(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            Remove a polygon.
            Can remove the boundary or a hole.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.RemoveHole(System.Int32)">
            <summary>
            Remove a hole from the polygon.
            </summary>
            <param name="index">The holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Reverse(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            Reverse the polygon.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.GetPoint(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32,System.Int32)">
            <summary>
            Get a polygons point.
            </summary>
            <param name="element">The element type.</param>
            <param name="pointIndex">The index of the point in the polygon.</param>
            <param name="holeIndex">If element type is a hole this is the holes index.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.GetPoints(CGALDotNet.Polygons.POLYGON_ELEMENT,CGALDotNetGeometry.Numerics.Point2d[],System.Int32,System.Int32)">
            <summary>
            Get the points in the polygon element.
            </summary>
            <param name="element">The element type.</param>
            <param name="points">The point array to copy points into.</param>
            <param name="count">The ararys length.</param>
            <param name="holeIndex">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.GetAllPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get all the points in the polygon boundary and holes.
            </summary>
            <param name="points">The point array to copy into.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.SetPoint(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32,CGALDotNetGeometry.Numerics.Point2d,System.Int32)">
            <summary>
            Set a polygons point.
            </summary>
            <param name="element">The element type.</param>
            <param name="pointIndex">The index of the point in the polygon.</param>
            <param name="point">The point to set.</param>
            <param name="holeIndex">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.SetPoints(CGALDotNet.Polygons.POLYGON_ELEMENT,CGALDotNetGeometry.Numerics.Point2d[],System.Int32,System.Int32)">
            <summary>
            Set all the points in the polygon. If the point array is longer
            than the polygon is current the extra points are appended to the end.
            </summary>
            <param name="element">The element type.</param>
            <param name="points">The points to set.</param>
            <param name="count">The ararys length.</param>
            <param name="holeIndex">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Triangulate(System.Collections.Generic.List{System.Int32})">
            <summary>
            Triangulate the polygon.
            </summary>
            <param name="indices">The triangle indices.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.AddHole(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Add a hole from a set of points.
            </summary>
            <param name="points">A CW set of points.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.FindIfUnbounded">
            <summary>
            Find if the polygon has a boundary.
            </summary>
            <returns>True if the polygon has a boundary.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.FindBoundingBox(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            Find the polygons bounding box.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
            <returns>The polygons bounding box.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.FindIfSimple(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            Find if the polygon is simple.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
            <returns>True if the polygon is simple.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.FindIfConvex(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            Find if the polygon is convex.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
            <returns>True if polygon is convex.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.FindOrientation(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            Find the orientation of polygon.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
            <returns>The orientation of the polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.OrientedSide(CGALDotNet.Polygons.POLYGON_ELEMENT,CGALDotNetGeometry.Numerics.Point2d,System.Int32)">
            <summary>
            Find the orientated side the point is on.
            </summary>
            <param name="element">The element type.</param>
            <param name="point"></param>
            <param name="index">If element type is a hole this is the holes index.</param>
            <returns>The orientated side of point compared to the polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.FindSignedArea(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            The signed area of the polygon.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
            <returns>The signed area is positive if polygon is ccw 
            and negation if cw.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.FindArea(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Int32)">
            <summary>
            The area of the polygon.
            </summary>
            <param name="element">The element type.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
            <returns>The polygons area.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.ReleasePtr">
            <summary>
            Release the unmanaged resoures.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.ReleasePtr(System.IntPtr)">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.ContainsPolygon(CGALDotNet.Polygons.Polygon2,System.Boolean)">
            <summary>
            Does the polygon fully contain the other polygon.
            </summary>
            <param name="polygon">The other polygon.</param>
            <param name="inculdeBoundary">Should the boundary be included.</param>
            <returns>True if the polygon is contained within this polygon.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.ContainsPoint(CGALDotNetGeometry.Numerics.Point2d,System.Boolean)">
            <summary>
            Does this polygon contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="inculdeBoundary">Should points on the boundary be 
            counted as being inside the polygon.</param>
            <returns>True if the polygon contain the point.</returns>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Translate(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Translate the polygon.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Translate(CGALDotNet.Polygons.POLYGON_ELEMENT,CGALDotNetGeometry.Numerics.Point2d,System.Int32)">
            <summary>
            Translate the polygon.
            </summary>
            <param name="element">The element type.</param>
            <param name="translation">The amount to translate.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Rotate the polygon.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Rotate(CGALDotNet.Polygons.POLYGON_ELEMENT,CGALDotNetGeometry.Numerics.Radian,System.Int32)">
            <summary>
            Rotate the polygon.
            </summary>
            <param name="element">The element type.</param>
            <param name="rotation">The amount to rotate in radians.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Scale(System.Double)">
            <summary>
            Rotate the polygon.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Scale(CGALDotNet.Polygons.POLYGON_ELEMENT,System.Double,System.Int32)">
            <summary>
            Scale the polygon.
            </summary>
            <param name="element">The element type.</param>
            <param name="scale">The amount to scale.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the polygon.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate in radians.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Transform(CGALDotNet.Polygons.POLYGON_ELEMENT,CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double,System.Int32)">
            <summary>
            Transform the polygon.
            </summary>
            <param name="element">The element type.</param>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate in radians.</param>
            <param name="scale">The amount to scale.</param>
            <param name="index">If element type is a hole this is the holes index.</param>
        </member>
        <member name="M:CGALDotNet.Polygons.PolygonWithHoles2.Print(System.Text.StringBuilder)">
            <summary>
            Print debug infomation.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.VertexCount">
            <summary>
            Number of vertices.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.FaceCount">
            <summary>
            Number of faces.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.HalfedgeCount">
            <summary>
            Number of halfedges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.BorderEdgeCount">
            <summary>
            Number of border edges.
            Since each border edge of a polyhedral surface has exactly one 
            border halfedge, this number is equal to size of border halfedges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.IsValid">
            <summary>
            Returns true if the polyhedral surface is combinatorially consistent.
            Must be a valid mesh to check many other properties.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.IsClosed">
            <summary>
            Returns true if there are no border edges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.IsTriangle">
            <summary>
            Returns true if all faces are triangles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.IsQuad">
            <summary>
            Returns true if all faces are quads.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.IsValidTriangleMesh">
            <summary>
            Is this a valid triangle mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.IsValidClosedMesh">
            <summary>
            Is this a valid closed mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.IsValidClosedTriangleMesh">
            <summary>
            Is this a valid closed triangle mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.BuildStamp">
            <summary>
            The current build stamp.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.Clear">
            <summary>
            Clear the mesh.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.ClearNormalMaps(System.Boolean,System.Boolean)">
            <summary>
            Clear the normal maps.
            </summary>
            <param name="vertices">True to clear the vertex normal map.</param>
            <param name="faces">True to clear the face normal map. </param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.CreateMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32[],System.Int32[])">
            <summary>
            Create a mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="triangles">The meshes triangles as a index array. Maybe null.</param>
            <param name="quads">The meshes quads as a index array. Maybe null.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.CreateTriangleMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a triangle mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointCount">The point arrays length.</param>
            <param name="indices">The meshes trinagles as a index array.</param>
            <param name="indexCount">The indices array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.CreateQuadMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a quad mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointCount">The point arrays length.</param>
            <param name="indices">The meshes trinagles as a index array.</param>
            <param name="indexCount">The indices array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.CreateTriangleQuadMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a mesh with quads and triangles.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointsCount">The point array length.</param>
            <param name="triangles">The meshes triangles.</param>
            <param name="triangleCount">The triangle array length.</param>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.CreatePolygonalMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,CGALDotNet.Polyhedra.PolygonalIndices)">
            <summary>
            Create a mesh with riangles, quads, pentagons and hexagons.
            </summary>
            <param name="points">The meshs points.</param>
            <param name="pointsCount">The length of the point array.</param>
            <param name="indices">The faces indices.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.CreatePolygonMesh(CGALDotNetGeometry.Numerics.Point2d[],System.Int32,System.Boolean)">
            <summary>
            Create a mesh consisting of one polygon face.
            </summary>
            <param name="points">The faces points</param>
            <param name="count">The length of the point array.</param>
            <param name="xz">Should the y coord of the points be used for the z coord.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetIndices(System.Int32[],System.Int32[])">
            <summary>
            Get the triangle and quad indices.
            </summary>
            <param name="triangles">The meshes triangles as a index array. Maybe null.</param>
            <param name="quads">The meshes quads as a index array. Maybe null.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetTriangleIndices(System.Int32[],System.Int32)">
            <summary>
            Get the meshes triangles.
            </summary>
            <param name="triangles">The meshes triangles.</param>
            <param name="trianglesCount">The triangle array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetQuadIndices(System.Int32[],System.Int32)">
            <summary>
            Get the meshes quads.
            </summary>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetTriangleQuadIndices(System.Int32[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Get the meshes triangles and quads.
            </summary>
            <param name="triangles">The meshes triangles.</param>
            <param name="trianglesCount">The triangle array length.</param>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetPolygonalIndices">
            <summary>
            Get the meshes triangles, quads, pentagons and hexagons.
            </summary>
            <returns>The indices.</returns>
        </member>
        <member name="P:CGALDotNet.Polyhedra.IMesh.Item(System.Int32)">
            <summary>
            Array accessor for the polygon.
            Getting a point wraps around the polygon.
            </summary>
            <param name="i">The points index.</param>
            <returns>The vertices point.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetPoint(System.Int32)">
            <summary>
            Get the vertices point.
            </summary>
            <param name="index">The vertex index in the mesh.</param>
            <returns>The vertices point.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Get the points in the mesh.
            </summary>
            <param name="points">The array to copy points into.</param>
            <param name="count">The point array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.SetPoint(System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the point at the index.
            </summary>
            <param name="index">The points index</param>
            <param name="point">The points</param>am>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.SetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Set the points from a array.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The point arrays length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetSegment(System.Int32,CGALDotNetGeometry.Shapes.Segment3d@)">
            <summary>
            Get a halfedges segment.
            </summary>
            <param name="index">The halfedges index.</param>
            <param name="segment">The segment.</param>
            <returns>True if halfedge found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetSegments(CGALDotNetGeometry.Shapes.Segment3d[],System.Int32)">
            <summary>
            Get a segment for  each halfedge in the mesh.
            </summary>
            <param name="segments">The segment array.</param>
            <param name="count">The segment array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetTriangle(System.Int32,CGALDotNetGeometry.Shapes.Triangle3d@)">
            <summary>
            Get the faces triangle. 
            Presumes face is a triangle with no checks.
            </summary>
            <param name="index">The faces index.</param>
            <param name="triangle">The faces triangle</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetTriangles(CGALDotNetGeometry.Shapes.Triangle3d[],System.Int32)">
            <summary>
            Get a triangle for each face in the mesh.
            Presumes all faces are triangles with no checks.
            </summary>
            <param name="triangles">The trainagle array.</param>
            <param name="count">The traingle  arrays length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetVertex(System.Int32,CGALDotNet.Polyhedra.MeshVertex3@)">
            <summary>
            Get the mesh vertex.
            </summary>
            <param name="index">The vertices index.</param>
            <param name="vertex">The vertex.</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetVertices(CGALDotNet.Polyhedra.MeshVertex3[],System.Int32)">
            <summary>
            Get the vertices in the mesh.
            </summary>
            <param name="vertices">The vertex array.</param>
            <param name="count">The vertex array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetFace(System.Int32,CGALDotNet.Polyhedra.MeshFace3@)">
            <summary>
            Get the mesh face.
            </summary>
            <param name="index">The faces index.</param>
            <param name="face">The face.</param>
            <returns>True if the face was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetFaces(CGALDotNet.Polyhedra.MeshFace3[],System.Int32)">
            <summary>
            Get the faces in the mesh.
            </summary>
            <param name="faces">The face array.</param>
            <param name="count">The face array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetHalfedge(System.Int32,CGALDotNet.Polyhedra.MeshHalfedge3@)">
            <summary>
            Get the mesh halfedge.
            </summary>
            <param name="index">The halfedges index.</param>
            <param name="halfedge">The halfedge.</param>
            <returns>True if the halfedge was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetHalfedges(CGALDotNet.Polyhedra.MeshHalfedge3[],System.Int32)">
            <summary>
            Get the halfedges in the mesh.
            </summary>
            <param name="halfedges">The halfedge array.</param>
            <param name="count">The halfedge array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetPolygonalCount">
            <summary>
            Count the number of triangles, quads and polygons in the mesh.
            </summary>
            <returns>The number of triangles, quads and polygons in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetDualPolygonalCount">
            <summary>
            Count the number of triangles, quads and polygons in the dual mesh.
            A dual mesh is were faces become vertices and vertices become faces.
            </summary>
            <returns>The number of triangles, quads and polygons in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetCentroids(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Get a centroid (the avergae face position) for each face in the mesh.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The points arrays lemgth.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.ComputeVertexNormals">
            <summary>
            Computes the vertex normals if needed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.ComputeFaceNormals">
            <summary>
            Computes the face normals if needed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetVertexNormals(CGALDotNetGeometry.Numerics.Vector3d[],System.Int32)">
            <summary>
            Get the vertex normals.
            </summary>
            <param name="normals">The normals array.</param>
            <param name="count">The normals array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.GetFaceNormals(CGALDotNetGeometry.Numerics.Vector3d[],System.Int32)">
            <summary>
            Get the face normals.
            </summary>
            <param name="normals">The normals array.</param>
            <param name="count">The normals array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.Translate(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Translate each point in the mesh.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.Rotate(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Rotate each point in the mesh.
            </summary>
            <param name="rotation">The amount to rotate.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.Scale(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Scale each point in the mesh.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform each point in the mesh.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.Triangulate">
            <summary>
            Make all faces triangles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.ReadOFF(System.String)">
            <summary>
            Read data from a off file into the pollyhedron.
            </summary>
            <param name="filename">The files name.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.WriteOFF(System.String)">
            <summary>
            Write data from a off file into the pollyhedron.
            </summary>
            <param name="filename">The files name.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.Print(System.Text.StringBuilder)">
            <summary>
            Print the mesh into a string builder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.ReverseFaceOrientation">
            <summary>
            Reverses the orientation of the vertices in each face.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.BoundedSide(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find what side of the mesh the lies in.
            </summary>
            <param name="point">The point to check.</param>
            <returns>ON_BOUNDED_SIDE if point inside mesh, 
            ON_UNBOUNDED_SIDE if point not inside, 
            ON_BOUNDARY if point is on the surface.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.ContainsPoint(CGALDotNetGeometry.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the mesh contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBoundary">If point is on the boundary does it count a being contained.</param>
            <returns>True if the poly contains the point</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.LocateFace(CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Locate the face the rays hits.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.ClosestFace(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the face closest to the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.LocateFace(CGALDotNetGeometry.Shapes.Ray3d,CGALDotNet.Polyhedra.MeshFace3@)">
            <summary>
            Locate the face hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="face">The hit face.</param>
            <returns>True if the ray hit a face.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.LocateVertex(CGALDotNetGeometry.Shapes.Ray3d,System.Double,CGALDotNet.Polyhedra.MeshVertex3@)">
            <summary>
            Locate the vertex hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="radius">The distance the vertex has to be within hit point.</param>
            <param name="vertex">The hit vertex.</param>
            <returns>True if the ray hit a vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.IMesh.LocateHalfedge(CGALDotNetGeometry.Shapes.Ray3d,System.Double,CGALDotNet.Polyhedra.MeshHalfedge3@)">
            <summary>
            Locate the edge hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="radius">The distance the edge has to be within hit point.</param>
            <param name="edge">The hit edge.</param>
            <returns>True if the ray hit a edge.</returns>
        </member>
        <member name="T:CGALDotNet.Polyhedra.MeshFactory">
            <summary>
            https://github.com/caosdoar/spheres/blob/master/src/spheres.cpp
            https://github.com/mrdoob/three.js/tree/dev/src/geometries
            </summary>
        </member>
        <member name="T:CGALDotNet.Polyhedra.NefPolyhedron3`1">
            <summary>
            Generic nef polyhedron definition.
            A 3D Nef polyhedron is a subset of the 3-dimensional space that is the result of forming
            complements and intersections starting from a finite set H of 3-dimensional halfspaces.
            Nef polyhedra are closed under all binary set operations, i.e., intersection, union, 
            difference, complement, and under the topological operations boundary, closure, and interior.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.#ctor(CGALDotNet.Polyhedra.NEF_CONTENT)">
            <summary>
            creates a Nef polyhedron and initializes it to the empty 
            set if plane == EMPTY and to the whole space if space == COMPLETE.
            </summary>
            <param name="space">The nef's space</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.#ctor(CGALDotNetGeometry.Shapes.Plane3d,CGALDotNet.Polyhedra.NEF_BOUNDARY)">
            <summary>
            creates a Nef polyhedron containing the halfspace on the 
            negative side of plane including plane if boundary==INCLUDED, 
            excluding plane if boundary==EXCLUDED.
            </summary>
            <param name="plane">The plane.</param>
            <param name="boundary">The boundary.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.#ctor(CGALDotNet.Polyhedra.Polyhedron3)">
            <summary>
            creates a Nef polyhedron, which represents the same point 
            set as the polyhedral surface.
            </summary>
            <param name="polyhedra">The polyhedron</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.#ctor(System.IntPtr)">
            <summary>
            Create from a pointer.
            </summary>
            <param name="ptr">The polyhedrons pointer.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.ToString">
            <summary>
            The nef polyhdron as a string.
            </summary>
            <returns>The nef polyhedron as a string.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.Intersection(CGALDotNet.Polyhedra.NefPolyhedron3{`0})">
            <summary>
            Return the intersection of nef and nef1.
            </summary>
            <param name="nef"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.Join(CGALDotNet.Polyhedra.NefPolyhedron3{`0})">
            <summary>
            Return the union of nef and nef1.
            </summary>
            <param name="nef"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.Difference(CGALDotNet.Polyhedra.NefPolyhedron3{`0})">
            <summary>
            Return the difference between nef and nef1.
            </summary>
            <param name="nef"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.SymmetricDifference(CGALDotNet.Polyhedra.NefPolyhedron3{`0})">
            <summary>
            Return the symmetric difference of nef and nef1.
            </summary>
            <param name="nef"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.Complement">
            <summary>
            Returns the complement of nef. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.Interior">
            <summary>
            Returns the interior of nef. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.Boundary">
            <summary>
            Returns the boundary of nef. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.Closure">
            <summary>
            Returns the closure of nef.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.Regularization">
            <summary>
            Returns the regularization, i.e. the closure of the interior, of nef.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.MinkowskiSum(CGALDotNet.Polyhedra.NefPolyhedron3{`0})">
            <summary>
            Returns the MinkowskiSum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.ConvertToPolyhedron(CGALDotNet.Polyhedra.Polyhedron3{`0}@)">
            <summary>
            Converts nef into a Polyhedron.
            nef must be simple to convert.
            </summary>
            <param name="poly">The result of the conversion.</param>
            <returns>True if nef is simple and the conversion was successful.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.ConvertToSurfaceMesh(CGALDotNet.Polyhedra.SurfaceMesh3{`0}@)">
            <summary>
            Converts nef into a surface mesh.
            nef must be simple to convert.
            </summary>
            <param name="mesh">The result of the conversion.</param>
            <returns>True if nef is simple and the conversion was successful.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3`1.GetVolumes(System.Collections.Generic.List{CGALDotNet.Polyhedra.Polyhedron3{`0}})">
            <summary>
            Get a list of the nef volumes.
            </summary>
            <param name="volumes">Get a list of the nef volumes.</param>
        </member>
        <member name="T:CGALDotNet.Polyhedra.NefPolyhedron3">
            <summary>
            The abstract nef polyhedra definition.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.#ctor(CGALDotNet.CGALKernel,CGALDotNet.Polyhedra.NEF_CONTENT)">
            <summary>
            creates a Nef polyhedron and initializes it to the empty 
            set if plane == EMPTY and to the whole space if space == COMPLETE.
            </summary>
            <param name="kernel">The polyhedron kernel.</param>
            <param name="space">The nef's space</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Shapes.Plane3d,CGALDotNet.Polyhedra.NEF_BOUNDARY)">
            <summary>
            creates a Nef polyhedron containing the halfspace on the 
            negative side of plane including plane if boundary==INCLUDED, 
            excluding plane if boundary==EXCLUDED.
            </summary>
            <param name="kernel">The polyhedron kernel.</param>
            <param name="plane">The plane.</param>
            <param name="boundary">The boundary.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.#ctor(CGALDotNet.CGALKernel,CGALDotNet.Polyhedra.Polyhedron3)">
            <summary>
            creates a Nef polyhedron, which represents the same point 
            set as the polyhedral surface.
            </summary>
            <param name="kernel">The polyhedron kernel.</param>
            <param name="polyhedra">The polyhedron</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polyhedron kernel.</param>
            <param name="ptr">The polyhedrons pointer.</param>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.Kernel">
            <summary>
            The polyhedron kernel.
            Contains the functions to the unmanaged CGAL polhedron.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.EdgeCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.FaceCount">
            <summary>
            Return the number of halfedge pairs.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.HalfEdgeCount">
            <summary>
            Return the number of halfedges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.HalfFaceCount">
            <summary>
            Return the number of faces.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.VertexCount">
            <summary>
            Return the number of vertices.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.VolumeCount">
            <summary>
            Return the number of volumes.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.IsEmpty">
            <summary>
            Returns true, if nef is the empty point set.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.IsSimple">
            <summary>
            Rreturns true, if nef is a 2-manifold.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.NefPolyhedron3.IsSpace">
            <summary>
            Returns true, if nef is the complete 3D space.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.Clear(CGALDotNet.Polyhedra.NEF_CONTENT)">
            <summary>
            Make nef the empty set if space == EMPTY and the complete 
            3D space if space == COMPLETE.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.IsValid">
            <summary>
            Checks the integrity of nef.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.ConvexDecomposition">
            <summary>
            Decompose the nef into convex volumes.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.Print(System.Text.StringBuilder)">
            <summary>
            Print the nef polyhedron into a string builder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.NefPolyhedron3.ReleasePtr">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="F:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckInput">
            <summary>
            Should the input polygon be checked.
            Can disable for better performance if 
            it is know all input if valid.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckIsValidException(CGALDotNet.Polyhedra.IMesh)">
            <summary>
            Check if the mesh is valid.
            </summary>
            <param name="mesh">The mesh to check.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckIsValid(CGALDotNet.Polyhedra.IMesh)">
            <summary>
            Check if the mesh is valid.
            </summary>
            <param name="mesh">The mesh to check.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckIsValidTriangleException(CGALDotNet.Polyhedra.IMesh)">
            <summary>
            Check if the mesh is a valid triangle mesh.
            </summary>
            <param name="mesh">The mesh to check.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckIsValidTriangle(CGALDotNet.Polyhedra.IMesh)">
            <summary>
            Check if the mesh is a valid triangle mesh.
            </summary>
            <param name="mesh">The mesh to check.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckIsValidClosedException(CGALDotNet.Polyhedra.IMesh)">
            <summary>
            Check if the mesh is a valid closed mesh.
            </summary>
            <param name="mesh">The mesh to check.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckIsValidClosed(CGALDotNet.Polyhedra.IMesh)">
            <summary>
            Check if the mesh is a valid closed mesh.
            </summary>
            <param name="mesh">The polygon to check.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckIsValidClosedTriangleException(CGALDotNet.Polyhedra.IMesh)">
            <summary>
            Check if the mesh is a valid triangle mesh.
            </summary>
            <param name="mesh">The mesh to check.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.PolyhedraAlgorithm.CheckIsValidClosedTriangle(CGALDotNet.Polyhedra.IMesh)">
            <summary>
            Check if the mesh is a valid triangle mesh.
            </summary>
            <param name="mesh">The mesh to check.</param>
        </member>
        <member name="T:CGALDotNet.Polyhedra.Polyhedron3`1">
            <summary>
            A polyhedral surface consists of vertices, edges, 
            facets and an incidence relation on them.
             Each edge is represented by two halfedges with opposite orientations.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.#ctor(CGALDotNetGeometry.Numerics.Point3d[],System.Int32[])">
            <summary>
            Construct from points and triangle indices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.#ctor(System.IntPtr)">
            <summary>
            Create from a pointer.
            </summary>
            <param name="ptr">The meshs pointer.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.ToString">
            <summary>
            The polyhdron as a string.
            </summary>
            <returns>The mesh as a string.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.Copy">
            <summary>
            Create a deep copy of the mesh.
            </summary>
            <returns>A deep copy of the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.Subdivide(System.Int32,CGALDotNet.Processing.SUBDIVISION_METHOD)">
            <summary>
            Subdive the mesh.
            </summary>
            <param name="iterations">The number of iterations to perfrom.</param>
            <param name="method">The subdivision method.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.Simplify(System.Double)">
            <summary>
            Simplify the polyhedra.
            </summary>
            <param name="stop_ratio">A number between 0-1 that represents the percentage of vertices to remove.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.Refine(System.Double)">
            <summary>
            Refines a triangle mesh
            </summary>
            <param name="density_control_factor">a factor to control density of the output mesh, 
            where larger values lead to denser refinements. Defalus to sqrt of 2.</param>
            <returns>The number of new vertices.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.Orient(CGALDotNet.Processing.ORIENTATE)">
            <summary>
            Orient the faces in the mesh.
            </summary>
            <param name="oriente">The orientation method.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.ReverseFaceOrientation">
            <summary>
            Reverses the orientation of the vertices in each face.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.Split(System.Collections.Generic.List{CGALDotNet.Polyhedra.Polyhedron3{`0}})">
            <summary>
            Split the mesh into its unconnected components.
            </summary>
            <param name="results">Each unconnect component as a new mesh.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.KeepLargest(System.Int32)">
            <summary>
            Remove all unconnected compontents except the largest.
            Largest is defined by the face count.
            </summary>
            <param name="num_components_to_keep">The numbero of largest components to keep.</param>
            <returns>The number of components removed in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.CreatePolygonMesh(CGALDotNet.Polygons.Polygon2{`0},System.Boolean)">
            <summary>
            Create a mesh consisting of one polygon face.
            </summary>
            <param name="polygon">The faces polygon.</param>
            <param name="xz">Should the y coord of the points be used for the z coord.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the polygon is not simple.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.CreateDualMesh">
            <summary>
            Create the dual mesh where each face becomes a vertex
            and each vertex becomes a face.
            Must be a valid closed mesh to create the dual.
            </summary>
            <returns>The duel mesh.</returns>
            <exception cref="T:System.InvalidOperationException">Is thrown if the mesh is not a valid closed mesh.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.ToSurfaceMesh">
            <summary>
            Convert to a surface mesh.
            </summary>
            <returns>The surface mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.FindMinMaxAvgEdgeLength">
            <summary>
            Find the min, max and average edge lengths in the mesh
            </summary>
            <returns>The min, max and average edge lengths in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.FindMinMaxAvgFaceArea">
            <summary>
            Find the min, max and average face areas in the mesh
            </summary>
            <returns>The min, max and average face areas in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.LocateFace(CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Locate the face the rays hits.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3`1.ClosestFace(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the face closest to the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="T:CGALDotNet.Polyhedra.Polyhedron3">
            <summary>
            The abstract polyhedra definition.
            </summary>
        </member>
        <member name="F:CGALDotNet.Polyhedra.Polyhedron3.m_isValid">
            <summary>
            Cached values found by running Update.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The mesh kernel.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The mesh kernel.</param>
            <param name="ptr">The meshs pointer.</param>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.Kernel">
            <summary>
            The mesh kernel.
            Contains the functions to the unmanaged CGAL polhedron.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.VertexCount">
            <summary>
            Number of vertices.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.FaceCount">
            <summary>
            Number of faces.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.HalfedgeCount">
            <summary>
            Number of half edges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.BorderEdgeCount">
            <summary>
            Number of border edges.
            Since each border edge of a polyhedral surface has exactly one 
            border halfedge, this number is equal to size of border halfedges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.BorderHalfEdgeCount">
            <summary>
            Number of border halfedges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.BuildStamp">
            <summary>
            The current build stamp.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.IsValid">
            <summary>
            Returns true if the polyhedral surface is combinatorially consistent.
            Must be a valid mesh to check many other properties.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.IsClosed">
            <summary>
            Returns true if there are no border edges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.IsTriangle">
            <summary>
            Returns true if all faces are triangles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.IsQuad">
            <summary>
            Returns true if all faces are quads.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.IsValidTriangleMesh">
            <summary>
            Is the mesh a valid triangle mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.IsValidClosedMesh">
            <summary>
            Is the mesh a valid closed mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.IsValidClosedTriangleMesh">
            <summary>
            Is the mesh a valid closed triangle mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.IsUpdated">
            <summary>
            Has the update function been called.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.SetIsUpdatedToFalse">
            <summary>
            Mark th mesh as needing to be updated.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Clear">
            <summary>
            Clear the mesh.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ClearIndexMaps(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Clear the index maps.
            The index maps are used to access the meshes elemnts by index.
            They are automaticaly created when a elements is accessed
            be a function requiring it.
            </summary>
            <param name="vertices">True to clear the vertex index map.</param>
            <param name="faces">True to clear the face index map.</param>
            <param name="edges">True to clear the edges index map.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ClearNormalMaps(System.Boolean,System.Boolean)">
            <summary>
            Clear the normal maps.
            </summary>
            <param name="vertices">True to clear the vertex normal map.</param>
            <param name="faces">True to clear the face normal map</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.BuildIndices(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds the vertex and/or face index maps if needed.
            </summary>
            <param name="vertices">True to build the vertex index map.</param>
            <param name="faces">True to build the face index map.</param>
            <param name="edges">True to build the face index map.</param>
            <param name="force">True to force the build even if already built.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.MakeTetrahedron(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            A tetrahedron is added to the polyhedral surface
            with its vertices initialized to p1, p2, p3, and p4.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.MakeTriangle(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            A triangle with border edges is added to the 
            polyhedral surface with its vertices initialized to p1, p2, and p3.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.CreateMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32[],System.Int32[])">
            <summary>
            Create a mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="triangles">The meshes triangles as a index array. Maybe null.</param>
            <param name="quads">The meshes quads as a index array. Maybe null.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.CreateTriangleMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a triangle mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointCount">The point arrays length.</param>
            <param name="indices">The meshes trinagles as a index array.</param>
            <param name="indexCount">The indices array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.CreateQuadMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a quad mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointCount">The point arrays length.</param>
            <param name="indices">The meshes trinagles as a index array.</param>
            <param name="indexCount">The indices array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.CreateTriangleQuadMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a mesh with quads and triangles.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointsCount">The point array length.</param>
            <param name="triangles">The meshes triangles.</param>
            <param name="triangleCount">The triangle array length.</param>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.CreatePolygonalMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,CGALDotNet.Polyhedra.PolygonalIndices)">
            <summary>
            Create a mesh with riangles, quads, pentagons and hexagons.
            </summary>
            <param name="points">The meshs points.</param>
            <param name="pointsCount">The length of the point array.</param>
            <param name="indices">The faces indices.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.CreatePolygonMesh(CGALDotNetGeometry.Numerics.Point2d[],System.Int32,System.Boolean)">
            <summary>
            Create a mesh consisting of one polygon face.
            </summary>
            <param name="points">The faces points</param>
            <param name="count">The point array length.</param>
            <param name="xz">Should the y coord of the points be used for the z coord.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetIndices(System.Int32[],System.Int32[])">
            <summary>
            Get the triangle and quad indices.
            </summary>
            <param name="triangles">The meshes triangles as a index array. Maybe null.</param>
            <param name="quads">The meshes quads as a index array. Maybe null.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetTriangleIndices(System.Int32[],System.Int32)">
            <summary>
            Get the meshes triangles.
            </summary>
            <param name="triangles">The meshes triangles.</param>
            <param name="trianglesCount">The triangle array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetQuadIndices(System.Int32[],System.Int32)">
            <summary>
            Get the meshes quads.
            </summary>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetTriangleQuadIndices(System.Int32[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Get the meshes triangles and quads.
            </summary>
            <param name="triangles">The meshes triangles.</param>
            <param name="trianglesCount">The triangle array length.</param>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetPolygonalIndices">
            <summary>
            Get the meshes triangles, quads, pentagons and hexagons.
            </summary>
            <returns>The indices.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetDualPolygonalIndices">
            <summary>
            Get the dual meshes triangles, quads, pentagons and hexagons.
            A dual mesh is were faces become vertices and vertices become faces.
            </summary>
            <returns>The indices</returns>
        </member>
        <member name="P:CGALDotNet.Polyhedra.Polyhedron3.Item(System.Int32)">
            <summary>
            Array accessor for the polygon.
            Getting a point wraps around the polygon.
            </summary>
            <param name="i">The points index.</param>
            <returns>The vertices point.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetPoint(System.Int32)">
            <summary>
            Get the vertices point.
            </summary>
            <param name="index">The vertex index in the mesh.</param>
            <returns>The vertices point.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Get the points in the mesh.
            </summary>
            <param name="points">The array to copy points into.</param>
            <param name="count">The point array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.SetPoint(System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the point at the index.
            </summary>
            <param name="index">The points index</param>
            <param name="point">The points</param>am>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.SetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Set the points from a array.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The point arrays length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetSegment(System.Int32,CGALDotNetGeometry.Shapes.Segment3d@)">
            <summary>
            Get a halfedges segment.
            </summary>
            <param name="index">The halfedges index.</param>
            <param name="segment">The segment.</param>
            <returns>True if halfedge found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetSegments(CGALDotNetGeometry.Shapes.Segment3d[],System.Int32)">
            <summary>
            Get a segment for  each halfedge in the mesh.
            </summary>
            <param name="segments">The segment array.</param>
            <param name="count">The segment array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetTriangle(System.Int32,CGALDotNetGeometry.Shapes.Triangle3d@)">
            <summary>
            Get the faces triangle. 
            Presumes face is a triangle with no checks.
            </summary>
            <param name="index">The faces index.</param>
            <param name="triangle">The faces triangle</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetTriangles(CGALDotNetGeometry.Shapes.Triangle3d[],System.Int32)">
            <summary>
            Get a triangle for each face in the mesh.
            Presumes all faces are triangles with no checks.
            </summary>
            <param name="triangles">The trainagle array.</param>
            <param name="count">The traingle  arrays length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetVertex(System.Int32,CGALDotNet.Polyhedra.MeshVertex3@)">
            <summary>
            Get the mesh vertex.
            </summary>
            <param name="index">The vertices index.</param>
            <param name="vertex">The vertex.</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetVertices(CGALDotNet.Polyhedra.MeshVertex3[],System.Int32)">
            <summary>
            Get the vertices in the mesh.
            </summary>
            <param name="vertices">The vertex array.</param>
            <param name="count">The vertex array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetFace(System.Int32,CGALDotNet.Polyhedra.MeshFace3@)">
            <summary>
            Get the mesh face.
            </summary>
            <param name="index">The faces index.</param>
            <param name="face">The face.</param>
            <returns>True if the face was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetFaces(CGALDotNet.Polyhedra.MeshFace3[],System.Int32)">
            <summary>
            Get the faces in the mesh.
            </summary>
            <param name="faces">The face array.</param>
            <param name="count">The face array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetHalfedge(System.Int32,CGALDotNet.Polyhedra.MeshHalfedge3@)">
            <summary>
            Get the mesh halfedge.
            </summary>
            <param name="index">The halfedges index.</param>
            <param name="halfedge">The halfedge.</param>
            <returns>True if the halfedge was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetHalfedges(CGALDotNet.Polyhedra.MeshHalfedge3[],System.Int32)">
            <summary>
            Get the halfedges in the mesh.
            </summary>
            <param name="halfedges">The halfedge array.</param>
            <param name="count">The halfedge array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetPolygonalCount">
            <summary>
            Count the number of triangles, quads and polygons in the mesh.
            </summary>
            <returns>The number of triangles, quads and polygons in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetDualPolygonalCount">
            <summary>
            Count the number of triangles, quads and polygons in the dual mesh.
            A dual mesh is were faces become vertices and vertices become faces.
            </summary>
            <returns>The number of triangles, quads and polygons in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetCentroids(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Get a centroid (the avergae face position) for each face in the mesh.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The points arrays lemgth.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ComputeVertexNormals">
            <summary>
            Computes the vertex normals if needed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ComputeFaceNormals">
            <summary>
            Computes the face normals if needed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetVertexNormals(CGALDotNetGeometry.Numerics.Vector3d[],System.Int32)">
            <summary>
            Get the vertex normals.
            </summary>
            <param name="normals">The normals array.</param>
            <param name="count">The normals array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetFaceNormals(CGALDotNetGeometry.Numerics.Vector3d[],System.Int32)">
            <summary>
            Get the face normals.
            </summary>
            <param name="normals">The normals array.</param>
            <param name="count">The normals array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Translate(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Translate each point in the mesh.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Rotate(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Rotate each point in the mesh.
            </summary>
            <param name="rotation">The amount to rotate.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Scale(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Scale each point in the mesh.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform each point in the mesh.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Triangulate">
            <summary>
            Make all faces triangles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.NormalizeBorder">
            <summary>
            sorts halfedges such that the non-border edges precede the border edges.
            For each border edge the halfedge iterator will reference the halfedge 
            incident to the facet right before the halfedge incident to the hole.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.NormalizedBorderIsValid">
            <summary>
            returns true if the border halfedges are in normalized representation, 
            which is when enumerating all halfedges with the iterator: 
            The non-border edges precede the border edges and for border edges,
            the second halfedge is the border halfedge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.BoundedSide(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find what side of the mesh the lies in.
            </summary>
            <param name="point">The point to check.</param>
            <returns>ON_BOUNDED_SIDE if point inside mesh, 
            ON_UNBOUNDED_SIDE if point not inside, 
            ON_BOUNDARY if point is on the surface.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ContainsPoint(CGALDotNetGeometry.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the mesh contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBoundary">If point is on the boundary does it count a being contained.</param>
            <returns>True if the poly contains the point</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.LocateFace(CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Locate the face the rays hits.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ClosestFace(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the face closest to the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.LocateFace(CGALDotNetGeometry.Shapes.Ray3d,CGALDotNet.Polyhedra.MeshFace3@)">
            <summary>
            Locate the face hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="face">The hit face.</param>
            <returns>True if the ray hit a face.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.LocateVertex(CGALDotNetGeometry.Shapes.Ray3d,System.Double,CGALDotNet.Polyhedra.MeshVertex3@)">
            <summary>
            Locate the vertex hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="radius">The distance the vertex has to be within hit point.</param>
            <param name="vertex">The hit vertex.</param>
            <returns>True if the ray hit a vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.LocateHalfedge(CGALDotNetGeometry.Shapes.Ray3d,System.Double,CGALDotNet.Polyhedra.MeshHalfedge3@)">
            <summary>
            Locate the edge hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="radius">The distance the edge has to be within hit point.</param>
            <param name="edge">The hit edge.</param>
            <returns>True if the ray hit a edge.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.DoesSelfIntersect">
            <summary>
            Tests if a set of faces of a triangulated surface mesh self-intersects.
            Must be a triangle mesh.
            </summary>
            <returns>True/Fasle if a valid triangle polyhedra,or UNDETERMINED if not.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindIfValid(System.Int32)">
            <summary>
            returns true if the polyhedral surface is combinatorially consistent.
            For level == 1 the normalization of the border edges is checked too.
            This method checks that each face is at least a triangle and that the
            two incident facets of a non-border edge are distinct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindBoundingBox">
            <summary>
            Computes the bounding box.
            </summary>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindArea">
            <summary>
            Computes the area of a range of faces
            of a given triangulated surface mesh.
            </summary>
            <returns>The area or 0 if poyhedron is not valid triangle mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindCentroid">
            <summary>
            computes the centroid of a volume bounded 
            by a closed triangulated surface mesh.
            </summary>
            <returns>The centroid or 0 if poyhedron is not valid.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindVolume">
            <summary>
            Computes the volume of the domain bounded by a 
            closed triangulated surface mesh.
            </summary>
            <returns>The volume or 0 if poyhedron is not valid closed triangle mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindIfClosed">
            <summary>
            Returns true if there are no border edges.
            </summary>
            <returns>True/Fasle if valid, or UNDETERMINED if not a valid polyhedra.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindIfBivalent">
            <summary>
            Returns true if all vertices have exactly two incident edges.
            </summary>
            <returns>True/Fasle if valid, or UNDETERMINED if not a valid polyhedra.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindIfTrivalent">
            <summary>
            Returns true if all vertices have exactly three incident edges.
            </summary>
            <returns>True/Fasle if valid, or UNDETERMINED if not a valid polyhedra.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindIfTriangleMesh">
            <summary>
            Returns true if all faces are triangles.
            </summary>
            <returns>True/Fasle if valid, or UNDETERMINED if not a valid polyhedra.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindIfQuadMesh">
            <summary>
            Returns true if all faces are quads.
            </summary>
            <returns>True/Fasle if valid, or UNDETERMINED if not a valid polyhedra.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindIfDoesBoundAVolume">
            <summary>
            Indicates if the mesh bounds a volume.
            Must be a closed and triangulated.
            </summary>
            <returns>True/Fasle if a valid triangle closed polyhedra,or UNDETERMINED if not.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.BuildAABBTree">
            <summary>
            Builds the aabb tree used for location.
            Tree will be automatically built if need so not 
            actually necessary to call this function.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ReleaseAABBTree">
            <summary>
            Will delete the aabb tree.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.DoIntersect(CGALDotNet.Polyhedra.Polyhedron3,System.Boolean)">
            <summary>
            Returns true if there exists a face of this poly and 
            a face of other poly which intersect, and false otherwise.
            Must be a triangle mesh
            </summary>
            <param name="poly">The other triangle poly.</param>
            <param name="test_bounded_sides">If test_bounded_sides is set to true, 
            the overlap of bounded sides are tested as well. In that case, the meshes must be closed.</param>
            <returns>True/Fasle if a valid triangle closed polyhedra,or UNDETERMINED if not.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Subdivide(System.Int32,CGALDotNet.Processing.SUBDIVISION_METHOD)">
            <summary>
            Subdive the mesh.
            </summary>
            <param name="iterations">The number of iterations to perfrom.</param>
            <param name="method">The subdivision method.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Simplify(System.Double)">
            <summary>
            Simplify the polyhedra.
            </summary>
            <param name="stop_ratio">A number between 0-1 that represents the percentage of vertices to remove.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Refine(System.Double)">
            <summary>
            Refines a triangle mesh
            </summary>
            <param name="density_control_factor">a factor to control density of the output mesh, 
            where larger values lead to denser refinements. Defalus to sqrt of 2.</param>
            <returns>The number of new vertices.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Orient(CGALDotNet.Processing.ORIENTATE)">
            <summary>
            Orient the faces in the mesh.
            </summary>
            <param name="orientate">The orientation method.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ReverseFaceOrientation">
            <summary>
            Reverses the orientation of the vertices in each face.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.KeepLargest(System.Int32)">
            <summary>
            Remove all unconnected compontents except the largest.
            Largest is defined by the face count.
            </summary>
            <param name="num_components_to_keep">The numbero of largest components to keep.</param>
            <returns>The number of components removed in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindMinMaxAvgEdgeLength">
            <summary>
            Find the min, max and average edge lengths in the mesh
            </summary>
            <returns>The min, max and average edge lengths in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.FindMinMaxAvgFaceArea">
            <summary>
            Find the min, max and average face areas in the mesh
            </summary>
            <returns>The min, max and average face areas in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.GetEnumerator">
            <summary>
            Enumerate all points in the mesh.
            </summary>
            <returns>Each point in mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all points in the mesh.
            </summary>
            <returns>Each point in mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ReadOFF(System.String)">
            <summary>
            Read data from a off file into the pollyhedron.
            </summary>
            <param name="filename">The files name.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.WriteOFF(System.String)">
            <summary>
            Write data from a off file into the pollyhedron.
            </summary>
            <param name="filename">The files name.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ToArray">
            <summary>
            Return all the points in the mesh in a array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Update">
            <summary>
            Update the mesh if needed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.Print(System.Text.StringBuilder)">
            <summary>
            Print the mesh into a string builder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.Polyhedron3.ReleasePtr">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polyhedra.SurfaceMesh3`1">
            <summary>
            This class is a data structure that can be used as halfedge data structure.
            It is an alternative to the classes Polyhedron3.The main difference is that it is indexed based and not pointer based, 
            and that the mechanism for adding information to vertices, halfedges, edges, and faces is much simpler.
            When elements are removed, they are only marked as removed, and a garbage collection function must be called to really remove them.
            </summary>
            <typeparam name="K">The kernel type</typeparam>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.#ctor(CGALDotNetGeometry.Numerics.Point3d[],System.Int32[])">
            <summary>
            Construct from points and triangle indices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.#ctor(System.IntPtr)">
            <summary>
            Create from a pointer.
            </summary>
            <param name="ptr">The surface meshes pointer.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.ToString">
            <summary>
            The mesh as a string.
            </summary>
            <returns>The mesh as a string.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.Copy">
            <summary>
            Create a deep copy of the mesh.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.Subdivide(System.Int32,CGALDotNet.Processing.SUBDIVISION_METHOD)">
            <summary>
            Subdive the mesh.
            </summary>
            <param name="iterations">The number of iterations to perfrom.</param>
            <param name="method">The subdivision method.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.Simplify(System.Double)">
            <summary>
            Simplify the polyhedra.
            </summary>
            <param name="stop_ratio">A number between 0-1 that represents the percentage of vertices to remove.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.Refine(System.Double)">
            <summary>
            Refines a triangle mesh
            </summary>
            <param name="density_control_factor">a factor to control density of the output mesh, 
            where larger values lead to denser refinements. Defalus to sqrt of 2.</param>
            <returns>The number of new vertices.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.Orient(CGALDotNet.Processing.ORIENTATE)">
            <summary>
            Orient the faces in the mesh.
            </summary>
            <param name="oriente">The orientation method.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.ReverseFaceOrientation">
            <summary>
            Reverses the orientation of the vertices in each face.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.Split(System.Collections.Generic.List{CGALDotNet.Polyhedra.SurfaceMesh3{`0}})">
            <summary>
            Split the mesh into its unconnected components.
            </summary>
            <param name="results">Each unconnect component as a new mesh.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.KeepLargest(System.Int32)">
            <summary>
            Remove all unconnected compontents except the largest.
            Largest is defined by the face count.
            </summary>
            <param name="num_components_to_keep">The numbero of largest components to keep.</param>
            <returns>The number of components removed in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.Join(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Copy the other mesh to this one.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.CreatePolygonMesh(CGALDotNet.Polygons.Polygon2{`0},System.Boolean)">
            <summary>
            Create a mesh consisting of one polygon face.
            </summary>
            <param name="polygon">The faces polygon.</param>
            <param name="xz">Should the y coord of the points be used for the z coord.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the polygon is not simple.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.ToPolyhedronMesh">
            <summary>
            Convert to a polyhedron mesh.
            </summary>
            <returns>The polyhedron mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.FindMinMaxAvgEdgeLength">
            <summary>
            Find the min, max and average edge lengths in the mesh
            </summary>
            <returns>The min, max and average edge lengths in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.FindMinMaxAvgFaceArea">
            <summary>
            Find the min, max and average face areas in the mesh
            </summary>
            <returns>The min, max and average face areas in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.LocateFace(CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Locate the face the rays hits.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3`1.ClosestFace(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the face closest to the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="T:CGALDotNet.Polyhedra.SurfaceMesh3">
            <summary>
            The surface mesh abstract base class.
            </summary>
        </member>
        <member name="F:CGALDotNet.Polyhedra.SurfaceMesh3.m_isValid">
            <summary>
            Cached values found by running Update.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Construct mesh with the kernel.
            </summary>
            <param name="kernel">The kernel</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The surface meshes kernel.</param>
            <param name="ptr">The surface meshes pointer.</param>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.Kernel">
            <summary>
            The meshes kernel type.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.VertexCount">
            <summary>
            The number of vertices in the mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.HalfedgeCount">
            <summary>
            The number of half edges in the mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.EdgeCount">
            <summary>
            The number of edges in the mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.FaceCount">
            <summary>
            The number of faces in the mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.BorderEdgeCount">
            <summary>
            The number of border edges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.BuildStamp">
            <summary>
            The current build stamp.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.RemovedVertexCount">
            <summary>
            The number of vertices currenly maked to be removed
            but have not. Calling collect garbage will remove them.
            </summary>
            <returns>The number of vertices marked to be removed.</returns>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.RemovedHalfedgeCount">
            <summary>
            The number of halfedges currenly maked to be removed
            but have not. Calling collect garbage will remove them.
            </summary>
            <returns>The number of half edges marked to be removed.</returns>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.RemovedEdgeCount">
            <summary>
            The number of edges currenly maked to be removed
            but have not. Calling collect garbage will remove them.
            </summary>
            <returns>The number of edges marked to be removed.</returns>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.RemovedFaceCount">
            <summary>
            The number of faces currenly maked to be removed
            but have not. Calling collect garbage will remove them.
            </summary>
            <returns>The number of face marked to be removed.</returns>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.IsValid">
            <summary>
            Returns true if the meshl surface is combinatorially consistent.
            Must be a valid mesh to check many other properties.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.IsClosed">
            <summary>
            Returns true if there are no border edges.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.IsTriangle">
            <summary>
            Returns true if all faces are triangles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.IsQuad">
            <summary>
            Returns true if all faces are quads.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.IsValidTriangleMesh">
            <summary>
            Is the mesh a valid triangle mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.IsValidClosedMesh">
            <summary>
            Is the mesh a valid closed mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.IsValidClosedTriangleMesh">
            <summary>
            Is the mesh a valid closed triangle mesh.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.IsUpdated">
            <summary>
            Has the update function been called.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.SetIsUpdatedToFalse">
            <summary>
            Mark the mesh as needing to be updated.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Clear">
            <summary>
            Clear the mesh.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ClearIndexMaps(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Clear the index maps.
            The index maps are used to access the meshes elemnts by index.
            They are automaticaly created when a elements is accessed
            be a function requiring it.
            </summary>
            <param name="vertices">True to clear the vertex index map.</param>
            <param name="faces">True to clear the face index map.</param>
            <param name="edges">True to clear the edges index map.</param>
            <param name="halfedges">True to clear the halfedges index map.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ClearNormalMaps(System.Boolean,System.Boolean)">
            <summary>
            Clear the normal maps.
            </summary>
            <param name="vertices">True to clear the vertex normal map.</param>
            <param name="faces">True to clear the face normal map</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ClearProperyMaps">
            <summary>
            Clear the property maps.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.BuildIndices(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Build the index maps.
            The index maps are used to access the meshes elemnts by index.
            They are automaticaly created when a elements is accessed
            be a function requiring it but can be create ahead of time.
            </summary>
            <param name="vertices">True to build the vertex index maps.</param>
            <param name="faces">True to build the face index maps.</param>
            <param name="edges">True to build the edge index maps.</param>
            <param name="halfedges">True to build the halfedge index maps.</param>
            <param name="force">The index maps wont be build if the mesh knows they are already built and upto date.
            Setting force to true will build them always.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.PrintIndices(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="vertices"></param>
            <param name="faces"></param>
            <param name="edges"></param>
            <param name="halfedges"></param>
            <param name="force"></param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.AddVertex(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Adds a vertex to the mesh.
            </summary>
            <param name="point">The vertices position</param>
            <returns>The vertices index in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.AddEdge(System.Int32,System.Int32)">
            <summary>
            Adds a edge between the two vertices.
            </summary>
            <param name="v0">The index of the vertex in the mesh.</param>
            <param name="v1">The index of the vertex in the mesh.</param>
            <returns>The index of the edge in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.AddTriangle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a triangle face to the mesh.
            </summary>
            <param name="v0">The index of the vertex in the mesh.</param>
            <param name="v1">The index of the vertex in the mesh.</param>
            <param name="v2">The index of the vertex in the mesh.</param>
            <returns>The index of the face in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.AddQuad(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a quad face to the mesh.
            </summary>
            <param name="v0">The index of the vertex in the mesh.</param>
            <param name="v1">The index of the vertex in the mesh.</param>
            <param name="v2">The index of the vertex in the mesh.</param>
            <param name="v3">The index of the vertex in the mesh.</param>
            <returns>The index of the face in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.AddPentagon(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a pentagon face to the mesh.
            </summary>
            <param name="v0">The index of the vertex in the mesh.</param>
            <param name="v1">The index of the vertex in the mesh.</param>
            <param name="v2">The index of the vertex in the mesh.</param>
            <param name="v3">The index of the vertex in the mesh.</param>
            <param name="v4">The index of the vertex in the mesh.</param>
            <returns>The index of the face in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.AddHexagon(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a hexagon face to the mesh.
            </summary>
            <param name="v0">The index of the vertex in the mesh.</param>
            <param name="v1">The index of the vertex in the mesh.</param>
            <param name="v2">The index of the vertex in the mesh.</param>
            <param name="v3">The index of the vertex in the mesh.</param>
            <param name="v4">The index of the vertex in the mesh.</param>
            <param name="v5">The index of the vertex in the mesh.</param>
            <returns>The index of the face in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.AddPolygon(System.Int32[],System.Int32)">
            <summary>
            Add a polygon face to the mesh.
            </summary>
            <param name="indices">The indices of the points in the mesm.</param>
            <param name="count">The indices array length.</param>
            <returns>The index of the face in the mesh.</returns>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.HasGarbage">
            <summary>
            Checks if any vertices, halfedges, edges, or faces are marked as removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.CollectGarbage">
            <summary>
            Really removes vertices, halfedges, edges, and faces which are marked removed.
            By garbage collecting elements get new indices. In case you store indices in an 
            auxiliary data structure or in a property these indices are potentially no 
            longer refering to the right elements.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.DoesRecycleGarbage">
            <summary>
            Controls the recycling or not of simplices previously marked as removed 
            upon addition of new elements.
            When set to true (default value), new elements are first picked in the 
            garbage(if any) while if set to false only new elements are created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CGALDotNet.Polyhedra.SurfaceMesh3.Item(System.Int32)">
            <summary>
            Array accessor for the polygon.
            Getting a point wraps around the polygon.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetPoint(System.Int32)">
            <summary>
            Get the vertices point.
            </summary>
            <param name="index">The vertex index in the mesh.</param>
            <returns>The vertices point.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Get the points in the mesh.
            </summary>
            <param name="points">The array to copy points into.</param>
            <param name="count">The point array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.SetPoint(System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the point at the index.
            </summary>
            <param name="index">The points index</param>
            <param name="point">The points</param>am>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is out of range.</exception>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.SetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Set the points from a array.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The point arrays length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetSegment(System.Int32,CGALDotNetGeometry.Shapes.Segment3d@)">
            <summary>
            Get a halfedges segment.
            </summary>
            <param name="index">The halfedges index.</param>
            <param name="segment">The segment.</param>
            <returns>True if halfedge found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetSegments(CGALDotNetGeometry.Shapes.Segment3d[],System.Int32)">
            <summary>
            Get a segment for  each halfedge in the mesh.
            </summary>
            <param name="segments">The segment array.</param>
            <param name="count">The segment array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetTriangle(System.Int32,CGALDotNetGeometry.Shapes.Triangle3d@)">
            <summary>
            Get the faces triangle. 
            Presumes face is a triangle with no checks.
            </summary>
            <param name="index">The faces index.</param>
            <param name="triangle">The faces triangle</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetTriangles(CGALDotNetGeometry.Shapes.Triangle3d[],System.Int32)">
            <summary>
            Get a triangle for each face in the mesh.
            Presumes all faces are triangles with no checks.
            </summary>
            <param name="triangles">The trainagle array.</param>
            <param name="count">The traingle  arrays length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetVertex(System.Int32,CGALDotNet.Polyhedra.MeshVertex3@)">
            <summary>
            Get the mesh vertex.
            </summary>
            <param name="index">The vertices index.</param>
            <param name="vertex">The vertex.</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetVertices(CGALDotNet.Polyhedra.MeshVertex3[],System.Int32)">
            <summary>
            Get the vertices in the mesh.
            </summary>
            <param name="vertices">The vertex array.</param>
            <param name="count">The vertex array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetFace(System.Int32,CGALDotNet.Polyhedra.MeshFace3@)">
            <summary>
            Get the mesh face.
            </summary>
            <param name="index">The faces index.</param>
            <param name="face">The face.</param>
            <returns>True if the face was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetFaces(CGALDotNet.Polyhedra.MeshFace3[],System.Int32)">
            <summary>
            Get the faces in the mesh.
            </summary>
            <param name="faces">The face array.</param>
            <param name="count">The face array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetHalfedge(System.Int32,CGALDotNet.Polyhedra.MeshHalfedge3@)">
            <summary>
            Get the mesh halfedge.
            </summary>
            <param name="index">The halfedges index.</param>
            <param name="halfedge">The halfedge.</param>
            <returns>True if the halfedge was found.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetHalfedges(CGALDotNet.Polyhedra.MeshHalfedge3[],System.Int32)">
            <summary>
            Get the halfedges in the mesh.
            </summary>
            <param name="halfedges">The halfedge array.</param>
            <param name="count">The halfedge array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.VertexDegree(System.Int32)">
            <summary>
            Returns the number of incident halfedges of vertex.
            </summary>
            <param name="vertex">The index of the vertex in the mesh.</param>
            <returns>Returns the number of incident halfedges of vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FaceDegree(System.Int32)">
            <summary>
            Returns the number of incident halfedges of face.
            </summary>
            <param name="face">The index of the face in the mesh.</param>
            <returns>Returns the number of incident halfedges of face.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.VertexIsIsolated(System.Int32)">
            <summary>
            Returns whether vertex is isolated.
            </summary>
            <param name="vertex">The index of the vertex in the mesh.</param>
            <returns>Returns whether vertex is isolated.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.VertexIsBorder(System.Int32,System.Boolean)">
            <summary>
            Returns whether vertex is a border vertex.
            If the data contained in the Surface_mesh is not
            a 2-manifold, then this operation is not 
            guaranteed to return the right result.
            </summary>
            <param name="vertex">he index of the vertex in the mesh.</param>
            <param name="check_all_incident_halfedges">With the default value for 
            check_all_incident_halfedges the function iteratates over the incident 
            halfedges. With check_all_incident_halfedges == false the function 
            returns true, if the incident halfedge associated to vertex is a
            border halfedge, or if the vertex is isolated.</param>
            <returns>Returns whether vertex is a border vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.EdgeIsBorder(System.Int32)">
            <summary>
            Returns whether edge is a border edge, i.e., if any of its two halfedges is a border halfedge.
            </summary>
            <param name="edge">The index of the edge in the mesh.</param>
            <returns>Returns whether edge is a border edge.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.NextHalfedge(System.Int32)">
            <summary>
            Returns the next halfedge within the incident face.
            </summary>
            <param name="halfedge">The index of the halfedge in the mesh.</param>
            <returns>Returns the next halfedge within the incident face.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.PreviousHalfedge(System.Int32)">
            <summary>
            Returns the previous halfedge within the incident face.
            </summary>
            <param name="halfedge">The index of the halfedge in the mesh.</param>
            <returns>Returns the previous halfedge within the incident face.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.OppositeHalfedge(System.Int32)">
            <summary>
            Returns the opposite halfedge of halfedge.
            </summary>
            <param name="halfedge">The index of the halfedge in the mesh.</param>
            <returns>Returns the opposite halfedge of halfedge.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.SourceVertex(System.Int32)">
            <summary>
            Returns the vertex the halfedge emanates from.
            </summary>
            <param name="halfedge">The index of the halfedge in the mesh.</param>
            <returns>Returns the vertex the halfedge emanates from.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.TargetVertex(System.Int32)">
            <summary>
            Returns the vertex the halfedge points to.
            </summary>
            <param name="halfedge">The index of the halfedge in the mesh.</param>
            <returns>Returns the vertex the halfedge points to.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.RemoveVertex(System.Int32)">
            <summary>
            Removes vertex from the halfedge data structure without adjusting anything.
            </summary>
            <param name="vertex">The index of the vertex in the mesh.</param>
            <returns>True if face removed.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.RemoveEdge(System.Int32)">
            <summary>
            Removes the two halfedges corresponding to edge from the halfedge
            data structure without adjusting anything.
            </summary>
            <param name="edge">The index of the edge in the mesh.</param>
            <returns>True if face removed.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.RemoveFace(System.Int32)">
            <summary>
            Removes face from the halfedge data structure without adjusting anything.
            </summary>
            <param name="face">The index of the face in the mesh.</param>
            <returns>True if face removed.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsVertexRemoved(System.Int32)">
            <summary>
            Has this vertex been marked to be removed.
            </summary>
            <param name="index">The vertices index in the mesh.</param>
            <returns>Has this vertex been marked to be removed.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsFaceRemoved(System.Int32)">
            <summary>
            Has this face been marked to be removed.
            </summary>
            <param name="index">The faces index in the mesh.</param>
            <returns>Has this face been marked to be removed.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsHalfedgeRemoved(System.Int32)">
            <summary>
            Has this halfedge been marked to be removed.
            </summary>
            <param name="index">The halfedge index in the mesh.</param>
            <returns>Has this halfedge been marked to be removed.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsEdgeRemoved(System.Int32)">
            <summary>
            Has this edge been marked to be removed.
            </summary>
            <param name="index">The edges index in the mesh.</param>
            <returns>Has this edge been marked to be removed.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsVertexValid(System.Int32)">
            <summary>
            Performs a validity check on a single vertex.
            </summary>
            <param name="vertex">The index of the vertex in the mesh.</param>
            <returns>True if valid.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsEdgeValid(System.Int32)">
            <summary>
            Performs a validity check on a single edge.
            </summary>
            <param name="edge">The index of the edge in the mesh.</param>
            <returns>True if valid.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsHalfedgeValid(System.Int32)">
            <summary>
            Performs a validity check on a single halfedge.
            </summary>
            <param name="halfedge">The index of the halfedge in the mesh.</param>
            <returns>True if valid.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsFaceValid(System.Int32)">
            <summary>
            Performs a validity check on a single face.
            </summary>
            <param name="face">The index of the face in the mesh.</param>
            <returns>True if valid.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Translate(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Translate each point in the mesh.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Rotate(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Rotate each point in the mesh.
            </summary>
            <param name="rotation">The amount to rotate.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Scale(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Scale each point in the mesh.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform each point in the mesh.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.CreateMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32[],System.Int32[])">
            <summary>
            Create a mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="triangles">The meshes triangles as a index array. Maybe null.</param>
            <param name="quads">The meshes quads as a index array. Maybe null.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.CreateTriangleMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a triangle mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointCount">The point arrays length.</param>
            <param name="indices">The meshes trinagles as a index array.</param>
            <param name="indexCount">The indices array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.CreateQuadMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a quad mesh from the points and indices.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointCount">The point arrays length.</param>
            <param name="indices">The meshes trinagles as a index array.</param>
            <param name="indexCount">The indices array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.CreateTriangleQuadMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Create a mesh with quads and triangles.
            </summary>
            <param name="points">The meshes points.</param>
            <param name="pointsCount">The point array length.</param>
            <param name="triangles">The meshes triangles.</param>
            <param name="triangleCount">The triangle array length.</param>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.CreatePolygonalMesh(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,CGALDotNet.Polyhedra.PolygonalIndices)">
            <summary>
            Create a mesh with riangles, quads, pentagons and hexagons.
            </summary>
            <param name="points">The meshs points.</param>
            <param name="pointsCount">The length of the point array.</param>
            <param name="indices">The faces indices.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.CreatePolygonMesh(CGALDotNetGeometry.Numerics.Point2d[],System.Int32,System.Boolean)">
            <summary>
            Create a mesh consisting of one polygon face.
            </summary>
            <param name="points">The faces points</param>
            <param name="count">The paoint array length.</param>
            <param name="xz">Should the y coord of the points be used for the z coord.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetIndices(System.Int32[],System.Int32[])">
            <summary>
            Get the triangle and quad indices.
            </summary>
            <param name="triangles">The meshes triangles as a index array. Maybe null.</param>
            <param name="quads">The meshes quads as a index array. Maybe null.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetTriangleIndices(System.Int32[],System.Int32)">
            <summary>
            Get the meshes triangles.
            </summary>
            <param name="triangles">The meshes triangles.</param>
            <param name="trianglesCount">The triangle array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetQuadIndices(System.Int32[],System.Int32)">
            <summary>
            Get the meshes quads.
            </summary>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetTriangleQuadIndices(System.Int32[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Get the meshes triangles and quads.
            </summary>
            <param name="triangles">The meshes triangles.</param>
            <param name="trianglesCount">The triangle array length.</param>
            <param name="quads">The meshes quads.</param>
            <param name="quadsCount">The quads array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetPolygonalIndices">
            <summary>
            Get the meshes triangles, quads, pentagons and hexagons.
            </summary>
            <returns>The indices.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsVertexBorder(System.Int32,System.Boolean)">
            <summary>
            Whether v is a border vertex.
            </summary>
            <param name="index">The vertices index.</param>
            <param name="check_all_incident_halfedges">With the default value for 
            check_all_incident_halfedges the function iteratates over the incident halfedges. 
            With check_all_incident_halfedges == false the function returns true, 
            if the incident halfedge associated to vertex v is a border halfedge, 
            or if the vertex is isolated.</param>
            <returns>Whether v is a border vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsHalfedgeBorder(System.Int32)">
            <summary>
            Whether half edge is a border halfege, that is if its incident face is null.
            </summary>
            <param name="index">The halfedges index.</param>
            <returns>Whether half edge is a border halfege.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.IsEdgeBorder(System.Int32)">
            <summary>
            Whether e is a border edge, i.e., if any of its two halfedges is a border halfedge.
            </summary>
            <param name="index">The edges index.</param>
            <returns>Whether e is a border edge.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetPolygonalCount">
            <summary>
            Count the number of triangles, quads and polygons in the mesh.
            </summary>
            <returns>The number of triangles, quads and polygons in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetDualPolygonalCount">
            <summary>
            Count the number of triangles, quads and polygons in the dual mesh.
            A dual mesh is were faces become vertices and vertices become faces.
            </summary>
            <returns>The number of triangles, quads and polygons in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.BuildAABBTree">
            <summary>
            Build the aabb tree.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ReleaseAABBTree">
            <summary>
            Release the aabb tree.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindBoundingBox">
            <summary>
            Find the bounding box of the meshes points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ReadOFF(System.String)">
            <summary>
            Read the mesh from a off file format.
            </summary>
            <param name="filename">The files name.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.WriteOFF(System.String)">
            <summary>
            Write the mesh to off file format.
            </summary>
            <param name="filename">The files name.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Triangulate">
            <summary>
            Make all faces triangles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.DoesSelfIntersect">
            <summary>
            Tests if a set of faces of a triangulated surface mesh self-intersects.
            Must be a triangle mesh.
            </summary>
            <returns>True/Fasle if a valid triangle mesh,or UNDETERMINED if not.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindIfValid">
            <summary>
            Perform an expensive validity check on the data structure.
            </summary>
            <returns>If the mesh is valid.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindIfTriangleMesh">
            <summary>
            Find if all the faces in the mesh are triangles.
            </summary>
            <returns>True if all the faces in the mesh are triangles, Will be undetermined if no a valid mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindIfQuadMesh">
            <summary>
            Find if all the faces in the mesh are quads.
            </summary>
            <returns>True if all the faces in the mesh are quads, Will be undetermined if no a valid mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindIfClosed">
            <summary>
            Find if the mesh is closed, ie has no border edges.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindArea">
            <summary>
            Computes the area of a range of faces
            of a given triangulated surface mesh.
            </summary>
            <returns>The area or 0 if mesh is not valid triangle mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindCentroid">
            <summary>
            computes the centroid of a volume bounded 
            by a closed triangulated surface mesh.
            </summary>
            <returns>The centroid or 0 if mesh is not valid.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindVolume">
            <summary>
            Computes the volume of the domain bounded by a 
            closed triangulated surface mesh.
            </summary>
            <returns>The volume or 0 if mesh is not valid closed triangle mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindIfDoesBoundAVolume">
            <summary>
            Indicates if the mesh bounds a volume.
            Must be a closed and triangulated.
            </summary>
            <returns>True/Fasle if a valid triangle closed mesh,or UNDETERMINED if not.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.BoundedSide(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find what side of the mesh the lies in.
            </summary>
            <param name="point">The point to check.</param>
            <returns>ON_BOUNDED_SIDE if point inside mesh, 
            ON_UNBOUNDED_SIDE if point not inside, 
            ON_BOUNDARY if point is on the surface.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ContainsPoint(CGALDotNetGeometry.Numerics.Point3d,System.Boolean)">
            <summary>
            Does the mesh contain the point.
            </summary>
            <param name="point">The point.</param>
            <param name="includeBoundary">If point is on the boundary does it count a being contained.</param>
            <returns>True if the poly contains the point</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.LocateFace(CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Locate the face the rays hits.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ClosestFace(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the face closest to the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The hit result.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.LocateFace(CGALDotNetGeometry.Shapes.Ray3d,CGALDotNet.Polyhedra.MeshFace3@)">
            <summary>
            Locate the face hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="face">The hit face.</param>
            <returns>True if the ray hit a face.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.LocateVertex(CGALDotNetGeometry.Shapes.Ray3d,System.Double,CGALDotNet.Polyhedra.MeshVertex3@)">
            <summary>
            Locate the vertex hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="radius">The distance the vertex has to be within hit point.</param>
            <param name="vertex">The hit vertex.</param>
            <returns>True if the ray hit a vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.LocateHalfedge(CGALDotNetGeometry.Shapes.Ray3d,System.Double,CGALDotNet.Polyhedra.MeshHalfedge3@)">
            <summary>
            Locate the edge hit by the ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="radius">The distance the edge has to be within hit point.</param>
            <param name="edge">The hit edge.</param>
            <returns>True if the ray hit a edge.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.DoIntersect(CGALDotNet.Polyhedra.SurfaceMesh3,System.Boolean)">
            <summary>
            Returns true if there exists a face of this poly and 
            a face of other mesh which intersect, and false otherwise.
            Must be a triangle mesh
            </summary>
            <param name="mesh">The other triangle poly.</param>
            <param name="test_bounded_sides">If test_bounded_sides is set to true, 
            the overlap of bounded sides are tested as well. In that case, the meshes must be closed.</param>
            <returns>True/Fasle if a valid triangle closed mesh,or UNDETERMINED if not.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindMinMaxAvgEdgeLength">
            <summary>
            Find the min, max and average edge lengths in the mesh
            </summary>
            <returns>The min, max and average edge lengths in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.FindMinMaxAvgFaceArea">
            <summary>
            Find the min, max and average face areas in the mesh
            </summary>
            <returns>The min, max and average face areas in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Subdivide(System.Int32,CGALDotNet.Processing.SUBDIVISION_METHOD)">
            <summary>
            Subdive the mesh.
            </summary>
            <param name="iterations">The number of iterations to perfrom.</param>
            <param name="method">The subdivision method.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Simplify(System.Double)">
            <summary>
            Simplify the polyhedra.
            </summary>
            <param name="stop_ratio">A number between 0-1 that represents the percentage of vertices to remove.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Refine(System.Double)">
            <summary>
            Refines a triangle mesh
            </summary>
            <param name="density_control_factor">a factor to control density of the output mesh, 
            where larger values lead to denser refinements. Defalus to sqrt of 2.</param>
            <returns>The number of new vertices.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Orient(CGALDotNet.Processing.ORIENTATE)">
            <summary>
            Orient the faces in the mesh.
            </summary>
            <param name="orientate">The orientation method.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ReverseFaceOrientation">
            <summary>
            Reverses the orientation of the vertices in each face.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.KeepLargest(System.Int32)">
            <summary>
            Remove all unconnected compontents except the largest.
            Largest is defined by the face count.
            </summary>
            <param name="num_components_to_keep">The numbero of largest components to keep.</param>
            <returns>The number of components removed in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetCentroids(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Get a centroid (the avergae face position) for each face in the mesh.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The points arrays lemgth.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ComputeVertexNormals">
            <summary>
            Compute the vertex normal map.
            Will only be computed if mesh has
            changed since last computation or 
            no current nomral maps have been computed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ComputeFaceNormals">
            <summary>
            Compute the face normal map.
            Will only be computed if mesh has
            changed since last computation or 
            no current nomral maps have been computed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetVertexNormals(CGALDotNetGeometry.Numerics.Vector3d[],System.Int32)">
            <summary>
            Get the vertex normals.
            Will be compute if they have not aready.
            </summary>
            <param name="normals">The normal map array.</param>
            <param name="count">The normal maps array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetFaceNormals(CGALDotNetGeometry.Numerics.Vector3d[],System.Int32)">
            <summary>
            Get the face normals.
            Will be compute if they have not aready.
            </summary>
            <param name="normals">The normal map array.</param>
            <param name="count">The normal maps array length.</param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.GetEnumerator">
            <summary>
            Enumerate all points in the mesh.
            </summary>
            <returns>Each point in mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all points in the mesh.
            </summary>
            <returns>Each point in mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ToArray">
            <summary>
            Return all the points in the mesh in a array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ToList">
            <summary>
            Return all the points in the mesh in a list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Update">
            <summary>
            Update the mesh if needed.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.Print(System.Text.StringBuilder)">
            <summary>
            Print the mesh into a string builder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.PrintVertices">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Polyhedra.SurfaceMesh3.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polylines.Polyline2`1">
            <summary>
            Generic polyline definition.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            Create from a set of points.
            </summary>
            <param name="points">The polylines points.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2`1.#ctor(System.IntPtr)">
            <summary>
            Create from a pointer.
            </summary>
            <param name="ptr">The polylines pointer.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2`1.ToString">
            <summary>
            The polyline as a string.
            </summary>
            <returns>The polyline as a string.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2`1.Copy">
            <summary>
            Copy the polyline.
            </summary>
            <returns>The copied polyline.</returns>
        </member>
        <member name="T:CGALDotNet.Polylines.Polyline2">
            <summary>
            The abstract polyline definition.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polyline kernel.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polyline kernel.</param>
            <param name="points">The points to construct from.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polyline kernel.</param>
            <param name="ptr">The polylines pointer.</param>
        </member>
        <member name="P:CGALDotNet.Polylines.Polyline2.Count">
            <summary>
            The number of points in the polyline.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polylines.Polyline2.Capacity">
            <summary>
            The capacity of the point array.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polylines.Polyline2.Kernel">
            <summary>
            The polylines kernel.
            Contains the functions to the unmanaged CGAL polyline.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polylines.Polyline2.Item(System.Int32)">
            <summary>
            Array accessor for the polyline.
            Getting a point clamps to the last point in polyline.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Clear">
            <summary>
            Clear the polyline of all points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.ShrinkCapacityToFitCount">
            <summary>
            Shrink the capacity to match the point count.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Resize(System.Int32)">
            <summary>
            Resize the point array.
            New elements will default to zero.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Reverse">
            <summary>
            Reverse the polints in the line.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Remove(System.Int32)">
            <summary>
            Remove the point at the index from the array.
            </summary>
            <param name="index">The points index</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Remove(System.Int32,System.Int32)">
            <summary>
            Remove a range of points from the array.
            </summary>
            <param name="start">The starting index</param>
            <param name="count">The number of points to remove.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.RemoveLast">
            <summary>
            Remove the last point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Insert(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Remove the point at the index from the array.
            </summary>
            <param name="index">The points index.</param>
            <param name="point">The point to insert.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Insert(CGALDotNetGeometry.Numerics.Point2d[],System.Int32,System.Int32)">
            <summary>
            Remove a range of points from the array.
            </summary>
            <param name="points">The points to insert.</param>
            <param name="start">The starting index.</param>
            <param name="count">The number of points to insert.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Add(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Add the point to the end of the poylline.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.IsClosed(System.Double)">
            <summary>
            Does the first and last point match.
            </summary>
            <param name="threshold">The distance threshold that counts as match.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.GetPoint(System.Int32)">
            <summary>
            Get the point a the index.
            </summary>
            <param name="index">The points index to get.</param>
            <returns>The point at index.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.GetPointWrapped(System.Int32)">
            <summary>
            Get the point at the index
            and wrap around the polyline.
            </summary>
            <param name="index">The points index.</param>
            <returns>The point at the index.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.GetPointClamped(System.Int32)">
            <summary>
            Get the point at the index
            and clamp to the polylines last point.
            </summary>
            <param name="index">The points index.</param>
            <returns>The point at the index.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.GetPoints(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Get all the points in the polyline.
            </summary>
            <param name="points">The point array to copy the data into.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.GetPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point2d})">
            <summary>
            Get all the polyline points.
            </summary>
            <param name="points">The list to copy the data into.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.GetSegments(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Get all the polyline segments.
            </summary>
            <param name="segments">The segment array to copy the data into.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.SetPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Set the points at the index.
            </summary>
            <param name="index">The points index.</param>
            <param name="point">The points value.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.SetPoints(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Set the points from the array.
            If the array is larger than the polyline then 
            the new points will be appended to end of polyline.
            </summary>
            <param name="points">The points array.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.FindLength">
            <summary>
            Finds the length of the polyline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.FindSquareLength">
            <summary>
            Finds the square length of the polyline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Translate(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Translate the polyline.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Rotate the polyline.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Scale(System.Double)">
            <summary>
            Scale the polyline.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the polyline with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.GetEnumerator">
            <summary>
            Enumerate all points in the polyline.
            </summary>
            <returns>Each point in polyline.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all points in the polyline.
            </summary>
            <returns>Each point in polyline.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.ToArray">
            <summary>
            Return all the points in the polyline in a array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Convert``1">
            <summary>
            Convert the polyline to a new polyline with a different kernel.
            May result in different values due to precision issues.
            </summary>
            <typeparam name="T">The new kernel type.</typeparam>
            <returns>The new polyline.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.ToList">
            <summary>
            Return all the points in the polyline in a list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.Print(System.Text.StringBuilder)">
            <summary>
            Print the polyline into a styring builder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.ReleasePtr">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline2.ReleasePtr(System.IntPtr)">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="T:CGALDotNet.Polylines.Polyline3`1">
            <summary>
            Generic polyline definition.
            </summary>
            <typeparam name="K">The kernel type.</typeparam>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3`1.#ctor(CGALDotNetGeometry.Numerics.Point3d[])">
            <summary>
            Create from a set of points.
            </summary>
            <param name="points">The polylines points.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3`1.#ctor(System.IntPtr)">
            <summary>
            Create from a pointer.
            </summary>
            <param name="ptr">The polylines pointer.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3`1.ToString">
            <summary>
            The polyline as a string.
            </summary>
            <returns>The polyline as a string.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3`1.Copy">
            <summary>
            Copy the polyline.
            </summary>
            <returns>The copied polyline.</returns>
        </member>
        <member name="T:CGALDotNet.Polylines.Polyline3">
            <summary>
            The abstract polyline definition.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polyline kernel.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point3d[])">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polyline kernel.</param>
            <param name="points">The points to construct from.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            Construct with a new kernel.
            </summary>
            <param name="kernel">The polyline kernel.</param>
            <param name="ptr">The polylines pointer.</param>
        </member>
        <member name="P:CGALDotNet.Polylines.Polyline3.Count">
            <summary>
            The number of points in the polyline.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polylines.Polyline3.Capacity">
            <summary>
            The capacity of the point array.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polylines.Polyline3.Kernel">
            <summary>
            The polylines kernel.
            Contains the functions to the unmanaged CGAL polyline.
            </summary>
        </member>
        <member name="P:CGALDotNet.Polylines.Polyline3.Item(System.Int32)">
            <summary>
            Array accessor for the polyline.
            Getting a point clamps to the last point in polyline.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Clear">
            <summary>
            Clear the polyline of all points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.ShrinkCapacityToFitCount">
            <summary>
            Shrink the capacity to match the point count.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Resize(System.Int32)">
            <summary>
            Resize the point array.
            New elements will default to zero.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Reverse">
            <summary>
            Reverse the polints in the line.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Remove(System.Int32)">
            <summary>
            Remove the point at the index from the array.
            </summary>
            <param name="index">The points index</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Remove(System.Int32,System.Int32)">
            <summary>
            Remove a range of points from the array.
            </summary>
            <param name="start">The starting index</param>
            <param name="count">The number of points to remove.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.RemoveLast">
            <summary>
            Remove the last point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Insert(System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Remove the point at the index from the array.
            </summary>
            <param name="index">The points index.</param>
            <param name="point">The point to insert.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Insert(CGALDotNetGeometry.Numerics.Point3d[],System.Int32,System.Int32)">
            <summary>
            Remove a range of points from the array.
            </summary>
            <param name="points">The points to insert.</param>
            <param name="start">The starting index.</param>
            <param name="count">The number of points to insert.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Add(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Add the point to the end of the poylline.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.IsClosed(System.Double)">
            <summary>
            Does the first and last point match.
            </summary>
            <param name="threshold">The distance threshold that counts as match.</param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.GetPoint(System.Int32)">
            <summary>
            Get the point a the index.
            </summary>
            <param name="index">The points index to get.</param>
            <returns>The point at index.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.GetPointWrapped(System.Int32)">
            <summary>
            Get the point at the index
            and wrap around the polyline.
            </summary>
            <param name="index">The points index.</param>
            <returns>The point at the index.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.GetPointClamped(System.Int32)">
            <summary>
            Get the point at the index
            and clamp to the polylines last point.
            </summary>
            <param name="index">The points index.</param>
            <returns>The point at the index.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.GetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Get all the points in the polyline.
            </summary>
            <param name="points">The point array to copy the data into.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.GetPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Get all the polyline points.
            </summary>
            <param name="points">The list to copy the data into.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.GetSegments(CGALDotNetGeometry.Shapes.Segment3d[],System.Int32)">
            <summary>
            Get all the polyline segments.
            </summary>
            <param name="segments">The segment array to copy the data into.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.SetPoint(System.Int32,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Set the points at the index.
            </summary>
            <param name="index">The points index.</param>
            <param name="point">The points value.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.SetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Set the points from the array.
            If the array is larger than the polyline then 
            the new points will be appended to end of polyline.
            </summary>
            <param name="points">The points array.</param>
            <param name="count">The array length.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.FindLength">
            <summary>
            Finds the length of the polyline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.FindSquareLength">
            <summary>
            Finds the square length of the polyline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Translate(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Translate each point in the polyline.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Rotate(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Rotate each point in the polyline.
            </summary>
            <param name="rotation">The amount to rotate.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Scale(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Scale each point in the polyline.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform each point in the polyline.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.GetEnumerator">
            <summary>
            Enumerate all points in the polyline.
            </summary>
            <returns>Each point in polyline.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all points in the polyline.
            </summary>
            <returns>Each point in polyline.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.ToArray">
            <summary>
            Return all the points in the polyline in a array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Convert``1">
            <summary>
            Convert the polyline to a new polyline with a different kernel.
            May result in different values due to precision issues.
            </summary>
            <typeparam name="T">The new kernel type.</typeparam>
            <returns>The new polyline.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.ToList">
            <summary>
            Return all the points in the polyline in a list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.Print(System.Text.StringBuilder)">
            <summary>
            Print the polyline into a styring builder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.ReleasePtr">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="M:CGALDotNet.Polylines.Polyline3.ReleasePtr(System.IntPtr)">
            <summary>
            Release the unmanaged pointer.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingBoolean`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.MeshProcessingBoolean`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.Op(CGALDotNet.Processing.POLYHEDRA_BOOLEAN,CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNet.Polyhedra.Polyhedron3{`0}@)">
            <summary>
            
            </summary>
            <param name="op"></param>
            <param name="mesh1"></param>
            <param name="mesh2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.Op(CGALDotNet.Processing.POLYHEDRA_BOOLEAN,CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNet.Polyhedra.SurfaceMesh3{`0}@)">
            <summary>
            
            </summary>
            <param name="op"></param>
            <param name="mesh1"></param>
            <param name="mesh2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.Union(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNet.Polyhedra.Polyhedron3{`0}@)">
            <summary>
            
            </summary>
            <param name="mesh1"></param>
            <param name="mesh2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.Union(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNet.Polyhedra.SurfaceMesh3{`0}@)">
            <summary>
            
            </summary>
            <param name="mesh1"></param>
            <param name="mesh2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.Difference(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNet.Polyhedra.Polyhedron3{`0}@)">
            <summary>
            
            </summary>
            <param name="mesh1"></param>
            <param name="mesh2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.Difference(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNet.Polyhedra.SurfaceMesh3{`0}@)">
            <summary>
            
            </summary>
            <param name="mesh1"></param>
            <param name="mesh2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.Intersection(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNet.Polyhedra.Polyhedron3{`0}@)">
            <summary>
            
            </summary>
            <param name="mesh1"></param>
            <param name="mesh2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean`1.Intersection(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNet.Polyhedra.SurfaceMesh3{`0}@)">
            <summary>
            
            </summary>
            <param name="mesh1"></param>
            <param name="mesh2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingBoolean">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Processing.MeshProcessingBoolean.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingBoolean.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingConnections`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.MeshProcessingConnections`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.UnconnectedComponents(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Returns the number of unconnect components in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <returns>Returns the number of unconnect components in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.ConnectedFaces(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns a list of face indices that are part of the same component as the provided face index.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="faceIndex">The faces index in the mesh.</param>
            <param name="results">A list of face indices that are part of the same component as the provided face index.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.ConnectedFaces(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns a list of face indices that are part of the same component as the provided face index.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="faceIndex">The faces index in the mesh.</param>
            <param name="results">A list of face indices that are part of the same component as the provided face index.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.SplitUnconnectedComponents(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Collections.Generic.List{CGALDotNet.Polyhedra.Polyhedron3{`0}})">
            <summary>
            Split each component in the mesh into individual meshes.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="results">The split meshes.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.SplitUnconnectedComponents(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Collections.Generic.List{CGALDotNet.Polyhedra.SurfaceMesh3{`0}})">
            <summary>
            Split each component in the mesh into individual meshes.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="results">The split meshes.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.KeepLargeComponents(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32)">
            <summary>
            Removes connected components with less than a given number of faces.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="threshold_value">The number of faces a component must have so that it is kept</param>
            <returns>The number of components removed.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.KeepLargeComponents(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32)">
            <summary>
            Removes connected components with less than a given number of faces.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="threshold_value">The number of faces a component must have so that it is kept</param>
            <returns>The number of components removed.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.KeepLargestComponents(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32)">
            <summary>
            Removes the small connected components and all isolated vertices.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="num_components_to_keep">Keep this number of the largest connected components.</param>
            <returns>The number of components removed.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections`1.KeepLargestComponents(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32)">
            <summary>
            Removes the small connected components and all isolated vertices.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="num_components_to_keep">Keep this number of the largest connected components.</param>
            <returns>The number of components removed.</returns>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingConnections">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Processing.MeshProcessingConnections.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingConnections.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingFeatures`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.MeshProcessingFeatures`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.DetectSharpEdges(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNetGeometry.Numerics.Degree,System.Collections.Generic.List{System.Int32})">
            <summary>
            Detects the edges that are considered to be sharp with respect to the given angle bound.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="feature_angle">Angle in deg gives the maximum angle between 
            the two normal vectors of adjacent triangles. For an edge of the input polygon mesh, 
            if the angle between the two normal vectors of its incident facets is bigger than 
            the given bound, then the edge is marked as being a feature edge.</param>
            <param name="featureEdges">The halfedge indices of the edges that count as sharp.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.DetectSharpEdges(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Numerics.Degree,System.Collections.Generic.List{System.Int32})">
            <summary>
            Detects the edges that are considered to be sharp with respect to the given angle bound.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="feature_angle">Angle in deg gives the maximum angle between 
            the two normal vectors of adjacent triangles. For an edge of the input polygon mesh, 
            if the angle between the two normal vectors of its incident facets is bigger than 
            the given bound, then the edge is marked as being a feature edge.</param>
            <param name="featureEdges">The halfedge indices of the edges that count as sharp.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.EdgeLengthMinMaxAvg(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Find the min, max and average edge lengths in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <returns>The min, max and average edge lengths in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.EdgeLengthMinMaxAvg(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Find the min, max and average edge lengths in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <returns>The min, max and average edge lengths in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.FaceAreaMinMaxAvg(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Find the min, max and average face areas in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <returns>The min, max and average face areas in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.FaceAreaMinMaxAvg(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Find the min, max and average face areas in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <returns>The min, max and average face areas in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.SharpEdgesSegmentation(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Numerics.Degree,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <summary>
            Detects the sharp edges of mesh according to angle as the DetectSharpEdges function does. 
            The sharp edges are then used to define a segmentation of a mesh, that is done by computing 
            a surface patch id for each face.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="feature_angle">Angle in deg gives the maximum angle between 
            the two normal vectors of adjacent triangles. For an edge of the input polygon mesh, 
            if the angle between the two normal vectors of its incident facets is bigger than 
            the given bound, then the edge is marked as being a feature edge.</param>
            <param name="featureEdges">The halfedge indices of the edges that count as sharp.</param>
            <param name="featurePatches">The face indices for each patch found.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.SharpEdgesSegmentation(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Numerics.Degree,System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <summary>
            Detects the sharp edges of pmesh according to angle as the DetectSharpEdges function does. 
            The sharp edges are then used to define a segmentation of a mesh, that is done by computing 
            a surface patch id for each face.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="feature_angle">Angle in deg gives the maximum angle between 
            the two normal vectors of adjacent triangles. For an edge of the input polygon mesh, 
            if the angle between the two normal vectors of its incident facets is bigger than 
            the given bound, then the edge is marked as being a feature edge.</param>
            <param name="featurePatches">The face indices for each patch found.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingFeatures">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:CGALDotNet.Processing.MeshProcessingFeatures.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures.GetFeatureEdges(CGALDotNet.MESH_TYPE,System.IntPtr,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="meshPtr"></param>
            <param name="num_edges"></param>
            <param name="featureEdges"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures.GetFeaturePatches(CGALDotNet.MESH_TYPE,System.IntPtr,System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="meshPtr"></param>
            <param name="num_patches"></param>
            <param name="featurePatches"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingFeatures.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingLocate`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.MeshProcessingLocate`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.RandomLocationOnMesh(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Find a random point on mesh surface.
            </summary>
            <param name="mesh">The mesh.</param>
            <returns>A random point on mesh surface.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.RandomLocationOnMesh(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Find a random point on mesh surface.
            </summary>
            <param name="mesh">The mesh.</param>
            <returns>A random point on mesh surface.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.LocateFace(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Find the face the ray intersects with.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="ray">Th ray.</param>
            <returns>The hit result with theface index, hit point and the barycentric coords.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.LocateFace(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Shapes.Ray3d)">
            <summary>
            Find the face the ray intersects with.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="ray">Th ray.</param>
            <returns>The hit result with theface index, hit point and the barycentric coords.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.ClosestFace(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the closest face to the point.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="point">Th point.</param>
            <returns>The hit result with the face index, closest point and the barycentric coords.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate`1.ClosestFace(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Find the closest face to the point.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="point">Th point.</param>
            <returns>The hit result with the face index, closest point and the barycentric coords.</returns>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingLocate">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Processing.MeshProcessingLocate.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingLocate.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingMeshing`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.MeshProcessingMeshing`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.Extrude(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Fills output with a closed mesh bounding the volume swept by input when translating its vertices by dir.
            The mesh is oriented so that the faces corresponding to input in output have the same orientation.
            </summary>
            <param name="mesh">The a valid closed mesh.</param>
            <param name="dir">The direction vector.</param>
            <returns>The extuded mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.Extrude(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Numerics.Vector3d)">
            <summary>
            Fills output with a closed mesh bounding the volume swept by input when translating its vertices by dir.
            The mesh is oriented so that the faces corresponding to input in output have the same orientation.
            </summary>
            <param name="mesh">The a valid closed mesh.</param>
            <param name="dir">The direction vector.</param>
            <returns>The extuded mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.Fair(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32,System.Int32)">
            <summary>
            Fairs a region on a triangle mesh based on a ring of k vertices from the index vertex.
            The points of the selected vertices are relocated to yield an as-smooth-as-possible surface patch,
            based on solving a linear bi-Laplacian system with boundary constraints
            The region described by vertices might contain multiple disconnected components.
            Note that the mesh connectivity is not altered in any way, only vertex locations get updated.
            Fairing might fail if fixed vertices, which are used as boundary conditions, 
            do not suffice to solve constructed linear system.
            Note that if the vertex range to which fairing is applied contains all the vertices of the triangle mesh, 
            fairing does not fail, but the mesh gets shrinked to the origin.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="index">The vertex index in the mesh to start hthe k ring region from.</param>
            <param name="k_ring">The number of vertics to expand the region to.</param>
            <returns>If the fairing was successfully run.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.Refine(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Double)">
            <summary>
            Refines a triangle mesh
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="density_control_factor">a factor to control density of the output mesh, 
            where larger values lead to denser refinements. Defalus to sqrt of 2.</param>
            <returns>The number of new vertices added.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.Refine(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Double)">
            <summary>
            Refines a triangle mesh
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="density_control_factor">a factor to control density of the output mesh, 
            where larger values lead to denser refinements. Defalus to sqrt of 2.</param>
            <returns>The number of new vertices added.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.IsotropicRemeshing(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Double,System.Int32)">
            <summary>
            Remeshes a triangulated region of a meshgon mesh.
            This operation sequentially performs edge splits, edge collapses, edge flips, 
            tangential relaxation and projection to the initial surface to generate 
            a smooth mesh with a prescribed edge length.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="iterations">The number of times to perform the remeshing.</param>
            <param name="target_edge_length">the edge length that is targeted in the remeshed patch. 
            If 0 is passed then only the edge-flip, tangential relaxation, and projection steps will be done.</param>
            <returns>The number of new vertices added.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.IsotropicRemeshing(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Double,System.Int32)">
            <summary>
            Remeshes a triangulated region of a meshgon mesh.
            This operation sequentially performs edge splits, edge collapses, edge flips, 
            tangential relaxation and projection to the initial surface to generate 
            a smooth mesh with a prescribed edge length.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="iterations">The number of times to perform the remeshing.</param>
            <param name="target_edge_length">the edge length that is targeted in the remeshed patch. 
            If 0 is passed then only the edge-flip, tangential relaxation, and projection steps will be done.</param>
            <returns>The number of new vertices added.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.RandomPerturbation(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Double)">
            <summary>
            randomly perturbs the locations of vertices of a triangulated surface mesh.
            By default, the vertices are re-projected onto the input surface after 
            perturbation.Note that no geometric checks are done after the perturbation 
            (face orientation might become incorrect and self-intersections might be introduced).
            </summary>
            <param name="mesh">A mesh.</param>
            <param name="perturbation_max_size">The maximun amount a vertex will be pertured. Must be greater tha 0.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.RandomPerturbation(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Double)">
            <summary>
            randomly perturbs the locations of vertices of a triangulated surface mesh.
            By default, the vertices are re-projected onto the input surface after 
            perturbation.Note that no geometric checks are done after the perturbation 
            (face orientation might become incorrect and self-intersections might be introduced).
            </summary>
            <param name="mesh">A mesh.</param>
            <param name="perturbation_max_size">The maximun amount a vertex will be pertured. Must be greater tha 0.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.SmoothMeshByAngle(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Numerics.Degree,System.Int32)">
            <summary>
            Smooths a triangulated mesh.
            This function attempts to make the triangle angle and area distributions as uniform 
            as possible by moving(non-constrained) vertices.
            Angle-based smoothing does not change the combinatorial information of the mesh.
            Area-based smoothing might change the combinatorial information, unless specified otherwise.
            It is also possible to make the smoothing algorithm "safer" by rejecting moves that, 
            when applied, would worsen the quality of the mesh, e.g.that would decrease the value
            of the smallest angle around a vertex or create self-intersections.
            Optionally, the points are reprojected after each iteration.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="featureAngle">The edge angle that counts a feature and wont be smoothed.</param>
            <param name="iterations">The number of iterations for the sequence of the smoothing iterations performed</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.SplitLongEdges(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Double)">
            <summary>
            splits the edges listed in edges into sub-edges that are not longer than the given threshold max_length.
            Note this function is useful to split constrained edges before calling isotropic_remeshing() with protection
            of constraints activated (to match the constrained edge length required by the remeshing algorithm to be guaranteed to terminate)
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="target_edge_length">The edge length above which an edge from edges is split into to sub-edges</param>
            <returns>The number of new edges added to the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.SplitLongEdges(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Double)">
            <summary>
            splits the edges listed in edges into sub-edges that are not longer than the given threshold max_length.
            Note this function is useful to split constrained edges before calling isotropic_remeshing() with protection
            of constraints activated (to match the constrained edge length required by the remeshing algorithm to be guaranteed to terminate)
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="target_edge_length">The edge length above which an edge from edges is split into to sub-edges</param>
            <returns>The number of new edges added to the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.TriangulateFace(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32)">
            <summary>
            Triangulate a single face in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="face">The faces index in the mesh.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.TriangulateFace(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32)">
            <summary>
            Triangulate a single face in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="face">The faces index in the mesh.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.TriangulateFaces(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32[],System.Int32)">
            <summary>
            Triangulate a range of faces in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="faces">The faces to triangulate.</param>
            <param name="count">The length of the face array.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing`1.TriangulateFaces(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32[],System.Int32)">
            <summary>
            Triangulate a range of faces in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="faces">The faces to triangulate.</param>
            <param name="count">The length of the face array.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingMeshing">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Processing.MeshProcessingMeshing.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingMeshing.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingOrientation`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.MeshProcessingOrientation`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.DoesBoundAVolume(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Indicates if mesh bounds a volume.
            </summary>
            <param name="mesh">A closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.DoesBoundAVolume(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Indicates if mesh bounds a volume.
            </summary>
            <param name="mesh">A closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.IsOutwardOriented(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Tests whether a closed triangle mesh has a positive orientation.
            A closed triangle mesh is considered to have a positive orientation
            if the normal vectors to all its faces point outside the domain bounded 
            by the triangle mesh.The normal vector to each face is chosen pointing
            on the side of the face where its sequence of vertices is seen counterclockwise.
            </summary>
            <param name="mesh">A closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.IsOutwardOriented(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Tests whether a closed triangle mesh has a positive orientation.
            A closed triangle mesh is considered to have a positive orientation
            if the normal vectors to all its faces point outside the domain bounded 
            by the triangle mesh.The normal vector to each face is chosen pointing
            on the side of the face where its sequence of vertices is seen counterclockwise.
            </summary>
            <param name="mesh">A closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.Orient(CGALDotNet.Processing.ORIENTATE,CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Orient the faces in the mesh.
            </summary>
            <param name="orientate">The orientation method.</param>
            <param name="mesh">A valid closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.Orient(CGALDotNet.Processing.ORIENTATE,CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Orient the faces in the mesh.
            </summary>
            <param name="orientate">The orientation method.</param>
            <param name="mesh">A valid closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.Orient(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Makes each connected component of a closed triangulated surface mesh inward or outward oriented.
            </summary>
            <param name="mesh">A closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.Orient(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Makes each connected component of a closed triangulated surface mesh inward or outward oriented.
            </summary>
            <param name="mesh">A closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.OrientToBoundAVolume(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Orients the connected components of tm to make it bound a volume.
            </summary>
            <param name="mesh">A closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.OrientToBoundAVolume(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Orients the connected components of tm to make it bound a volume.
            </summary>
            <param name="mesh">A closed triangle mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.ReverseFaceOrientations(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Reverses for each face the order of the vertices along the face boundary.
            </summary>
            <param name="mesh">A valid mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation`1.ReverseFaceOrientations(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Reverses for each face the order of the vertices along the face boundary.
            </summary>
            <param name="mesh">A valid mesh.</param>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingOrientation">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Processing.MeshProcessingOrientation.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingOrientation.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingRepair`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.MeshProcessingRepair`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.DegenerateEdgeCount(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Find the number of degenerate edges in the mesh.
            </summary>
            <param name="mesh">The polygon mesh.</param>
            <returns>The number of degenerate edges in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.DegenerateTriangleCount(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Find the number of degenerate faces in the mesh.
            </summary>
            <param name="mesh">A triangle polygon mesh.</param>
            <returns>The number of degenerate faces in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.DegenerateTriangleCount(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Find the number of degenerate faces in the mesh.
            </summary>
            <param name="mesh">A triangle polygon mesh.</param>
            <returns>The number of degenerate faces in the mesh.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.NeedleTriangleCount(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Double)">
            <summary>
            Checks whether a triangle face is needle.
            A triangle is said to be a needle if its longest edge is much longer than its shortest edge.
            </summary>
            <param name="mesh">A triangle polygon mesh.</param>
            <param name="threshold">A bound on the ratio of the longest edge length and the shortest edge length.</param>
            <returns>The number of needle triangles.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.NeedleTriangleCount(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Double)">
            <summary>
            Checks whether a triangle face is needle.
            A triangle is said to be a needle if its longest edge is much longer than its shortest edge.
            </summary>
            <param name="mesh">A triangle polygon mesh.</param>
            <param name="threshold">A bound on the ratio of the longest edge length and the shortest edge length.</param>
            <returns>The number of needle triangles.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.NonManifoldVertexCount(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Collects the non-manifold vertices (if any) present in the mesh.
            A non-manifold vertex v is returned via one incident halfedge h such that target(h, pm) = v 
            for all the umbrellas that v appears in (an umbrella being the set of faces incident to all 
            the halfedges reachable by walking around v using hnext = prev(opposite(h, pm), pm), starting from h).
            </summary>
            <param name="mesh">A triangle polygon mesh.</param>
            <returns>The non manifold vertex count.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.NonManifoldVertexCount(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Collects the non-manifold vertices (if any) present in the mesh.
            A non-manifold vertex v is returned via one incident halfedge h such that target(h, pm) = v 
            for all the umbrellas that v appears in (an umbrella being the set of faces incident to all 
            the halfedges reachable by walking around v using hnext = prev(opposite(h, pm), pm), starting from h).
            </summary>
            <param name="mesh">A triangle polygon mesh.</param>
            <returns>The non manifold vertex count.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.RepairPolygonSoup(CGALDotNet.Polyhedra.Polyhedron3{`0})">
             <summary>
             Cleans a given polygon soup through various repairing operations.
            
             More precisely, this function carries out the following tasks, in the same order as they are listed:
            
             merging of duplicate points.
             simplification of polygons to remove geometrically identical consecutive vertices;
             splitting of "pinched" polygons, that is polygons in which a geometric position appears more than once.
             The splitting process results in multiple non-pinched polygons;
             removal of invalid polygons, that is polygons with fewer than 2 vertices;
             removal of duplicate polygons.
             removal of isolated points.
             </summary>
             <param name="mesh">The polygon mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.RepairPolygonSoup(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
             <summary>
             Cleans a given polygon soup through various repairing operations.
            
             More precisely, this function carries out the following tasks, in the same order as they are listed:
            
             merging of duplicate points.
             simplification of polygons to remove geometrically identical consecutive vertices;
             splitting of "pinched" polygons, that is polygons in which a geometric position appears more than once.
             The splitting process results in multiple non-pinched polygons;
             removal of invalid polygons, that is polygons with fewer than 2 vertices;
             removal of duplicate polygons.
             removal of isolated points.
             </summary>
             <param name="mesh">The polygon mesh.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.StitchBoundaryCycles(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            stitches together, whenever possible, two halfedges belonging to the same boundary cycle.
            Two border halfedges h1 and h2 can be stitched if the points associated to the source and
            target vertices of h1 are the same as those of the target and source vertices of h2, respectively.
            </summary>
            <param name="mesh">The polygon mesh.</param>
            <returns>The number of stiched boundaries.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.StitchBoundaryCycles(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            stitches together, whenever possible, two halfedges belonging to the same boundary cycle.
            Two border halfedges h1 and h2 can be stitched if the points associated to the source and
            target vertices of h1 are the same as those of the target and source vertices of h2, respectively.
            </summary>
            <param name="mesh">The polygon mesh.</param>
            <returns>The number of stiched boundaries.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.StitchBorders(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Stitches together border halfedges in a polygon mesh.
            </summary>
            <param name="mesh">The polygon mesh.</param>
            <returns>The number of stiched borders.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.StitchBorders(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Stitches together border halfedges in a polygon mesh.
            </summary>
            <param name="mesh">The polygon mesh.</param>
            <returns>The number of stiched borders.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.RemoveIsolatedVertices(CGALDotNet.Polyhedra.Polyhedron3{`0})">
            <summary>
            Removes the isolated vertices from any polygon mesh.
            A vertex is considered isolated if it is not incident to any simplex of higher dimension.
            </summary>
            <param name="mesh">The polygon mesh.</param>
            <returns>The number of vertices that were removed.</returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair`1.RemoveIsolatedVertices(CGALDotNet.Polyhedra.SurfaceMesh3{`0})">
            <summary>
            Removes the isolated vertices from any polygon mesh.
            A vertex is considered isolated if it is not incident to any simplex of higher dimension.
            </summary>
            <param name="mesh">The polygon mesh.</param>
            <returns>The number of vertices that were removed.</returns>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingRepair">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Processing.MeshProcessingRepair.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingRepair.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingSlicer`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.MeshProcessingSlicer`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer`1.Slice(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNetGeometry.Shapes.Plane3d,System.Collections.Generic.List{CGALDotNet.Polylines.Polyline3{`0}})">
            <summary>
            Find the line formed from the intersection of the plane and the mesh.
            </summary>
            <param name="mesh">The mesh. Is not modified.</param>
            <param name="plane">The plane.</param>
            <param name="results">The polylines from the intersection.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer`1.Slice(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Shapes.Plane3d,System.Collections.Generic.List{CGALDotNet.Polylines.Polyline3{`0}})">
            <summary>
            Find the line formed from the intersection of the plane and the mesh.
            </summary>
            <param name="mesh">The mesh. Is not modified.</param>
            <param name="plane">The plane.</param>
            <param name="results">The polylines from the intersection.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer`1.Slice(CGALDotNet.Polyhedra.Polyhedron3{`0},CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,System.Double,System.Collections.Generic.List{CGALDotNet.Polylines.Polyline3{`0}})">
            <summary>
            Find the lines formed by slicing the mesh from the start
            point to the end point creating a plane at each increment.
            </summary>
            <param name="mesh">The mesh. Is not modified.</param>
            <param name="start">The point to start from.</param>
            <param name="end">The point to end at.</param>
            <param name="increment">Amount to increment each plane.</param>
            <param name="results">he polylines from the intersection.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer`1.Slice(CGALDotNet.Polyhedra.SurfaceMesh3{`0},CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Point3d,System.Double,System.Collections.Generic.List{CGALDotNet.Polylines.Polyline3{`0}})">
            <summary>
            Find the lines formed by slicing the mesh from the start
            point to the end point creating a plane at each increment.
            </summary>
            <param name="mesh">The mesh. Is not modified.</param>
            <param name="start">The point to start from.</param>
            <param name="end">The point to end at.</param>
            <param name="increment">Amount to increment each plane.</param>
            <param name="results">he polylines from the intersection.</param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer`1.GetLines(System.Int32,System.Collections.Generic.List{CGALDotNet.Polylines.Polyline3{`0}})">
            <summary>
            
            </summary>
            <param name="count"></param>
            <param name="results"></param>
        </member>
        <member name="T:CGALDotNet.Processing.MeshProcessingSlicer">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Processing.MeshProcessingSlicer.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.MeshProcessingSlicer.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.SurfaceSimplification`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.SurfaceSimplification`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SurfaceSimplification`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SurfaceSimplification`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CGALDotNet.Processing.SurfaceSimplification">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SurfaceSimplification.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SurfaceSimplification.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="P:CGALDotNet.Processing.SurfaceSimplification.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SurfaceSimplification.Simplify(CGALDotNet.Polyhedra.Polyhedron3,System.Double)">
            <summary>
            Simplify the mesh.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="stop_ratio">A percentage 0-1 of edges to remove.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SurfaceSimplification.Simplify(CGALDotNet.Polyhedra.SurfaceMesh3,System.Double)">
            <summary>
            Simplify the mesh.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="stop_ratio">A percentage 0-1 of edges to remove.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SurfaceSimplification.ReleasePtr">
            <summary>
            Release the unmanaged resourses.
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.SUBDIVISION_METHOD">
            <summary>
            
            </summary>
        </member>
        <member name="T:CGALDotNet.Processing.SubdivisionSurface`1">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:CGALDotNet.Processing.SubdivisionSurface`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide(CGALDotNet.Processing.SUBDIVISION_METHOD,CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="method"></param>
            <param name="mesh">A valid mesh. Must be a triangle mesh for loop or sqrt3.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide(CGALDotNet.Processing.SUBDIVISION_METHOD,CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="method"></param>
            <param name="mesh">A valid mesh. Must be a triangle mesh for loop or sqrt3.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide_CatmullClark(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide_CatmullClark(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="mesh">A valid mesh.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide_Loop(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide_Loop(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide_DoSabin(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide_Sqrt3(CGALDotNet.Polyhedra.Polyhedron3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface`1.Subdivide_Sqrt3(CGALDotNet.Polyhedra.SurfaceMesh3{`0},System.Int32)">
            <summary>
            Subdive each face in the mesh.
            </summary>
            <param name="mesh">A valid triangle mesh.</param>
            <param name="iterations">The number of subdivision iterations.</param>
        </member>
        <member name="T:CGALDotNet.Processing.SubdivisionSurface">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="P:CGALDotNet.Processing.SubdivisionSurface.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Processing.SubdivisionSurface.ReleasePtr">
            <summary>
            Release the unmanaged resourses.
            </summary>
        </member>
        <member name="T:CGALDotNet.Triangulations.BaseTriangulation2">
            <summary>
            Base triangulation class for Triangulation, DelaunayTriangulation,
            ConstrainedTriangulation and ConstrainedDelaunayTriangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.#ctor(CGALDotNet.Triangulations.BaseTriangulationKernel2)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.#ctor(CGALDotNet.Triangulations.BaseTriangulationKernel2,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.#ctor(CGALDotNet.Triangulations.BaseTriangulationKernel2,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation2.Kernel">
            <summary>
            The triangulations kernel.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation2.VertexCount">
            <summary>
            The number of verices in the triangulation.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation2.TriangleCount">
            <summary>
            The number of triangles in the triangulation.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation2.IndiceCount">
            <summary>
            The number of indices need to represent the
            triangulation (number of triangles * 3).
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation2.BuildStamp">
            <summary>
            A number that will change if the unmanaged 
            triangulation model changes.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.Clear">
            <summary>
            Clear the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.IsValid(System.Int32)">
            <summary>
            Is this a valid triangulation.
            </summary>
            <param name="level"></param>
            <returns>True if valid.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.ForceSetIndices">
            <summary>
            Force the face and vertex indices to be set.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.Insert(CGALDotNetGeometry.Numerics.Point2d)">
             <summary>
             Inserts point p in the triangulation.
            If point coincides with an already existing vertex the triangulation remains unchanged.
            If point is on an edge, the two incident faces are split in two.
            If point is strictly inside a face of the triangulation, the face is split in three.
            If point is strictly outside the convex hull, p is linked to all visible points on the 
            convex hull to form the new triangulation.
             </summary>
             <param name="point">The point to insert.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.Insert(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
             <summary>
             Inserts points into the triangulation.
            If point coincides with an already existing vertex the triangulation remains unchanged.
            If point is on an edge, the two incident faces are split in two.
            If point is strictly inside a face of the triangulation, the face is split in three.
            If point is strictly outside the convex hull, p is linked to all visible points on the 
            convex hull to form the new triangulation.
             </summary>
             <param name="points">The points to insert.</param>
             <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetPoints(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Get a array of all the points in the triangulation.
            </summary>
            <param name="points">The point array.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetIndices(System.Int32[],System.Int32)">
            <summary>
            Get a array of the triangle indices.
            </summary>
            <param name="indices"></param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetPoint(System.Int32,CGALDotNetGeometry.Numerics.Point2d@)">
            <summary>
            Get the vertices point.
            </summary>
            <param name="index">The vertex index.</param>
            <param name="point">The vertices point.</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetVertex(System.Int32,CGALDotNet.Triangulations.TriVertex2@)">
            <summary>
            Get a vertex.
            </summary>
            <param name="index">The vertex index.</param>
            <param name="vertex">The vertex.</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetVertices(CGALDotNet.Triangulations.TriVertex2[],System.Int32)">
            <summary>
            Get a array of all the vertices.
            </summary>
            <param name="vertices">The vertex array.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetFace(System.Int32,CGALDotNet.Triangulations.TriFace2@)">
            <summary>
            Get a triangule face.
            </summary>
            <param name="index">The faces index</param>
            <param name="face">The face</param>
            <returns>True if the face was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetFaces(CGALDotNet.Triangulations.TriFace2[],System.Int32)">
            <summary>
            Get a array of all the triangle faces.
            </summary>
            <param name="faces">A array of faces.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetSegment(System.Int32,System.Int32,CGALDotNetGeometry.Shapes.Segment2d@)">
            <summary>
            Get the segment between the face and a neighbour.
            </summary>
            <param name="faceIndex">The faces index</param>
            <param name="neighbourIndex">The neighbour (0-2) index in the face.</param>
            <param name="segment">The segment.</param>
            <returns>True if the face was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetTriangle(System.Int32,CGALDotNetGeometry.Shapes.Triangle2d@)">
            <summary>
            Get a faces triangle.
            </summary>
            <param name="faceIndex">The faces index</param>
            <param name="triangle">The triangle</param>
            <returns>True if the face was found</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetTriangles(CGALDotNetGeometry.Shapes.Triangle2d[],System.Int32)">
            <summary>
            Get a array of all the triangles.
            </summary>
            <param name="triangles">A array of triangules.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetCircumcenter(System.Int32,CGALDotNetGeometry.Numerics.Point2d@)">
            <summary>
            Get a faces circumcenter.
            </summary>
            <param name="faceIndex">The faces index</param>
            <param name="circumcenter">The circumcenter. A circle
            that passes through all three of the triangules vertices.</param>
            <returns>True if the face was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.GetCircumcenters(CGALDotNetGeometry.Numerics.Point2d[],System.Int32)">
            <summary>
            Get a array of all the circumcenters.
            </summary>
            <param name="circumcenters">A array of circumcenters.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.NeighbourIndex(System.Int32,System.Int32)">
            <summary>
            Get the index of the faces neighbour.
            </summary>
            <param name="faceIndex">The faces index.</param>
            <param name="neighbourIndex">The neighbour (0-2) index in the face.</param>
            <returns>The index of the neighbour face in the triangulation. 
            -1 if there is no neighbour face at this index.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.LocateFace(CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Triangulations.TriFace2@)">
            <summary>
            Locate the face the point hits.
            </summary>
            <param name="point">The point.</param>
            <param name="face">The face the point has hit.</param>
            <returns>True if the point hit a face.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.LocateVertex(CGALDotNetGeometry.Numerics.Point2d,System.Double,CGALDotNet.Triangulations.TriVertex2@)">
            <summary>
            Locate the closest vertex to point.
            </summary>
            <param name="point">The point</param>
            <param name="radius">The distance the point must be within to count as hitting the vertex.</param>
            <param name="vertex">The closest vertex.</param>
            <returns>True if point hit a face and found a vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.LocateEdge(CGALDotNetGeometry.Numerics.Point2d,System.Double,CGALDotNet.Triangulations.TriEdge2@)">
            <summary>
            Locate the closest  edge and segment to point.
            </summary>
            <param name="point">The point</param>
            <param name="radius">The distance the point must be within to count as hitting the edge.</param>
            <param name="edge">The closest edge.</param>
            <returns>True if the point hit a face and found a edge.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.RemoveVertex(System.Int32)">
            <summary>
            Remove the vertex.
            </summary>
            <param name="index">The vertices index.</param>
            <returns>True if removed.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.FlipEdge(System.Int32,System.Int32)">
            <summary>
            Flip a edge between the face and a neighbour.
            </summary>
            <param name="faceIndex">The faces index</param>
            <param name="neighbourIndex">The neighbour (0-2) index in the face.</param>
            <returns>True if the edge was flipped.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.Translate(CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Translate the triangulation.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.Rotate(CGALDotNetGeometry.Numerics.Radian)">
            <summary>
            Rotate the triangulation.
            </summary>
            <param name="rotation">The amount to rotate in radians.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.Scale(System.Double)">
            <summary>
            Scale the triangulation.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.Transform(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Radian,System.Double)">
            <summary>
            Transform the triangulation with a TRS matrix.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation2.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Triangulations.BaseTriangulation3">
            <summary>
            Base triangulation class for Triangulation, DelaunayTriangulation 
            and ConstrainedTriangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.#ctor(CGALDotNet.Triangulations.BaseTriangulationKernel3,CGALDotNetGeometry.Numerics.Point3d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.#ctor(CGALDotNet.Triangulations.BaseTriangulationKernel3)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.#ctor(CGALDotNet.Triangulations.BaseTriangulationKernel3,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.Kernel">
            <summary>
            The triangulations kernel.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.Dimension">
            <summary>
            Returns the dimension of the affine hull.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.VertexCount">
            <summary>
            Returns the number of finite vertices.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.TetrahedronCount">
            <summary>
            Returns the number of cells or 0 if Dimension less than 3.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.FiniteTetrahedronCount">
            <summary>
            The number of finite cells.
            Returns 0 if Dimension less than 3.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.EdgeCount">
            <summary>
            The number of edges.
            Returns 0 if Dimension less than 1.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.FiniteEdgeCount">
            <summary>
            The number of finite edges.
            Returns 0 if Dimension less than 1.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.TriangleCount">
            <summary>
            The number of facets.
            Returns 0 if Dimension less than 2.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.FiniteTriangleCount">
            <summary>
            The number of facets.
            Returns 0 if Dimension less than 2.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.BaseTriangulation3.TetrahdronIndiceCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.Clear">
            <summary>
            Clear the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.Insert(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Inserts the point p in the triangulation.
            If point p coincides with an already existing vertex the triangulation remains unchanged.
            If point p lies in the convex hull of the points, it is added naturally: 
            if it lies inside a cell, the cell is split into four cells, if it lies 
            on a facet, the two incident cells are split into three cells, if it lies
            on an edge, all the cells incident to this edge are split into two cells.
            If point p is strictly outside the convex hull but in the affine hull, p 
            is linked to all visible points on the convex hull to form the new triangulation.
            If point p is outside the affine hull of the points, p is linked to all the points,
            and the dimension of the triangulation is incremented. All the points now belong to 
            the boundary of the convex hull, so, the infinite vertex is linked to all the points 
            to triangulate the new infinite face.
            </summary>
            <param name="point">The point to insert</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.Insert(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Insert all the points in the array.
            </summary>
            <param name="points">The points to insert.</param>
            <param name="count">The arrays length</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.GetPoints(CGALDotNetGeometry.Numerics.Point3d[],System.Int32)">
            <summary>
            Get all the points in the triangulation.
            </summary>
            <param name="points">The array to copy into.</param>
            <param name="count">The arrays length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.GetPoints(System.Collections.Generic.List{CGALDotNetGeometry.Numerics.Point3d})">
            <summary>
            Get all the points in the triangulation.
            </summary>
            <param name="points">The array to copy into.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.GetTetrahedronIndices(System.Int32[],System.Int32)">
            <summary>
            
            </summary>
            <param name="indices"></param>
            <param name="count"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.GetSegmentsIndices(System.Collections.Generic.List{CGALDotNetGeometry.Shapes.SegmentIndex})">
            <summary>
            
            </summary>
            <param name="segments"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.TetrahedronToSegmentIndices">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.Translate(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Translate each point in the mesh.
            </summary>
            <param name="translation">The amount to translate.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.Rotate(CGALDotNetGeometry.Numerics.Quaternion3d)">
            <summary>
            Rotate each point in the mesh.
            </summary>
            <param name="rotation">The amount to rotate.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.Scale(CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Scale each point in the mesh.
            </summary>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.Transform(CGALDotNetGeometry.Numerics.Point3d,CGALDotNetGeometry.Numerics.Quaternion3d,CGALDotNetGeometry.Numerics.Point3d)">
            <summary>
            Transform each point in the mesh.
            </summary>
            <param name="translation">The amount to translate.</param>
            <param name="rotation">The amount to rotate.</param>
            <param name="scale">The amount to scale.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.BaseTriangulation3.ReleasePtr">
            <summary>
            Release any unmanaged resources.
            </summary>
        </member>
        <member name="T:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2`1">
            <summary>
            The generic constrained triangulation class.
            </summary>
            <typeparam name="K">The kernel</typeparam>
        </member>
        <member name="F:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2`1.Instance">
            <summary>
            A static instance of the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2`1.ToString">
            <summary>
            The triangulation as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2`1.Copy">
            <summary>
            A deep copy of the triangulation.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2`1.ComputeHull">
            <summary>
            Compute the convex of the triagulation.
            </summary>
            <returns>The convex hull polygon.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2">
            <summary>
            The abstract triangulation class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.TriangulationKernel">
            <summary>
            The kernel with the functions unique to the constrained triangulation.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.ConstrainedEdgeCount">
            <summary>
            The number of constrainted edges in the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.MoveVertex(System.Int32,CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Triangulations.TriVertex2@)">
            <summary>
            Move the vertex.
            </summary>
            <param name="index"></param>
            <param name="point"></param>
            <param name="vertex">The moved vertex</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.Insert(CGALDotNet.Polygons.Polygon2)">
            <summary>
            Insert the polygons points into the triangulation.
            May not retain the poylgons edges.
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.Insert(CGALDotNet.Polygons.PolygonWithHoles2)">
            <summary>
            Insert the polygons points into the triangulation.
            May not retain the poylgons edges.
            </summary>
            <param name="pwh"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.InsertConstraint(CGALDotNet.Polygons.Polygon2)">
            <summary>
            Insert the polygons points and the edges as constraints into the triangulation.
            Will retatin the poylgons edges.
            </summary>
            <param name="polygon">The polygon to insert.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.InsertConstraint(CGALDotNet.Polygons.PolygonWithHoles2)">
            <summary>
            Insert the polygons points and the edges as constraints into the triangulation.
            Will retatin the poylgons edges.
            </summary>
            <param name="pwh">The polygon to insert.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.IncidentConstraintCount(System.Int32)">
            <summary>
            Get the number of constrainted edges incident to this vertex.
            </summary>
            <param name="vertIndex">The vertex index in the triagulation.</param>
            <returns>The number of constrainted edges to the vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.HasIncidentConstraint(System.Int32)">
            <summary>
            Does this vertex have a constrainted edge.
            </summary>
            <param name="vertIndex">The vertex index in the triagulation.</param>
            <returns>Does this vertex have a constrainted edge.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.InsertConstraint(CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            Add a segment as a constraint.
            </summary>
            <param name="segment">The segment to add.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.InsertConstraint(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Add the two points as a segment constraint.
            </summary>
            <param name="a">The segments point a.</param>
            <param name="b">The segments point b.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.InsertConstraints(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Add a list of segments as constraint to the triangulation.
            </summary>
            <param name="segments">The segment array.</param>
            <param name="count">The length of the segment array.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.GetConstraints(CGALDotNet.Triangulations.TriEdge2[],System.Int32)">
            <summary>
            Get a array of all the constraint edges in the triangulation.
            </summary>
            <param name="constraints">The edge array.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.GetConstraints(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Get a array of all the constraint segments in the triangulation.
            </summary>
            <param name="constraints">The segment array.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.GetIncidentConstraints(System.Int32,CGALDotNet.Triangulations.TriEdge2[],System.Int32)">
            <summary>
            Get the constraints incident to the vertex.
            </summary>
            <param name="vertexIndex">The vertex index in the triangulation.</param>
            <param name="constraints">The array of edges.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.RemoveConstraint(System.Int32,System.Int32)">
            <summary>
            Remove a constraint between a face and its neighbour.
            </summary>
            <param name="faceIndex">The faces index in the triangultion.</param>
            <param name="neighbourIndex">The neighbours index in the faces neighbour array between 0-2.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.RemoveIncidentConstraints(System.Int32)">
            <summary>
            Remove all constraints incident to a vertex.
            </summary>
            <param name="vertexIndex">The vertex index in the triangulation.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.GetConstrainedDomainIndices(System.Collections.Generic.List{System.Int32})">
            <summary>
            Get the triangle indices for domain in the triangultion.
            Used to triangulate polygons.
            </summary>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedDelaunayTriangulation2.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:CGALDotNet.Triangulations.ConstrainedTriangulation2`1">
            <summary>
            The generic constrained triangulation class.
            </summary>
            <typeparam name="K">The kernel</typeparam>
        </member>
        <member name="F:CGALDotNet.Triangulations.ConstrainedTriangulation2`1.Instance">
            <summary>
            A static instance of the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2`1.ToString">
            <summary>
            The triangulation as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2`1.Copy">
            <summary>
            A deep copy of the triangulation.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2`1.ComputeHull">
            <summary>
            Compute the convex of the triagulation.
            </summary>
            <returns>The convex hull polygon.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:CGALDotNet.Triangulations.ConstrainedTriangulation2">
            <summary>
            The abstract triangulation class.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Triangulations.ConstrainedTriangulation2.TriangulationKernel">
            <summary>
            The kernel with the functions unique to the constrained triangulation.
            </summary>
        </member>
        <member name="P:CGALDotNet.Triangulations.ConstrainedTriangulation2.ConstrainedEdgeCount">
            <summary>
            The number of constrainted edges in the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.MoveVertex(System.Int32,CGALDotNetGeometry.Numerics.Point2d,CGALDotNet.Triangulations.TriVertex2@)">
            <summary>
            Move the vertex.
            </summary>
            <param name="index"></param>
            <param name="point"></param>
            <param name="vertex">The moved vertex</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.Insert(CGALDotNet.Polygons.Polygon2)">
            <summary>
            Insert the polygons points into the triangulation.
            May not retain the poylgons edges.
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.Insert(CGALDotNet.Polygons.PolygonWithHoles2)">
            <summary>
            Insert the polygons points into the triangulation.
            May not retain the poylgons edges.
            </summary>
            <param name="pwh"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.InsertConstraint(CGALDotNet.Polygons.Polygon2)">
            <summary>
            Insert the polygons points and the edges as constraints into the triangulation.
            Will retatin the poylgons edges.
            </summary>
            <param name="polygon">The polygon to insert.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.InsertConstraint(CGALDotNet.Polygons.PolygonWithHoles2)">
            <summary>
            Insert the polygons points and the edges as constraints into the triangulation.
            Will retatin the poylgons edges.
            </summary>
            <param name="pwh">The polygon to insert.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.IncidentConstraintCount(System.Int32)">
            <summary>
            Get the number of constrainted edges incident to this vertex.
            </summary>
            <param name="vertIndex">The vertex index in the triagulation.</param>
            <returns>The number of constrainted edges to the vertex.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.HasIncidentConstraint(System.Int32)">
            <summary>
            Does this vertex have a constrainted edge.
            </summary>
            <param name="vertIndex">The vertex index in the triagulation.</param>
            <returns>Does this vertex have a constrainted edge.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.InsertConstraint(CGALDotNetGeometry.Shapes.Segment2d)">
            <summary>
            Add a segment as a constraint.
            </summary>
            <param name="segment">The segment to add.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.InsertConstraint(CGALDotNetGeometry.Numerics.Point2d,CGALDotNetGeometry.Numerics.Point2d)">
            <summary>
            Add the two points as a segment constraint.
            </summary>
            <param name="a">The segments point a.</param>
            <param name="b">The segments point b.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.InsertConstraints(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Add a list of segments as constraint to the triangulation.
            </summary>
            <param name="segments">The segment array.</param>
            <param name="count">The length of the segment array.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.GetConstraints(CGALDotNet.Triangulations.TriEdge2[],System.Int32)">
            <summary>
            Get a array of all the constraint edges in the triangulation.
            </summary>
            <param name="constraints">The edge array.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.GetConstraints(CGALDotNetGeometry.Shapes.Segment2d[],System.Int32)">
            <summary>
            Get a array of all the constraint segments in the triangulation.
            </summary>
            <param name="constraints">The segment array.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.GetIncidentConstraints(System.Int32,CGALDotNet.Triangulations.TriEdge2[],System.Int32)">
            <summary>
            Get the constraints incident to the vertex.
            </summary>
            <param name="vertexIndex">The vertex index in the triangulation.</param>
            <param name="constraints">The array of edges.</param>
            <param name="count">The ararys length.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.RemoveConstraint(System.Int32,System.Int32)">
            <summary>
            Remove a constraint between a face and its neighbour.
            </summary>
            <param name="faceIndex">The faces index in the triangultion.</param>
            <param name="neighbourIndex">The neighbours index in the faces neighbour array between 0-2.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.RemoveIncidentConstraints(System.Int32)">
            <summary>
            Remove all constraints incident to a vertex.
            </summary>
            <param name="vertexIndex">The vertex index in the triangulation.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.GetConstrainedDomainIndices(System.Collections.Generic.List{System.Int32})">
            <summary>
            Get the triangle indices for domain in the triangultion.
            Used to triangulate polygons.
            </summary>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.ConstrainedTriangulation2.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:CGALDotNet.Triangulations.DelaunayTriangulation2`1">
            <summary>
            The generic delaunay triangulation class.
            </summary>
            <typeparam name="K">The kerne</typeparam>
        </member>
        <member name="F:CGALDotNet.Triangulations.DelaunayTriangulation2`1.Instance">
            <summary>
            A static instance of the delaunay triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2`1.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2`1.ToString">
            <summary>
            The triangulation as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2`1.Copy">
            <summary>
            A deep copy of the triangulation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2`1.Insert(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Insert the polygons points into the triangulation.
            May not retatin the poylgons edges.
            </summary>
            <param name="polygon">The polygon to insert.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2`1.Insert(CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Insert the polygons points into the triangulation.
            May not retatin the poylgons edges.
            </summary>
            <param name="pwh">The polygon to insert.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2`1.ComputeHull">
            <summary>
            Compute the convex of the triagulation.
            </summary>
            <returns>The convex hull polygon.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:CGALDotNet.Triangulations.DelaunayTriangulation2">
            <summary>
            The anstract base class for the delaunay triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Triangulations.DelaunayTriangulation2.TriangulationKernel">
            <summary>
            The kernel with the functions unique to the delaunay triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2.MoveVertex(System.Int32,CGALDotNetGeometry.Numerics.Point2d,System.Boolean,CGALDotNet.Triangulations.TriVertex2@)">
            <summary>
            Move the vertex.
            </summary>
            <param name="index"></param>
            <param name="point"></param>
            <param name="ifNoCollision">If there is not already another vertex placed on the point, 
            the triangulation is modified such that the new position of vertex same as point.</param>
            <param name="vertex">The moved vertex</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2.GetVoronoCount(System.Int32@,System.Int32@)">
            <summary>
            If the dual voronoi diagram of the triangulation is taken
            How many segments and rays would be produced.
            </summary>
            <param name="numSegments">The number of segments.</param>
            <param name="numRays">The number of rays.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2.GetVoronoiSegments">
            <summary>
            Get a array of the voronoi's segments.
            </summary>
            <returns>A array of the voronoi's segments.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2.GetVoronoiRays">
            <summary>
            Get a array of the voronois rays.
            These are the segment at edge of triangulation that 
            a end point can not be determined.
            </summary>
            <returns>A array of the voronoi's rays.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation2.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:CGALDotNet.Triangulations.DelaunayTriangulation3`1">
            <summary>
            Generic triangulation class.
            </summary>
            <typeparam name="K">The kerel.</typeparam>
        </member>
        <member name="F:CGALDotNet.Triangulations.DelaunayTriangulation3`1.Instance">
            <summary>
            Static instance of a triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3`1.#ctor(CGALDotNetGeometry.Numerics.Point3d[])">
            <summary>
            Construct a triangulation from the points.
            </summary>
            <param name="points">The triangulation points.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3`1.#ctor(System.IntPtr)">
            <summary>
            Construct from a existing triangulation.
            </summary>
            <param name="ptr">A pointer to the unmanaged object.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3`1.ToString">
            <summary>
            The triangulation as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3`1.Copy">
            <summary>
            Create a deep copy of the triangulation.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3`1.Refine(System.Double,System.Int32)">
            <summary>
            Refine the triangulation.
            </summary>
            <param name="targetEdgeLength">The target edge lengths.</param>
            <param name="iterations">The number of iterations.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3`1.ComputeHull">
            <summary>
            Compute the convex of the triagulation.
            </summary>
            <returns>The convex hull polygon.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:CGALDotNet.Triangulations.DelaunayTriangulation3">
            <summary>
            Abstract base class for the triagulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point3d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Triangulations.DelaunayTriangulation3.TriangulationKernel">
            <summary>
            The kernel with the functions unique to the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.DelaunayTriangulation3.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:CGALDotNet.Triangulations.Triangulation2`1">
            <summary>
            Generic triangulation class.
            </summary>
            <typeparam name="K">The kerel.</typeparam>
        </member>
        <member name="F:CGALDotNet.Triangulations.Triangulation2`1.Instance">
            <summary>
            Static instance of a triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2`1.#ctor(CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            Construct a triangulation from the points.
            </summary>
            <param name="points">The triangulation points.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2`1.#ctor(System.IntPtr)">
            <summary>
            Construct from a existing triangulation.
            </summary>
            <param name="ptr">A pointer to the unmanaged object.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2`1.ToString">
            <summary>
            The triangulation as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2`1.Copy">
            <summary>
            Create a deep copy of the triangulation.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2`1.InsertPolygon(CGALDotNet.Polygons.Polygon2{`0})">
            <summary>
            Insert the points of the polygon into the triagulation.
            May no have the same edges as polygon.
            </summary>
            <param name="polygon">The polygon to insert/</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2`1.InsertPolygon(CGALDotNet.Polygons.PolygonWithHoles2{`0})">
            <summary>
            Insert the points of the polygon into the triagulation.
            May no have the same edges as polygon.
            </summary>
            <param name="pwh">The polygon to insert/</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2`1.ComputeHull">
            <summary>
            Compute the convex of the triagulation.
            </summary>
            <returns>The convex hull polygon.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:CGALDotNet.Triangulations.Triangulation2">
            <summary>
            Abstract base class for the triagulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point2d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Triangulations.Triangulation2.TriangulationKernel">
            <summary>
            The kernel with the functions unique to the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2.MoveVertex(System.Int32,CGALDotNetGeometry.Numerics.Point2d,System.Boolean,CGALDotNet.Triangulations.TriVertex2@)">
            <summary>
            Move the vertex.
            </summary>
            <param name="index"></param>
            <param name="point"></param>
            <param name="ifNoCollision">If there is not already another vertex placed on the point, 
            the triangulation is modified such that the new position of vertex same as point.</param>
            <param name="vertex">The moved vertex</param>
            <returns>True if the vertex was found.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation2.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:CGALDotNet.Triangulations.Triangulation3`1">
            <summary>
            Generic triangulation class.
            </summary>
            <typeparam name="K">The kerel.</typeparam>
        </member>
        <member name="F:CGALDotNet.Triangulations.Triangulation3`1.Instance">
            <summary>
            Static instance of a triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3`1.#ctor(CGALDotNetGeometry.Numerics.Point3d[])">
            <summary>
            Construct a triangulation from the points.
            </summary>
            <param name="points">The triangulation points.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3`1.#ctor(System.IntPtr)">
            <summary>
            Construct from a existing triangulation.
            </summary>
            <param name="ptr">A pointer to the unmanaged object.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3`1.ToString">
            <summary>
            The triangulation as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3`1.Copy">
            <summary>
            Create a deep copy of the triangulation.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3`1.Refine(System.Double,System.Int32)">
            <summary>
            Refine the triangulation.
            </summary>
            <param name="targetEdgeLength">The target edge lengths.</param>
            <param name="iterations">The number of iterations.</param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3`1.ComputeHull">
            <summary>
            Compute the convex of the triagulation.
            </summary>
            <returns>The convex hull polygon.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:CGALDotNet.Triangulations.Triangulation3">
            <summary>
            Abstract base class for the triagulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3.#ctor(CGALDotNet.CGALKernel)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3.#ctor(CGALDotNet.CGALKernel,CGALDotNetGeometry.Numerics.Point3d[])">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="points"></param>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3.#ctor(CGALDotNet.CGALKernel,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="ptr"></param>
        </member>
        <member name="P:CGALDotNet.Triangulations.Triangulation3.TriangulationKernel">
            <summary>
            The kernel with the functions unique to the triangulation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.Triangulation3.Print(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:CGALDotNet.Triangulations.TriEdge2">
            <summary>
            From Index to TwinIndex must match layout
            of the unmanaged TriEdge2 in the TriEdge2 header file.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriEdge2.FaceIndex">
            <summary>
            The edges face index in the triangulation.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriEdge2.NeighbourIndex">
            <summary>
            The neighbours index in the face array betwen 0 and 2.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriEdge2.Segment">
            <summary>
            The edges segment.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.TriEdge2.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="faceIndex">The face index in the triangulation</param>
            <param name="neighbourIndex">The neighbours index in the face array betwen 0 and 2.</param>
        </member>
        <member name="T:CGALDotNet.Triangulations.TriFace2">
            <summary>
            From Index to HalfEdgeIndex must match layout
            of the unmanaged TriFace2 in the TriFace2 header file.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriFace2.IsInfinite">
            <summary>
            Is this the infinite face.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriFace2.Index">
            <summary>
            The faces index in the triangulation.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriFace2.VertexIndex">
            <summary>
            The faces 3 vertices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Triangulations.TriFace2.GetVertexIndex(System.Int32)">
            <summary>
            Get a vertex index and wrap around array.
            </summary>
            <param name="i">The vertices index wrapped to 0-2.</param>
            <returns>The vertices index in the triangulation.</returns>
        </member>
        <member name="T:CGALDotNet.Triangulations.TriVertex2">
            <summary>
            From Point to HalfEdgeIndex must match layout
            of the unmanaged TriVertex2 in the TriVertex2 header file.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriVertex2.Point">
            <summary>
            The vertices point.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriVertex2.IsInfinite">
            <summary>
            Is this a infinite vertex.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriVertex2.Degree">
            <summary>
            The number of egdes connected to the vertex.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriVertex2.Index">
            <summary>
            The vertices index in the triangulation.
            </summary>
        </member>
        <member name="F:CGALDotNet.Triangulations.TriVertex2.FaceIndex">
            <summary>
            The one of the faces the vertex is connected to.
            </summary>
        </member>
        <member name="T:CGALDotNet.ArrayCache">
            <summary>
            Cache to reuse arrays.
            Thread safe?
            </summary>
        </member>
        <member name="M:CGALDotNet.ArrayCache.Point2dArray(System.Int32,System.Boolean)">
            <summary>
            Returns a array of Point2d objects that is at least the size of count.
            </summary>
            <param name="count">The minimum size of the array.</param>
            <param name="clear">Should the array be cleared first.</param>
            <returns>Returns a array of Point2d objects that is at least the size of count.</returns>
        </member>
        <member name="M:CGALDotNet.ArrayCache.Segment2dArray(System.Int32,System.Boolean)">
            <summary>
            Returns a array of Segment2d objects that is at least the size of count.
            </summary>
            <param name="count">The minimum size of the array.</param>
            <param name="clear">Should the array be cleared first.</param>
            <returns>Returns a array of Segment2d objects that is at least the size of count.</returns>
        </member>
        <member name="M:CGALDotNet.ArrayCache.Point3dArray(System.Int32,System.Boolean)">
            <summary>
            Returns a array of Point3d objects that is at least the size of count.
            </summary>
            <param name="count">The minimum size of the array.</param>
            <param name="clear">Should the array be cleared first.</param>
            <returns>Returns a array of Point3d objects that is at least the size of count.</returns>
        </member>
        <member name="M:CGALDotNet.ArrayCache.HPoint3dArray(System.Int32,System.Boolean)">
            <summary>
            Returns a array of HPoint3d objects that is at least the size of count.
            </summary>
            <param name="count">The minimum size of the array.</param>
            <param name="clear">Should the array be cleared first.</param>
            <returns>Returns a array of HPoint3d objects that is at least the size of count.</returns>
        </member>
        <member name="M:CGALDotNet.ArrayCache.IntArray1(System.Int32,System.Boolean)">
            <summary>
            Returns a array of ints that is at least the size of count.
            </summary>
            <param name="count">The minimum size of the array.</param>
            <param name="clear">Should the array be cleared first.</param>
            <returns>Returns a array of ints that is at least the size of count.</returns>
        </member>
        <member name="M:CGALDotNet.ArrayCache.IntArray2(System.Int32,System.Boolean)">
            <summary>
            Returns a array of ints that is at least the size of count.
            </summary>
            <param name="count">The minimum size of the array.</param>
            <param name="clear">Should the array be cleared first.</param>
            <returns>Returns a array of ints that is at least the size of count.</returns>
        </member>
        <member name="M:CGALDotNet.ArrayCache.MakeNewArray(System.Array,System.Int32)">
            <summary>
            Should a new array be created.
            </summary>
            <param name="arr">The current array.</param>
            <param name="count">The required new array size.</param>
            <returns>Creates a new array if disabled, the current one is null or to small.</returns>
        </member>
        <member name="M:CGALDotNet.ErrorUtil.CheckArray(System.Array,System.Int32)">
            <summary>
            Check a array that is passed to the c++ dll.
            If the array is invalid it will cause a hard crash.
            Array can be null if count is 0;
            </summary>
            <param name="array"></param>
            <param name="count"></param>
        </member>
    </members>
</doc>
