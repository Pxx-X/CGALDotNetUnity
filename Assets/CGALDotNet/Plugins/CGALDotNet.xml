<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CGALDotNet</name>
    </assembly>
    <members>
        <member name="M:CGALDotNet.Geometry.Box2d.Intersects(CGALDotNet.Geometry.Box2d)">
            <summary>
            Returns true if this box intersects the other box.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Box2d.Contains(CGALDotNet.Geometry.Box2d)">
            <summary>
            Does the box contain the other box.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Box2d.Contains(CGALDotNet.Geometry.Point2d)">
            <summary>
            Does the box contain the point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Box2d.Closest(CGALDotNet.Geometry.Point2d)">
            <summary>
            Find the closest point to the box.
            If point inside box return point.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Circle2d.Radius2">
            <summary>
            The squared radius.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Circle2d.Diameter">
            <summary>
            The circles diameter.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Circle2d.Area">
            <summary>
            The circles area.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Circle2d.Circumference">
            <summary>
            The circles circumference.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Circle2d.Contains(CGALDotNet.Geometry.Point2d)">
            <summary>
            Does the circle contain the point.
            </summary>
            <param name="p">The point</param>
            <returns>true if circle contains point</returns>
        </member>
        <member name="M:CGALDotNet.Geometry.Circle2d.Intersects(CGALDotNet.Geometry.Circle2d)">
            <summary>
            Does this circle intersect with the other circle.
            </summary>
            <param name="circle">The other circle</param>
            <returns>True if the circles intersect</returns>
        </member>
        <member name="T:CGALDotNet.Geometry.Degree">
            <summary>
            Represents a angle in degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Degree.angle">
            <summary>
            The angle in degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Degree.A0">
            <summary>
            0 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Degree.A90">
            <summary>
            90 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Degree.A180">
            <summary>
            180 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Degree.A270">
            <summary>
            270 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Degree.A360">
            <summary>
            360 degrees.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.#ctor(System.Double)">
            <summary>
            Create a new degree from a value.
            </summary>
            <param name="angle">The angle in degrees.</param>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Addition(CGALDotNet.Geometry.Degree,CGALDotNet.Geometry.Degree)">
            <summary>
            Add two angles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Addition(CGALDotNet.Geometry.Degree,System.Double)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_UnaryNegation(CGALDotNet.Geometry.Degree)">
            <summary>
            Negate the angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Addition(System.Double,CGALDotNet.Geometry.Degree)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Subtraction(CGALDotNet.Geometry.Degree,CGALDotNet.Geometry.Degree)">
            <summary>
            Subtract two angles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Subtraction(CGALDotNet.Geometry.Degree,System.Double)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Subtraction(System.Double,CGALDotNet.Geometry.Degree)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Multiply(CGALDotNet.Geometry.Degree,CGALDotNet.Geometry.Degree)">
            <summary>
            Multiply two angles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Multiply(CGALDotNet.Geometry.Degree,System.Double)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Multiply(System.Double,CGALDotNet.Geometry.Degree)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Division(CGALDotNet.Geometry.Degree,CGALDotNet.Geometry.Degree)">
            <summary>
            Divide two angles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Division(CGALDotNet.Geometry.Degree,System.Double)">
            <summary>
            Divide a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Implicit(CGALDotNet.Geometry.Radian)~CGALDotNet.Geometry.Degree">
            <summary>
            Cast from a radian to degrees.
            </summary>
            <param name="v">The angle in radians.</param>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Equality(CGALDotNet.Geometry.Degree,CGALDotNet.Geometry.Degree)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.op_Inequality(CGALDotNet.Geometry.Degree,CGALDotNet.Geometry.Degree)">
            <summary>
            Are these angles not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.Equals(System.Object)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.Equals(CGALDotNet.Geometry.Degree)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.GetHashCode">
            <summary>
            Angles hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.ToString">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Degree.ToString(System.String)">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="T:CGALDotNet.Geometry.Matrix2x2d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*2). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix2x2d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix2x2d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix2x2d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.#ctor(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix2x2d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix2x2d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix2x2d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix2x2d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix2x2d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.op_Addition(CGALDotNet.Geometry.Matrix2x2d,CGALDotNet.Geometry.Matrix2x2d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.op_Subtraction(CGALDotNet.Geometry.Matrix2x2d,CGALDotNet.Geometry.Matrix2x2d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.op_Multiply(CGALDotNet.Geometry.Matrix2x2d,CGALDotNet.Geometry.Matrix2x2d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.op_Multiply(CGALDotNet.Geometry.Matrix2x2d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.op_Multiply(System.Double,CGALDotNet.Geometry.Matrix2x2d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.op_Equality(CGALDotNet.Geometry.Matrix2x2d,CGALDotNet.Geometry.Matrix2x2d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.op_Inequality(CGALDotNet.Geometry.Matrix2x2d,CGALDotNet.Geometry.Matrix2x2d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.Equals(CGALDotNet.Geometry.Matrix2x2d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.TryInverse(CGALDotNet.Geometry.Matrix2x2d@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.SetColumn(System.Int32,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.SetRow(System.Int32,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.Rotate(CGALDotNet.Geometry.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix2x2d.ToMatrix3x3d">
            <summary>
            Convert to a float precision 3 dimension matrix.
            </summary>
        </member>
        <member name="T:CGALDotNet.Geometry.Matrix3x3d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*3). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix3x3d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix3x3d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix3x3d.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix3x3d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.#ctor(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix3x3d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix3x3d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix3x3d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix3x3d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix3x3d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.op_Addition(CGALDotNet.Geometry.Matrix3x3d,CGALDotNet.Geometry.Matrix3x3d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.op_Subtraction(CGALDotNet.Geometry.Matrix3x3d,CGALDotNet.Geometry.Matrix3x3d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.op_Multiply(CGALDotNet.Geometry.Matrix3x3d,CGALDotNet.Geometry.Matrix3x3d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.op_Multiply(CGALDotNet.Geometry.Matrix3x3d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.op_Multiply(System.Double,CGALDotNet.Geometry.Matrix3x3d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.op_Equality(CGALDotNet.Geometry.Matrix3x3d,CGALDotNet.Geometry.Matrix3x3d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.op_Inequality(CGALDotNet.Geometry.Matrix3x3d,CGALDotNet.Geometry.Matrix3x3d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.Equals(CGALDotNet.Geometry.Matrix3x3d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.TryInverse(CGALDotNet.Geometry.Matrix3x3d@)">
            <summary>
            The Inverse of the matrix copied into mInv.
            Returns false if the matrix has no inverse.
            A matrix multipled by its inverse is the idenity.
            Invert a 3x3 using cofactors.  This is about 8 times faster than
            the Numerical Recipes code which uses Gaussian elimination.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.SetColumn(System.Int32,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Set the ith column from avector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.SetRow(System.Int32,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Set the ith row from avector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.ToMatrix4x4d">
            <summary>
            Convert to a double precision 4 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.Translate(CGALDotNet.Geometry.Vector2d)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.Scale(CGALDotNet.Geometry.Vector2d)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.Scale(System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.RotateX(CGALDotNet.Geometry.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.RotateY(CGALDotNet.Geometry.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.RotateZ(CGALDotNet.Geometry.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix3x3d.Rotate(CGALDotNet.Geometry.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="T:CGALDotNet.Geometry.Matrix4x4d">
            <summary>
            Matrix is column major. Data is accessed as: row + (column*4). 
            Matrices can be indexed like 2D arrays but in an expression like mat[a, b], 
            a refers to the row index, while b refers to the column index 
            (note that this is the opposite way round to Cartesian coordinates).
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix4x4d.m00">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix4x4d.m10">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix4x4d.m20">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix4x4d.m30">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Matrix4x4d.Identity">
            <summary>
            The Matrix Idenity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.#ctor(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.#ctor(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            A matrix from the following column vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.#ctor(System.Double)">
            <summary>
            A matrix from the following varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.#ctor(System.Double[0:,0:])">
            <summary>
            A matrix copied from a array of varibles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix4x4d.Item(System.Int32)">
            <summary>
            Access the varible at index i
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix4x4d.Item(System.Int32,System.Int32)">
            <summary>
            Access the varible at index ij
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix4x4d.Transpose">
            <summary>
            The transpose of the matrix. The rows and columns are flipped.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix4x4d.Determinant">
            <summary>
            The determinate of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix4x4d.Adjoint">
            <summary>
            The adjoint of a matrix. 
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Matrix4x4d.Inverse">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.op_Addition(CGALDotNet.Geometry.Matrix4x4d,CGALDotNet.Geometry.Matrix4x4d)">
            <summary>
            Add two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.op_Subtraction(CGALDotNet.Geometry.Matrix4x4d,CGALDotNet.Geometry.Matrix4x4d)">
            <summary>
            Subtract two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.op_Multiply(CGALDotNet.Geometry.Matrix4x4d,CGALDotNet.Geometry.Matrix4x4d)">
            <summary>
            Multiply two matrices.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.op_Multiply(CGALDotNet.Geometry.Matrix4x4d,System.Double)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.op_Multiply(System.Double,CGALDotNet.Geometry.Matrix4x4d)">
            <summary>
            Multiply a matrix by a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.op_Equality(CGALDotNet.Geometry.Matrix4x4d,CGALDotNet.Geometry.Matrix4x4d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.op_Inequality(CGALDotNet.Geometry.Matrix4x4d,CGALDotNet.Geometry.Matrix4x4d)">
            <summary>
            Are these matrices not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.Equals(System.Object)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.Equals(CGALDotNet.Geometry.Matrix4x4d)">
            <summary>
            Are these matrices equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.GetHashCode">
            <summary>
            Matrices hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.ToString">
            <summary>
            A matrix as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.Minor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The minor of a matrix. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.TryInverse(CGALDotNet.Geometry.Matrix4x4d@)">
            <summary>
            The inverse of the matrix.
            A matrix multipled by its inverse is the idenity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.GetColumn(System.Int32)">
            <summary>
            Get the ith column as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.SetColumn(System.Int32,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Set the ith column from a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.GetRow(System.Int32)">
            <summary>
            Get the ith row as a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.SetRow(System.Int32,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Set the ith row from a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.ToMatrix3x3d">
            <summary>
            Convert to a 3 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.TranslateRotateScale(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Quaternion3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Create a translation, rotation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.TranslateRotate(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Quaternion3d)">
            <summary>
            Create a translation and rotation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.TranslateScale(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Create a translation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.RotateScale(CGALDotNet.Geometry.Quaternion3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Create a rotation and scale.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.Translate(CGALDotNet.Geometry.Vector3d)">
            <summary>
            Create a translation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.Scale(CGALDotNet.Geometry.Vector3d)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.Scale(System.Double)">
            <summary>
            Create a scale out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.RotateX(CGALDotNet.Geometry.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.RotateY(CGALDotNet.Geometry.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.RotateZ(CGALDotNet.Geometry.Radian)">
            <summary>
            Create a rotation out of a angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.Rotate(CGALDotNet.Geometry.Vector3d)">
            <summary>
            Create a rotation out of a vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Matrix4x4d.LookAt(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Creates the matrix need to look at target from position.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point2d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point2d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point2d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point2d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point2d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point2d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point2d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.#ctor(System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Point2d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNet.Geometry.Point2d.Magnitude">
            <summary>
            The length of the point from the origin.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Point2d.SqrMagnitude">
            <summary>
            The length of the point from the origin squared.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Addition(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Addition(CGALDotNet.Geometry.Point2d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Addition(System.Double,CGALDotNet.Geometry.Point2d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_UnaryNegation(CGALDotNet.Geometry.Point2d)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Subtraction(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Subtraction(CGALDotNet.Geometry.Point2d,System.Double)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Subtraction(System.Double,CGALDotNet.Geometry.Point2d)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Multiply(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Multiply(CGALDotNet.Geometry.Point2d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Multiply(System.Double,CGALDotNet.Geometry.Point2d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Division(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Division(CGALDotNet.Geometry.Point2d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Explicit(CGALDotNet.Geometry.Vector2d)~CGALDotNet.Geometry.Point2d">
            <summary>
            Explict cast from vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Equality(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.op_Inequality(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Equals(CGALDotNet.Geometry.Point2d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Distance(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.SqrDistance(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Min(CGALDotNet.Geometry.Point2d,System.Double)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Min(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Max(CGALDotNet.Geometry.Point2d,System.Double)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Max(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Clamp(CGALDotNet.Geometry.Point2d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Clamp(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Lerp(CGALDotNet.Geometry.Point2d,CGALDotNet.Geometry.Point2d,System.Double)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point2d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="F:CGALDotNet.Geometry.Point3d.UnitX">
            <summary>
            The unit x point.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point3d.UnitY">
            <summary>
            The unit y point.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point3d.UnitZ">
            <summary>
            The unit z point.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point3d.Zero">
            <summary>
            A point of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point3d.One">
            <summary>
            A point of ones.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point3d.Half">
            <summary>
            A point of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point3d.PositiveInfinity">
            <summary>
            A point of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Point3d.NegativeInfinity">
            <summary>
            A point of negative infinity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.#ctor(System.Double)">
            <summary>
            A point all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A point from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Point3d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNet.Geometry.Point3d.Magnitude">
            <summary>
            The length of the point from the origin.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Point3d.SqrMagnitude">
            <summary>
            The length of the point from the origin squared.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Addition(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Add two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Addition(CGALDotNet.Geometry.Point3d,System.Double)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Addition(System.Double,CGALDotNet.Geometry.Point3d)">
            <summary>
            Add point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_UnaryNegation(CGALDotNet.Geometry.Point3d)">
            <summary>
            Negate point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Subtraction(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Subtract two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Subtraction(CGALDotNet.Geometry.Point3d,System.Double)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Subtraction(System.Double,CGALDotNet.Geometry.Point3d)">
            <summary>
            Subtract point and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Multiply(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Multiply two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Multiply(CGALDotNet.Geometry.Point3d,System.Double)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Multiply(System.Double,CGALDotNet.Geometry.Point3d)">
            <summary>
            Multiply a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Division(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Divide two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Division(CGALDotNet.Geometry.Point3d,System.Double)">
            <summary>
            Divide a point and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Equality(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.op_Inequality(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Are these points not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Equals(System.Object)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Equals(CGALDotNet.Geometry.Point3d)">
            <summary>
            Are these points equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Distance(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.SqrDistance(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Square distance between two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Min(CGALDotNet.Geometry.Point3d,System.Double)">
            <summary>
            The minimum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Min(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            The minimum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Max(CGALDotNet.Geometry.Point3d,System.Double)">
            <summary>
            The maximum value between s and each component in point.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Max(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            The maximum value between each component in points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Clamp(CGALDotNet.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Clamp(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Lerp(CGALDotNet.Geometry.Point3d,CGALDotNet.Geometry.Point3d,System.Double)">
            <summary>
            Lerp between two points.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Point3d.Rounded(System.Int32)">
            <summary>
            A rounded point.
            </summary>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A Quaternion from varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.#ctor(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Radian)">
            <summary>
            A Quaternion from a vector axis and angle.
            The axis is the up direction and the angle is the rotation.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.#ctor(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            A quaternion with the rotation required to
            rotation from the from direction to the to direction.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Quaternion3d.Conjugate">
            <summary>
            Returns the conjugate of a quaternion value.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Quaternion3d.Inverse">
            <summary>
            The inverse of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Quaternion3d.Magnitude">
            <summary>
            The length of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Quaternion3d.SqrMagnitude">
            <summary>
            The sqr length of the quaternion.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Quaternion3d.Normalized">
            <summary>
            The a normalized quaternion.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.op_Multiply(CGALDotNet.Geometry.Quaternion3d,CGALDotNet.Geometry.Quaternion3d)">
            <summary>
            Multiply two quternions together.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.op_Multiply(CGALDotNet.Geometry.Quaternion3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.op_Multiply(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Quaternion3d)">
            <summary>
            Multiply a quaternion and a vector together.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.op_Equality(CGALDotNet.Geometry.Quaternion3d,CGALDotNet.Geometry.Quaternion3d)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.op_Inequality(CGALDotNet.Geometry.Quaternion3d,CGALDotNet.Geometry.Quaternion3d)">
            <summary>
            Are these Quaternions not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.Equals(CGALDotNet.Geometry.Quaternion3d)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.Equals(System.Object)">
            <summary>
            Are these Quaternions equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.GetHashCode">
            <summary>
            Quaternions hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.ToString">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.ToString(System.String)">
            <summary>
            Quaternion as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.ToMatrix3x3d">
            <summary>
            Convert to a 3 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.ToMatrix4x4d">
            <summary>
            Convert to a 4 dimension matrix.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.Normalize">
            <summary>
            The normalize the quaternion.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.Dot(CGALDotNet.Geometry.Quaternion3d,CGALDotNet.Geometry.Quaternion3d)">
            <summary>
            The dot product of two quaternion..
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.Slerp(CGALDotNet.Geometry.Quaternion3d,CGALDotNet.Geometry.Quaternion3d,System.Double)">
            <summary>
            Slerp the quaternion from the from rotation to the to rotation by t.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.FromEuler(CGALDotNet.Geometry.Vector3d)">
            <summary>
            Create a rotation out of a vector in degrees.
            Uses Unity euler axis (+x right, +y up, +z forward)
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.RotateX(CGALDotNet.Geometry.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the x-axis.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the x-axis towards the origin.
            </param>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.RotateY(CGALDotNet.Geometry.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the y-axis.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the y-axis towards the origin.
            </param>
        </member>
        <member name="M:CGALDotNet.Geometry.Quaternion3d.RotateZ(CGALDotNet.Geometry.Radian)">
            <summary>
            Returns a 4x4 matrix that rotates around the z-axis.
            </summary>
            <param name="radian">
            The clockwise rotation angle when looking along the z-axis towards the origin.
            </param>
        </member>
        <member name="T:CGALDotNet.Geometry.Radian">
            <summary>
            Represents a angle in degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Radian.angle">
            <summary>
            The angle in radians.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Radian.PI">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Radian.Ae0">
            <summary>
            0 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Radian.A90">
            <summary>
            90 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Radian.A180">
            <summary>
            180 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Radian.A270">
            <summary>
            270 degrees.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Radian.A360">
            <summary>
            360 degrees.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.#ctor(System.Double)">
            <summary>
            Create a new radian from a value.
            </summary>
            <param name="angle">The angle in radians.</param>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Addition(CGALDotNet.Geometry.Radian,CGALDotNet.Geometry.Radian)">
            <summary>
            Add two angles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Addition(CGALDotNet.Geometry.Radian,System.Double)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_UnaryNegation(CGALDotNet.Geometry.Radian)">
            <summary>
            Negate the angle.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Addition(System.Double,CGALDotNet.Geometry.Radian)">
            <summary>
            Add angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Subtraction(CGALDotNet.Geometry.Radian,CGALDotNet.Geometry.Radian)">
            <summary>
            Subtract two angles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Subtraction(CGALDotNet.Geometry.Radian,System.Double)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Subtraction(System.Double,CGALDotNet.Geometry.Radian)">
            <summary>
            Subtract angle and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Multiply(CGALDotNet.Geometry.Radian,CGALDotNet.Geometry.Radian)">
            <summary>
            Multiply two angles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Multiply(CGALDotNet.Geometry.Radian,System.Double)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Multiply(System.Double,CGALDotNet.Geometry.Radian)">
            <summary>
            Multiply a angle and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Implicit(CGALDotNet.Geometry.Degree)~CGALDotNet.Geometry.Radian">
            <summary>
            Cast from a degrees to radians.
            </summary>
            <param name="v">The angle in radians.</param>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Equality(CGALDotNet.Geometry.Radian,CGALDotNet.Geometry.Radian)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.op_Inequality(CGALDotNet.Geometry.Radian,CGALDotNet.Geometry.Radian)">
            <summary>
            Are these angles not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.Equals(System.Object)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.Equals(CGALDotNet.Geometry.Radian)">
            <summary>
            Are these angles equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.GetHashCode">
            <summary>
            Angles hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.ToString">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Radian.ToString(System.String)">
            <summary>
            Angles as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Ray2d.GetPosition(System.Double)">
            <summary>
            Get the position offset along the ray at t.
            </summary>
            <param name="t">The amount to offset.</param>
            <returns>The position at t.</returns>
        </member>
        <member name="P:CGALDotNet.Geometry.Triangle2d.Area">
            <summary>
            The triangles area.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Triangle2d.SignedArea">
            <summary>
            The triangles signed area.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Triangle2d.CircumCircle">
            <summary>
            Creates a circle that has all 3 points on its circumference.
            From MathWorld: http://mathworld.wolfram.com/Circumcircle.html.
            Fails if the points are colinear.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector2d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector2d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector2d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector2d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector2d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector2d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector2d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector2d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector2d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector2d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector2d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector2d.PerpendicularCCW">
            <summary>
            Counter clock-wise perpendicular.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector2d.PerpendicularCW">
            <summary>
            Clock-wise perpendicular.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Addition(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Addition(CGALDotNet.Geometry.Vector2d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Addition(System.Double,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_UnaryNegation(CGALDotNet.Geometry.Vector2d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Subtraction(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Subtraction(CGALDotNet.Geometry.Vector2d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Subtraction(System.Double,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Multiply(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Multiply(CGALDotNet.Geometry.Vector2d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Multiply(System.Double,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Division(CGALDotNet.Geometry.Vector2d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Explicit(CGALDotNet.Geometry.Point2d)~CGALDotNet.Geometry.Vector2d">
            <summary>
            Explict cast from point.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Equality(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.op_Inequality(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Equals(CGALDotNet.Geometry.Vector2d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Dot(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.AbsDot(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Cross(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Min(CGALDotNet.Geometry.Vector2d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Min(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Max(CGALDotNet.Geometry.Vector2d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Max(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Clamp(CGALDotNet.Geometry.Vector2d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Clamp(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Lerp(CGALDotNet.Geometry.Vector2d,CGALDotNet.Geometry.Vector2d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector2d.Rounded(System.Int32)">
            <summary>
            A rounded vector.
            </summary>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector3d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector3d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector3d.UnitZ">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector3d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector3d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector3d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector3d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector3d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector3d.Item(System.Int32)">
            <summary>
            Array accessor for variables. 
            </summary>
            <param name="i">The variables index.</param>
            <returns>The variable value</returns>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector3d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector3d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector3d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Addition(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Addition(CGALDotNet.Geometry.Vector3d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Addition(System.Double,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_UnaryNegation(CGALDotNet.Geometry.Vector3d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Subtraction(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Subtraction(CGALDotNet.Geometry.Vector3d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Subtraction(System.Double,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Multiply(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Multiply(CGALDotNet.Geometry.Vector3d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Multiply(System.Double,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Division(CGALDotNet.Geometry.Vector3d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Explicit(CGALDotNet.Geometry.Point3d)~CGALDotNet.Geometry.Vector3d">
            <summary>
            Explict cast from point.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Equality(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.op_Inequality(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Equals(CGALDotNet.Geometry.Vector3d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Dot(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.AbsDot(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Cross(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Cross two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Orthonormal(CGALDotNet.Geometry.Vector3d@,CGALDotNet.Geometry.Vector3d@,CGALDotNet.Geometry.Vector3d@)">
            <summary>
            Create a set of orthonormal vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Min(CGALDotNet.Geometry.Vector3d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Min(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Max(CGALDotNet.Geometry.Vector3d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Max(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Clamp(CGALDotNet.Geometry.Vector3d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Clamp(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Lerp(CGALDotNet.Geometry.Vector3d,CGALDotNet.Geometry.Vector3d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector3d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.UnitX">
            <summary>
            The unit x vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.UnitY">
            <summary>
            The unit y vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.UnitZ">
            <summary>
            The unit z vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.UnitW">
            <summary>
            The unit w vector.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.Zero">
            <summary>
            A vector of zeros.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.One">
            <summary>
            A vector of ones.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.Half">
            <summary>
            A vector of 0.5.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.PositiveInfinity">
            <summary>
            A vector of positive infinity.
            </summary>
        </member>
        <member name="F:CGALDotNet.Geometry.Vector4d.NegativeInfinity">
            <summary>
            A vector of negative infinity.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.#ctor(System.Double)">
            <summary>
            A vector all with the value v.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A vector from the varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.#ctor(CGALDotNet.Geometry.Vector2d,System.Double,System.Double)">
            <summary>
            A vector from a 2d vector and the z and w varibles.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.#ctor(CGALDotNet.Geometry.Vector3d,System.Double)">
            <summary>
            A vector from a 3d vector and the w varible.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector4d.Magnitude">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector4d.SqrMagnitude">
            <summary>
            The length of the vector squared.
            </summary>
        </member>
        <member name="P:CGALDotNet.Geometry.Vector4d.Normalized">
            <summary>
            The vector normalized.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Addition(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Add two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Addition(CGALDotNet.Geometry.Vector4d,System.Double)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Addition(System.Double,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Add vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_UnaryNegation(CGALDotNet.Geometry.Vector4d)">
            <summary>
            Negate vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Subtraction(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Subtract two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Subtraction(CGALDotNet.Geometry.Vector4d,System.Double)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Subtraction(System.Double,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Subtract vector and scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Multiply(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Dot porduct of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Multiply(CGALDotNet.Geometry.Vector4d,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Multiply(System.Double,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Division(CGALDotNet.Geometry.Vector4d,System.Double)">
            <summary>
            Divide a vector and a scalar.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Equality(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.op_Inequality(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Are these vectors not equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Equals(System.Object)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Equals(CGALDotNet.Geometry.Vector4d)">
            <summary>
            Are these vectors equal.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.GetHashCode">
            <summary>
            Vectors hash code. 
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.ToString">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.ToString(System.String)">
            <summary>
            Vector as a string.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Dot(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            The dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.AbsDot(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            The abs dot product of two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Normalize">
            <summary>
            Normalize the vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Min(CGALDotNet.Geometry.Vector4d,System.Double)">
            <summary>
            The minimum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Min(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            The minimum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Max(CGALDotNet.Geometry.Vector4d,System.Double)">
            <summary>
            The maximum value between s and each component in vector.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Max(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            The maximum value between each component in vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Clamp(CGALDotNet.Geometry.Vector4d,System.Double,System.Double)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Clamp(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d)">
            <summary>
            Clamp each component to specified min and max.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Lerp(CGALDotNet.Geometry.Vector4d,CGALDotNet.Geometry.Vector4d,System.Double)">
            <summary>
            Lerp between two vectors.
            </summary>
        </member>
        <member name="M:CGALDotNet.Geometry.Vector4d.Rounded(System.Int32)">
            <summary>
            Round vector.
            </summary>
            <param name="digits">number of digits to round to.</param>
        </member>
        <member name="M:CGALDotNet.MathUtil.Wrap(System.Int32,System.Int32)">
            <summary>
            Wrap a value between 0 and count-1 (inclusive).
            </summary>
        </member>
    </members>
</doc>
